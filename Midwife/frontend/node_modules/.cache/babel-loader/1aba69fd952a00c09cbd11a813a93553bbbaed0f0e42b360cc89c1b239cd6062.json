{"ast":null,"code":"import { DecodeStream as $6uUbQ$DecodeStream, Struct as $6uUbQ$Struct, String as $6uUbQ$String, uint32 as $6uUbQ$uint32, Pointer as $6uUbQ$Pointer, uint16 as $6uUbQ$uint16, Array as $6uUbQ$Array, VoidPointer as $6uUbQ$VoidPointer, int16 as $6uUbQ$int16, uint24 as $6uUbQ$uint24, uint8 as $6uUbQ$uint8, VersionedStruct as $6uUbQ$VersionedStruct, LazyArray as $6uUbQ$LazyArray, Reserved as $6uUbQ$Reserved, int32 as $6uUbQ$int32, Bitfield as $6uUbQ$Bitfield, fixed32 as $6uUbQ$fixed32, Buffer as $6uUbQ$Buffer, Number as $6uUbQ$Number, resolveLength as $6uUbQ$resolveLength, fixed16 as $6uUbQ$fixed16, PropertyDescriptor as $6uUbQ$PropertyDescriptor, Fixed as $6uUbQ$Fixed, int8 as $6uUbQ$int8, Optional as $6uUbQ$Optional, EncodeStream as $6uUbQ$EncodeStream } from \"restructure\";\nimport $6uUbQ$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\nimport $6uUbQ$swchelperssrc_ts_decoratemjs from \"@swc/helpers/src/_ts_decorate.mjs\";\nimport $6uUbQ$fastdeepequal from \"fast-deep-equal\";\nimport { getCombiningClass as $6uUbQ$getCombiningClass, getScript as $6uUbQ$getScript, isDigit as $6uUbQ$isDigit, getCategory as $6uUbQ$getCategory, isMark as $6uUbQ$isMark } from \"unicode-properties\";\nimport $6uUbQ$unicodetrie from \"unicode-trie\";\nimport $6uUbQ$dfa from \"dfa\";\nimport $6uUbQ$clone from \"clone\";\nimport $6uUbQ$tinyinflate from \"tiny-inflate\";\nimport $6uUbQ$brotlidecompressjs from \"brotli/decompress.js\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $d636bc798e7178db$exports = {};\n$parcel$export($d636bc798e7178db$exports, \"logErrors\", () => $d636bc798e7178db$export$bd5c5d8b8dcafd78);\n$parcel$export($d636bc798e7178db$exports, \"registerFormat\", () => $d636bc798e7178db$export$36b2f24e97d43be);\n$parcel$export($d636bc798e7178db$exports, \"create\", () => $d636bc798e7178db$export$185802fd694ee1f5);\n$parcel$export($d636bc798e7178db$exports, \"defaultLanguage\", () => $d636bc798e7178db$export$42940898df819940);\n$parcel$export($d636bc798e7178db$exports, \"setDefaultLanguage\", () => $d636bc798e7178db$export$5157e7780d44cc36);\nlet $d636bc798e7178db$export$bd5c5d8b8dcafd78 = false;\nlet $d636bc798e7178db$var$formats = [];\nfunction $d636bc798e7178db$export$36b2f24e97d43be(format) {\n  $d636bc798e7178db$var$formats.push(format);\n}\nfunction $d636bc798e7178db$export$185802fd694ee1f5(buffer, postscriptName) {\n  for (let i = 0; i < $d636bc798e7178db$var$formats.length; i++) {\n    let format = $d636bc798e7178db$var$formats[i];\n    if (format.probe(buffer)) {\n      let font = new format(new (0, $6uUbQ$DecodeStream)(buffer));\n      if (postscriptName) return font.getFont(postscriptName);\n      return font;\n    }\n  }\n  throw new Error(\"Unknown font format\");\n}\nlet $d636bc798e7178db$export$42940898df819940 = \"en\";\nfunction $d636bc798e7178db$export$5157e7780d44cc36(lang = \"en\") {\n  $d636bc798e7178db$export$42940898df819940 = lang;\n}\nfunction $e71565f2ce09cb6b$export$69a3209f1a06c04d(target, key1, descriptor) {\n  if (descriptor.get) {\n    let get = descriptor.get;\n    descriptor.get = function () {\n      let value = get.call(this);\n      Object.defineProperty(this, key1, {\n        value: value\n      });\n      return value;\n    };\n  } else if (typeof descriptor.value === \"function\") {\n    let fn = descriptor.value;\n    return {\n      get() {\n        let cache1 = new Map();\n        function memoized(...args) {\n          let key = args.length > 0 ? args[0] : \"value\";\n          if (cache1.has(key)) return cache1.get(key);\n          let result = fn.apply(this, args);\n          cache1.set(key, result);\n          return result;\n        }\n        Object.defineProperty(this, key1, {\n          value: memoized\n        });\n        return memoized;\n      }\n    };\n  }\n}\nlet $26a62205ad06574e$var$SubHeader = new $6uUbQ$Struct({\n  firstCode: $6uUbQ$uint16,\n  entryCount: $6uUbQ$uint16,\n  idDelta: $6uUbQ$int16,\n  idRangeOffset: $6uUbQ$uint16\n});\nlet $26a62205ad06574e$var$CmapGroup = new $6uUbQ$Struct({\n  startCharCode: $6uUbQ$uint32,\n  endCharCode: $6uUbQ$uint32,\n  glyphID: $6uUbQ$uint32\n});\nlet $26a62205ad06574e$var$UnicodeValueRange = new $6uUbQ$Struct({\n  startUnicodeValue: $6uUbQ$uint24,\n  additionalCount: $6uUbQ$uint8\n});\nlet $26a62205ad06574e$var$UVSMapping = new $6uUbQ$Struct({\n  unicodeValue: $6uUbQ$uint24,\n  glyphID: $6uUbQ$uint16\n});\nlet $26a62205ad06574e$var$DefaultUVS = new $6uUbQ$Array($26a62205ad06574e$var$UnicodeValueRange, $6uUbQ$uint32);\nlet $26a62205ad06574e$var$NonDefaultUVS = new $6uUbQ$Array($26a62205ad06574e$var$UVSMapping, $6uUbQ$uint32);\nlet $26a62205ad06574e$var$VarSelectorRecord = new $6uUbQ$Struct({\n  varSelector: $6uUbQ$uint24,\n  defaultUVS: new $6uUbQ$Pointer($6uUbQ$uint32, $26a62205ad06574e$var$DefaultUVS, {\n    type: \"parent\"\n  }),\n  nonDefaultUVS: new $6uUbQ$Pointer($6uUbQ$uint32, $26a62205ad06574e$var$NonDefaultUVS, {\n    type: \"parent\"\n  })\n});\nlet $26a62205ad06574e$var$CmapSubtable = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  0: {\n    length: $6uUbQ$uint16,\n    language: $6uUbQ$uint16,\n    codeMap: new $6uUbQ$LazyArray($6uUbQ$uint8, 256)\n  },\n  2: {\n    length: $6uUbQ$uint16,\n    language: $6uUbQ$uint16,\n    subHeaderKeys: new $6uUbQ$Array($6uUbQ$uint16, 256),\n    subHeaderCount: t => Math.max.apply(Math, t.subHeaderKeys),\n    subHeaders: new $6uUbQ$LazyArray($26a62205ad06574e$var$SubHeader, \"subHeaderCount\"),\n    glyphIndexArray: new $6uUbQ$LazyArray($6uUbQ$uint16, \"subHeaderCount\")\n  },\n  4: {\n    length: $6uUbQ$uint16,\n    language: $6uUbQ$uint16,\n    segCountX2: $6uUbQ$uint16,\n    segCount: t => t.segCountX2 >> 1,\n    searchRange: $6uUbQ$uint16,\n    entrySelector: $6uUbQ$uint16,\n    rangeShift: $6uUbQ$uint16,\n    endCode: new $6uUbQ$LazyArray($6uUbQ$uint16, \"segCount\"),\n    reservedPad: new $6uUbQ$Reserved($6uUbQ$uint16),\n    startCode: new $6uUbQ$LazyArray($6uUbQ$uint16, \"segCount\"),\n    idDelta: new $6uUbQ$LazyArray($6uUbQ$int16, \"segCount\"),\n    idRangeOffset: new $6uUbQ$LazyArray($6uUbQ$uint16, \"segCount\"),\n    glyphIndexArray: new $6uUbQ$LazyArray($6uUbQ$uint16, t => (t.length - t._currentOffset) / 2)\n  },\n  6: {\n    length: $6uUbQ$uint16,\n    language: $6uUbQ$uint16,\n    firstCode: $6uUbQ$uint16,\n    entryCount: $6uUbQ$uint16,\n    glyphIndices: new $6uUbQ$LazyArray($6uUbQ$uint16, \"entryCount\")\n  },\n  8: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    length: $6uUbQ$uint32,\n    language: $6uUbQ$uint16,\n    is32: new $6uUbQ$LazyArray($6uUbQ$uint8, 8192),\n    nGroups: $6uUbQ$uint32,\n    groups: new $6uUbQ$LazyArray($26a62205ad06574e$var$CmapGroup, \"nGroups\")\n  },\n  10: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    length: $6uUbQ$uint32,\n    language: $6uUbQ$uint32,\n    firstCode: $6uUbQ$uint32,\n    entryCount: $6uUbQ$uint32,\n    glyphIndices: new $6uUbQ$LazyArray($6uUbQ$uint16, \"numChars\")\n  },\n  12: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    length: $6uUbQ$uint32,\n    language: $6uUbQ$uint32,\n    nGroups: $6uUbQ$uint32,\n    groups: new $6uUbQ$LazyArray($26a62205ad06574e$var$CmapGroup, \"nGroups\")\n  },\n  13: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    length: $6uUbQ$uint32,\n    language: $6uUbQ$uint32,\n    nGroups: $6uUbQ$uint32,\n    groups: new $6uUbQ$LazyArray($26a62205ad06574e$var$CmapGroup, \"nGroups\")\n  },\n  14: {\n    length: $6uUbQ$uint32,\n    numRecords: $6uUbQ$uint32,\n    varSelectors: new $6uUbQ$LazyArray($26a62205ad06574e$var$VarSelectorRecord, \"numRecords\")\n  }\n});\nlet $26a62205ad06574e$var$CmapEntry = new $6uUbQ$Struct({\n  platformID: $6uUbQ$uint16,\n  encodingID: $6uUbQ$uint16,\n  table: new $6uUbQ$Pointer($6uUbQ$uint32, $26a62205ad06574e$var$CmapSubtable, {\n    type: \"parent\",\n    lazy: true\n  })\n});\nvar\n// character to glyph mapping\n$26a62205ad06574e$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numSubtables: $6uUbQ$uint16,\n  tables: new $6uUbQ$Array($26a62205ad06574e$var$CmapEntry, \"numSubtables\")\n});\nvar\n// font header\n$f2612a29f92ac062$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$int32,\n  revision: $6uUbQ$int32,\n  checkSumAdjustment: $6uUbQ$uint32,\n  magicNumber: $6uUbQ$uint32,\n  flags: $6uUbQ$uint16,\n  unitsPerEm: $6uUbQ$uint16,\n  created: new $6uUbQ$Array($6uUbQ$int32, 2),\n  modified: new $6uUbQ$Array($6uUbQ$int32, 2),\n  xMin: $6uUbQ$int16,\n  yMin: $6uUbQ$int16,\n  xMax: $6uUbQ$int16,\n  yMax: $6uUbQ$int16,\n  macStyle: new $6uUbQ$Bitfield($6uUbQ$uint16, [\"bold\", \"italic\", \"underline\", \"outline\", \"shadow\", \"condensed\", \"extended\"]),\n  lowestRecPPEM: $6uUbQ$uint16,\n  fontDirectionHint: $6uUbQ$int16,\n  indexToLocFormat: $6uUbQ$int16,\n  glyphDataFormat: $6uUbQ$int16 // 0 for current format\n});\nvar\n// horizontal header\n$2c179dd593583073$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$int32,\n  ascent: $6uUbQ$int16,\n  descent: $6uUbQ$int16,\n  lineGap: $6uUbQ$int16,\n  advanceWidthMax: $6uUbQ$uint16,\n  minLeftSideBearing: $6uUbQ$int16,\n  minRightSideBearing: $6uUbQ$int16,\n  xMaxExtent: $6uUbQ$int16,\n  caretSlopeRise: $6uUbQ$int16,\n  caretSlopeRun: $6uUbQ$int16,\n  caretOffset: $6uUbQ$int16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$int16, 4),\n  metricDataFormat: $6uUbQ$int16,\n  numberOfMetrics: $6uUbQ$uint16 // Number of advance widths in 'hmtx' table\n});\nlet $bdc9060542264b85$var$HmtxEntry = new $6uUbQ$Struct({\n  advance: $6uUbQ$uint16,\n  bearing: $6uUbQ$int16\n});\nvar $bdc9060542264b85$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  metrics: new $6uUbQ$LazyArray($bdc9060542264b85$var$HmtxEntry, t => t.parent.hhea.numberOfMetrics),\n  bearings: new $6uUbQ$LazyArray($6uUbQ$int16, t => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\nvar\n// maxiumum profile\n$dbf51cb3d3fe409d$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$int32,\n  numGlyphs: $6uUbQ$uint16,\n  maxPoints: $6uUbQ$uint16,\n  maxContours: $6uUbQ$uint16,\n  maxComponentPoints: $6uUbQ$uint16,\n  maxComponentContours: $6uUbQ$uint16,\n  maxZones: $6uUbQ$uint16,\n  maxTwilightPoints: $6uUbQ$uint16,\n  maxStorage: $6uUbQ$uint16,\n  maxFunctionDefs: $6uUbQ$uint16,\n  maxInstructionDefs: $6uUbQ$uint16,\n  maxStackElements: $6uUbQ$uint16,\n  maxSizeOfInstructions: $6uUbQ$uint16,\n  maxComponentElements: $6uUbQ$uint16,\n  maxComponentDepth: $6uUbQ$uint16 // Maximum levels of recursion; 1 for simple components\n});\nfunction $e449ad78d50845fe$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {\n  if (platformID === 1 && $e449ad78d50845fe$export$479e671907f486d1[languageID]) return $e449ad78d50845fe$export$479e671907f486d1[languageID];\n  return $e449ad78d50845fe$export$6fef87b7618bdf0b[platformID][encodingID];\n}\nconst $e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS = new Set([\"x-mac-roman\", \"x-mac-cyrillic\", \"iso-8859-6\", \"iso-8859-8\"]);\nconst $e449ad78d50845fe$var$MAC_ENCODINGS = {\n  \"x-mac-croatian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\u0160\\u2122\\xb4\\xa8\\u2260\\u017D\\xd8\\u221E\\xb1\\u2264\\u2265\\u2206\\xb5\\u2202\\u2211\\u220F\\u0161\\u222B\\xaa\\xba\\u03A9\\u017E\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u0106\\xab\\u010C\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u0110\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\uF8FF\\xa9\\u2044\\u20AC\\u2039\\u203A\\xc6\\xbb\\u2013\\xb7\\u201A\\u201E\\u2030\\xc2\\u0107\\xc1\\u010D\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\u0111\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u03C0\\xcb\\u02DA\\xb8\\xca\\xe6\\u02C7\",\n  \"x-mac-gaelic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u1E02\\xb1\\u2264\\u2265\\u1E03\\u010A\\u010B\\u1E0A\\u1E0B\\u1E1E\\u1E1F\\u0120\\u0121\\u1E40\\xe6\\xf8\\u1E41\\u1E56\\u1E57\\u027C\\u0192\\u017F\\u1E60\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\u1E61\\u1E9B\\xff\\u0178\\u1E6A\\u20AC\\u2039\\u203A\\u0176\\u0177\\u1E6B\\xb7\\u1EF2\\u1EF3\\u204A\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\u2663\\xd2\\xda\\xdb\\xd9\\u0131\\xdd\\xfd\\u0174\\u0175\\u1E84\\u1E85\\u1E80\\u1E81\\u1E82\\u1E83\",\n  \"x-mac-greek\": \"\\xc4\\xb9\\xb2\\xc9\\xb3\\xd6\\xdc\\u0385\\xe0\\xe2\\xe4\\u0384\\xa8\\xe7\\xe9\\xe8\\xea\\xeb\\xa3\\u2122\\xee\\xef\\u2022\\xbd\\u2030\\xf4\\xf6\\xa6\\u20AC\\xf9\\xfb\\xfc\\u2020\\u0393\\u0394\\u0398\\u039B\\u039E\\u03A0\\xdf\\xae\\xa9\\u03A3\\u03AA\\xa7\\u2260\\xb0\\xb7\\u0391\\xb1\\u2264\\u2265\\xa5\\u0392\\u0395\\u0396\\u0397\\u0399\\u039A\\u039C\\u03A6\\u03AB\\u03A8\\u03A9\\u03AC\\u039D\\xac\\u039F\\u03A1\\u2248\\u03A4\\xab\\xbb\\u2026 \\u03A5\\u03A7\\u0386\\u0388\\u0153\\u2013\\u2015\\u201C\\u201D\\u2018\\u2019\\xf7\\u0389\\u038A\\u038C\\u038E\\u03AD\\u03AE\\u03AF\\u03CC\\u038F\\u03CD\\u03B1\\u03B2\\u03C8\\u03B4\\u03B5\\u03C6\\u03B3\\u03B7\\u03B9\\u03BE\\u03BA\\u03BB\\u03BC\\u03BD\\u03BF\\u03C0\\u03CE\\u03C1\\u03C3\\u03C4\\u03B8\\u03C9\\u03C2\\u03C7\\u03C5\\u03B6\\u03CA\\u03CB\\u0390\\u03B0\\xad\",\n  \"x-mac-icelandic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\xdd\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\xe6\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u2044\\u20AC\\xd0\\xf0\\xde\\xfe\\xfd\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\",\n  \"x-mac-inuit\": \"\\u1403\\u1404\\u1405\\u1406\\u140A\\u140B\\u1431\\u1432\\u1433\\u1434\\u1438\\u1439\\u1449\\u144E\\u144F\\u1450\\u1451\\u1455\\u1456\\u1466\\u146D\\u146E\\u146F\\u1470\\u1472\\u1473\\u1483\\u148B\\u148C\\u148D\\u148E\\u1490\\u1491\\xb0\\u14A1\\u14A5\\u14A6\\u2022\\xb6\\u14A7\\xae\\xa9\\u2122\\u14A8\\u14AA\\u14AB\\u14BB\\u14C2\\u14C3\\u14C4\\u14C5\\u14C7\\u14C8\\u14D0\\u14EF\\u14F0\\u14F1\\u14F2\\u14F4\\u14F5\\u1505\\u14D5\\u14D6\\u14D7\\u14D8\\u14DA\\u14DB\\u14EA\\u1528\\u1529\\u152A\\u152B\\u152D\\u2026 \\u152E\\u153E\\u1555\\u1556\\u1557\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\u1558\\u1559\\u155A\\u155D\\u1546\\u1547\\u1548\\u1549\\u154B\\u154C\\u1550\\u157F\\u1580\\u1581\\u1582\\u1583\\u1584\\u1585\\u158F\\u1590\\u1591\\u1592\\u1593\\u1594\\u1595\\u1671\\u1672\\u1673\\u1674\\u1675\\u1676\\u1596\\u15A0\\u15A1\\u15A2\\u15A3\\u15A4\\u15A5\\u15A6\\u157C\\u0141\\u0142\",\n  \"x-mac-ce\": \"\\xc4\\u0100\\u0101\\xc9\\u0104\\xd6\\xdc\\xe1\\u0105\\u010C\\xe4\\u010D\\u0106\\u0107\\xe9\\u0179\\u017A\\u010E\\xed\\u010F\\u0112\\u0113\\u0116\\xf3\\u0117\\xf4\\xf6\\xf5\\xfa\\u011A\\u011B\\xfc\\u2020\\xb0\\u0118\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\u0119\\xa8\\u2260\\u0123\\u012E\\u012F\\u012A\\u2264\\u2265\\u012B\\u0136\\u2202\\u2211\\u0142\\u013B\\u013C\\u013D\\u013E\\u0139\\u013A\\u0145\\u0146\\u0143\\xac\\u221A\\u0144\\u0147\\u2206\\xab\\xbb\\u2026 \\u0148\\u0150\\xd5\\u0151\\u014C\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\u014D\\u0154\\u0155\\u0158\\u2039\\u203A\\u0159\\u0156\\u0157\\u0160\\u201A\\u201E\\u0161\\u015A\\u015B\\xc1\\u0164\\u0165\\xcd\\u017D\\u017E\\u016A\\xd3\\xd4\\u016B\\u016E\\xda\\u016F\\u0170\\u0171\\u0172\\u0173\\xdd\\xfd\\u0137\\u017B\\u0141\\u017C\\u0122\\u02C7\",\n  \"x-mac-romanian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\u0102\\u0218\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\u0103\\u0219\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u2044\\u20AC\\u2039\\u203A\\u021A\\u021B\\u2021\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\",\n  \"x-mac-turkish\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\xe6\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u011E\\u011F\\u0130\\u0131\\u015E\\u015F\\u2021\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\uF8A0\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\"\n};\nconst $e449ad78d50845fe$var$encodingCache = new Map();\nfunction $e449ad78d50845fe$export$1dceb3c14ed68bee(encoding) {\n  let cached = $e449ad78d50845fe$var$encodingCache.get(encoding);\n  if (cached) return cached;\n  // These encodings aren't supported by TextDecoder.\n  let mapping = $e449ad78d50845fe$var$MAC_ENCODINGS[encoding];\n  if (mapping) {\n    let res = new Map();\n    for (let i = 0; i < mapping.length; i++) res.set(mapping.charCodeAt(i), 0x80 + i);\n    $e449ad78d50845fe$var$encodingCache.set(encoding, res);\n    return res;\n  }\n  // Only single byte encodings can be mapped 1:1.\n  if ($e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS.has(encoding)) {\n    // TextEncoder only supports utf8, whereas TextDecoder supports legacy encodings.\n    // Use this to create a mapping of code points.\n    let decoder = new TextDecoder(encoding);\n    let mapping = new Uint8Array(0x80);\n    for (let i = 0; i < 0x80; i++) mapping[i] = 0x80 + i;\n    let res = new Map();\n    let s = decoder.decode(mapping);\n    for (let i1 = 0; i1 < 0x80; i1++) res.set(s.charCodeAt(i1), 0x80 + i1);\n    $e449ad78d50845fe$var$encodingCache.set(encoding, res);\n    return res;\n  }\n}\nconst $e449ad78d50845fe$export$6fef87b7618bdf0b = [\n// unicode\n[\"utf16be\", \"utf16be\", \"utf16be\", \"utf16be\", \"utf16be\", \"utf16be\"],\n// macintosh\n// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n// 0\tRoman                 17\tMalayalam\n// 1\tJapanese\t            18\tSinhalese\n// 2\tTraditional Chinese\t  19\tBurmese\n// 3\tKorean\t              20\tKhmer\n// 4\tArabic\t              21\tThai\n// 5\tHebrew\t              22\tLaotian\n// 6\tGreek\t                23\tGeorgian\n// 7\tRussian\t              24\tArmenian\n// 8\tRSymbol\t              25\tSimplified Chinese\n// 9\tDevanagari\t          26\tTibetan\n// 10\tGurmukhi\t            27\tMongolian\n// 11\tGujarati\t            28\tGeez\n// 12\tOriya\t                29\tSlavic\n// 13\tBengali\t              30\tVietnamese\n// 14\tTamil\t                31\tSindhi\n// 15\tTelugu\t              32\t(Uninterpreted)\n// 16\tKannada\n[\"x-mac-roman\", \"shift-jis\", \"big5\", \"euc-kr\", \"iso-8859-6\", \"iso-8859-8\", \"x-mac-greek\", \"x-mac-cyrillic\", \"x-mac-symbol\", \"x-mac-devanagari\", \"x-mac-gurmukhi\", \"x-mac-gujarati\", \"Oriya\", \"Bengali\", \"Tamil\", \"Telugu\", \"Kannada\", \"Malayalam\", \"Sinhalese\", \"Burmese\", \"Khmer\", \"iso-8859-11\", \"Laotian\", \"Georgian\", \"Armenian\", \"hz-gb-2312\", \"Tibetan\", \"Mongolian\", \"Geez\", \"x-mac-ce\", \"Vietnamese\", \"Sindhi\"],\n// ISO (deprecated)\n[\"ascii\"],\n// windows\n// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n[\"symbol\", \"utf16be\", \"shift-jis\", \"gb18030\", \"big5\", \"x-cp20949\", \"johab\", null, null, null, \"utf16be\"]];\nconst $e449ad78d50845fe$export$479e671907f486d1 = {\n  15: \"x-mac-icelandic\",\n  17: \"x-mac-turkish\",\n  18: \"x-mac-croatian\",\n  24: \"x-mac-ce\",\n  25: \"x-mac-ce\",\n  26: \"x-mac-ce\",\n  27: \"x-mac-ce\",\n  28: \"x-mac-ce\",\n  30: \"x-mac-icelandic\",\n  37: \"x-mac-romanian\",\n  38: \"x-mac-ce\",\n  39: \"x-mac-ce\",\n  40: \"x-mac-ce\",\n  143: \"x-mac-inuit\",\n  146: \"x-mac-gaelic\"\n};\nconst $e449ad78d50845fe$export$2092376fd002e13 = [\n// unicode\n[], {\n  0: \"en\",\n  30: \"fo\",\n  60: \"ks\",\n  90: \"rw\",\n  1: \"fr\",\n  31: \"fa\",\n  61: \"ku\",\n  91: \"rn\",\n  2: \"de\",\n  32: \"ru\",\n  62: \"sd\",\n  92: \"ny\",\n  3: \"it\",\n  33: \"zh\",\n  63: \"bo\",\n  93: \"mg\",\n  4: \"nl\",\n  34: \"nl-BE\",\n  64: \"ne\",\n  94: \"eo\",\n  5: \"sv\",\n  35: \"ga\",\n  65: \"sa\",\n  128: \"cy\",\n  6: \"es\",\n  36: \"sq\",\n  66: \"mr\",\n  129: \"eu\",\n  7: \"da\",\n  37: \"ro\",\n  67: \"bn\",\n  130: \"ca\",\n  8: \"pt\",\n  38: \"cz\",\n  68: \"as\",\n  131: \"la\",\n  9: \"no\",\n  39: \"sk\",\n  69: \"gu\",\n  132: \"qu\",\n  10: \"he\",\n  40: \"si\",\n  70: \"pa\",\n  133: \"gn\",\n  11: \"ja\",\n  41: \"yi\",\n  71: \"or\",\n  134: \"ay\",\n  12: \"ar\",\n  42: \"sr\",\n  72: \"ml\",\n  135: \"tt\",\n  13: \"fi\",\n  43: \"mk\",\n  73: \"kn\",\n  136: \"ug\",\n  14: \"el\",\n  44: \"bg\",\n  74: \"ta\",\n  137: \"dz\",\n  15: \"is\",\n  45: \"uk\",\n  75: \"te\",\n  138: \"jv\",\n  16: \"mt\",\n  46: \"be\",\n  76: \"si\",\n  139: \"su\",\n  17: \"tr\",\n  47: \"uz\",\n  77: \"my\",\n  140: \"gl\",\n  18: \"hr\",\n  48: \"kk\",\n  78: \"km\",\n  141: \"af\",\n  19: \"zh-Hant\",\n  49: \"az-Cyrl\",\n  79: \"lo\",\n  142: \"br\",\n  20: \"ur\",\n  50: \"az-Arab\",\n  80: \"vi\",\n  143: \"iu\",\n  21: \"hi\",\n  51: \"hy\",\n  81: \"id\",\n  144: \"gd\",\n  22: \"th\",\n  52: \"ka\",\n  82: \"tl\",\n  145: \"gv\",\n  23: \"ko\",\n  53: \"mo\",\n  83: \"ms\",\n  146: \"ga\",\n  24: \"lt\",\n  54: \"ky\",\n  84: \"ms-Arab\",\n  147: \"to\",\n  25: \"pl\",\n  55: \"tg\",\n  85: \"am\",\n  148: \"el-polyton\",\n  26: \"hu\",\n  56: \"tk\",\n  86: \"ti\",\n  149: \"kl\",\n  27: \"es\",\n  57: \"mn-CN\",\n  87: \"om\",\n  150: \"az\",\n  28: \"lv\",\n  58: \"mn\",\n  88: \"so\",\n  151: \"nn\",\n  29: \"se\",\n  59: \"ps\",\n  89: \"sw\"\n},\n// ISO (deprecated)\n[], {\n  0x0436: \"af\",\n  0x4009: \"en-IN\",\n  0x0487: \"rw\",\n  0x0432: \"tn\",\n  0x041C: \"sq\",\n  0x1809: \"en-IE\",\n  0x0441: \"sw\",\n  0x045B: \"si\",\n  0x0484: \"gsw\",\n  0x2009: \"en-JM\",\n  0x0457: \"kok\",\n  0x041B: \"sk\",\n  0x045E: \"am\",\n  0x4409: \"en-MY\",\n  0x0412: \"ko\",\n  0x0424: \"sl\",\n  0x1401: \"ar-DZ\",\n  0x1409: \"en-NZ\",\n  0x0440: \"ky\",\n  0x2C0A: \"es-AR\",\n  0x3C01: \"ar-BH\",\n  0x3409: \"en-PH\",\n  0x0454: \"lo\",\n  0x400A: \"es-BO\",\n  0x0C01: \"ar\",\n  0x4809: \"en-SG\",\n  0x0426: \"lv\",\n  0x340A: \"es-CL\",\n  0x0801: \"ar-IQ\",\n  0x1C09: \"en-ZA\",\n  0x0427: \"lt\",\n  0x240A: \"es-CO\",\n  0x2C01: \"ar-JO\",\n  0x2C09: \"en-TT\",\n  0x082E: \"dsb\",\n  0x140A: \"es-CR\",\n  0x3401: \"ar-KW\",\n  0x0809: \"en-GB\",\n  0x046E: \"lb\",\n  0x1C0A: \"es-DO\",\n  0x3001: \"ar-LB\",\n  0x0409: \"en\",\n  0x042F: \"mk\",\n  0x300A: \"es-EC\",\n  0x1001: \"ar-LY\",\n  0x3009: \"en-ZW\",\n  0x083E: \"ms-BN\",\n  0x440A: \"es-SV\",\n  0x1801: \"ary\",\n  0x0425: \"et\",\n  0x043E: \"ms\",\n  0x100A: \"es-GT\",\n  0x2001: \"ar-OM\",\n  0x0438: \"fo\",\n  0x044C: \"ml\",\n  0x480A: \"es-HN\",\n  0x4001: \"ar-QA\",\n  0x0464: \"fil\",\n  0x043A: \"mt\",\n  0x080A: \"es-MX\",\n  0x0401: \"ar-SA\",\n  0x040B: \"fi\",\n  0x0481: \"mi\",\n  0x4C0A: \"es-NI\",\n  0x2801: \"ar-SY\",\n  0x080C: \"fr-BE\",\n  0x047A: \"arn\",\n  0x180A: \"es-PA\",\n  0x1C01: \"aeb\",\n  0x0C0C: \"fr-CA\",\n  0x044E: \"mr\",\n  0x3C0A: \"es-PY\",\n  0x3801: \"ar-AE\",\n  0x040C: \"fr\",\n  0x047C: \"moh\",\n  0x280A: \"es-PE\",\n  0x2401: \"ar-YE\",\n  0x140C: \"fr-LU\",\n  0x0450: \"mn\",\n  0x500A: \"es-PR\",\n  0x042B: \"hy\",\n  0x180C: \"fr-MC\",\n  0x0850: \"mn-CN\",\n  0x0C0A: \"es\",\n  0x044D: \"as\",\n  0x100C: \"fr-CH\",\n  0x0461: \"ne\",\n  0x040A: \"es\",\n  0x082C: \"az-Cyrl\",\n  0x0462: \"fy\",\n  0x0414: \"nb\",\n  0x540A: \"es-US\",\n  0x042C: \"az\",\n  0x0456: \"gl\",\n  0x0814: \"nn\",\n  0x380A: \"es-UY\",\n  0x046D: \"ba\",\n  0x0437: \"ka\",\n  0x0482: \"oc\",\n  0x200A: \"es-VE\",\n  0x042D: \"eu\",\n  0x0C07: \"de-AT\",\n  0x0448: \"or\",\n  0x081D: \"sv-FI\",\n  0x0423: \"be\",\n  0x0407: \"de\",\n  0x0463: \"ps\",\n  0x041D: \"sv\",\n  0x0845: \"bn\",\n  0x1407: \"de-LI\",\n  0x0415: \"pl\",\n  0x045A: \"syr\",\n  0x0445: \"bn-IN\",\n  0x1007: \"de-LU\",\n  0x0416: \"pt\",\n  0x0428: \"tg\",\n  0x201A: \"bs-Cyrl\",\n  0x0807: \"de-CH\",\n  0x0816: \"pt-PT\",\n  0x085F: \"tzm\",\n  0x141A: \"bs\",\n  0x0408: \"el\",\n  0x0446: \"pa\",\n  0x0449: \"ta\",\n  0x047E: \"br\",\n  0x046F: \"kl\",\n  0x046B: \"qu-BO\",\n  0x0444: \"tt\",\n  0x0402: \"bg\",\n  0x0447: \"gu\",\n  0x086B: \"qu-EC\",\n  0x044A: \"te\",\n  0x0403: \"ca\",\n  0x0468: \"ha\",\n  0x0C6B: \"qu\",\n  0x041E: \"th\",\n  0x0C04: \"zh-HK\",\n  0x040D: \"he\",\n  0x0418: \"ro\",\n  0x0451: \"bo\",\n  0x1404: \"zh-MO\",\n  0x0439: \"hi\",\n  0x0417: \"rm\",\n  0x041F: \"tr\",\n  0x0804: \"zh\",\n  0x040E: \"hu\",\n  0x0419: \"ru\",\n  0x0442: \"tk\",\n  0x1004: \"zh-SG\",\n  0x040F: \"is\",\n  0x243B: \"smn\",\n  0x0480: \"ug\",\n  0x0404: \"zh-TW\",\n  0x0470: \"ig\",\n  0x103B: \"smj-NO\",\n  0x0422: \"uk\",\n  0x0483: \"co\",\n  0x0421: \"id\",\n  0x143B: \"smj\",\n  0x042E: \"hsb\",\n  0x041A: \"hr\",\n  0x045D: \"iu\",\n  0x0C3B: \"se-FI\",\n  0x0420: \"ur\",\n  0x101A: \"hr-BA\",\n  0x085D: \"iu-Latn\",\n  0x043B: \"se\",\n  0x0843: \"uz-Cyrl\",\n  0x0405: \"cs\",\n  0x083C: \"ga\",\n  0x083B: \"se-SE\",\n  0x0443: \"uz\",\n  0x0406: \"da\",\n  0x0434: \"xh\",\n  0x203B: \"sms\",\n  0x042A: \"vi\",\n  0x048C: \"prs\",\n  0x0435: \"zu\",\n  0x183B: \"sma-NO\",\n  0x0452: \"cy\",\n  0x0465: \"dv\",\n  0x0410: \"it\",\n  0x1C3B: \"sms\",\n  0x0488: \"wo\",\n  0x0813: \"nl-BE\",\n  0x0810: \"it-CH\",\n  0x044F: \"sa\",\n  0x0485: \"sah\",\n  0x0413: \"nl\",\n  0x0411: \"ja\",\n  0x1C1A: \"sr-Cyrl-BA\",\n  0x0478: \"ii\",\n  0x0C09: \"en-AU\",\n  0x044B: \"kn\",\n  0x0C1A: \"sr\",\n  0x046A: \"yo\",\n  0x2809: \"en-BZ\",\n  0x043F: \"kk\",\n  0x181A: \"sr-Latn-BA\",\n  0x1009: \"en-CA\",\n  0x0453: \"km\",\n  0x081A: \"sr-Latn\",\n  0x2409: \"en-029\",\n  0x0486: \"quc\",\n  0x046C: \"nso\"\n}];\nlet $2bcf221753ec8e32$var$NameRecord = new $6uUbQ$Struct({\n  platformID: $6uUbQ$uint16,\n  encodingID: $6uUbQ$uint16,\n  languageID: $6uUbQ$uint16,\n  nameID: $6uUbQ$uint16,\n  length: $6uUbQ$uint16,\n  string: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$String(\"length\", t => (0, $e449ad78d50845fe$export$badc544e0651b6b1)(t.platformID, t.encodingID, t.languageID)), {\n    type: \"parent\",\n    relativeTo: ctx => ctx.parent.stringOffset,\n    allowNull: false\n  })\n});\nlet $2bcf221753ec8e32$var$LangTagRecord = new $6uUbQ$Struct({\n  length: $6uUbQ$uint16,\n  tag: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$String(\"length\", \"utf16be\"), {\n    type: \"parent\",\n    relativeTo: ctx => ctx.stringOffset\n  })\n});\nvar $2bcf221753ec8e32$var$NameTable = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  0: {\n    count: $6uUbQ$uint16,\n    stringOffset: $6uUbQ$uint16,\n    records: new $6uUbQ$Array($2bcf221753ec8e32$var$NameRecord, \"count\")\n  },\n  1: {\n    count: $6uUbQ$uint16,\n    stringOffset: $6uUbQ$uint16,\n    records: new $6uUbQ$Array($2bcf221753ec8e32$var$NameRecord, \"count\"),\n    langTagCount: $6uUbQ$uint16,\n    langTags: new $6uUbQ$Array($2bcf221753ec8e32$var$LangTagRecord, \"langTagCount\")\n  }\n});\nvar $2bcf221753ec8e32$export$2e2bcd8739ae039 = $2bcf221753ec8e32$var$NameTable;\nconst $2bcf221753ec8e32$var$NAMES = [\"copyright\", \"fontFamily\", \"fontSubfamily\", \"uniqueSubfamily\", \"fullName\", \"version\", \"postscriptName\", \"trademark\", \"manufacturer\", \"designer\", \"description\", \"vendorURL\", \"designerURL\", \"license\", \"licenseURL\", null, \"preferredFamily\", \"preferredSubfamily\", \"compatibleFull\", \"sampleText\", \"postscriptCIDFontName\", \"wwsFamilyName\", \"wwsSubfamilyName\"];\n$2bcf221753ec8e32$var$NameTable.process = function (stream) {\n  var records = {};\n  for (let record of this.records) {\n    // find out what language this is for\n    let language = (0, $e449ad78d50845fe$export$2092376fd002e13)[record.platformID][record.languageID];\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) language = this.langTags[record.languageID - 0x8000].tag;\n    if (language == null) language = record.platformID + \"-\" + record.languageID;\n    // if the nameID is >= 256, it is a font feature record (AAT)\n    let key = record.nameID >= 256 ? \"fontFeatures\" : $2bcf221753ec8e32$var$NAMES[record.nameID] || record.nameID;\n    if (records[key] == null) records[key] = {};\n    let obj = records[key];\n    if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});\n    if (typeof record.string === \"string\" || typeof obj[language] !== \"string\") obj[language] = record.string;\n  }\n  this.records = records;\n};\n$2bcf221753ec8e32$var$NameTable.preEncode = function () {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n  let records = [];\n  for (let key in this.records) {\n    let val = this.records[key];\n    if (key === \"fontFeatures\") continue;\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: $2bcf221753ec8e32$var$NAMES.indexOf(key),\n      length: val.en.length * 2,\n      string: val.en\n    });\n    if (key === \"postscriptName\") records.push({\n      platformID: 1,\n      encodingID: 0,\n      languageID: 0,\n      nameID: $2bcf221753ec8e32$var$NAMES.indexOf(key),\n      length: val.en.length,\n      string: val.en\n    });\n  }\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = $2bcf221753ec8e32$var$NameTable.size(this, null, false);\n};\nvar $84b272aa31b70606$var$OS2 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  header: {\n    xAvgCharWidth: $6uUbQ$int16,\n    usWeightClass: $6uUbQ$uint16,\n    usWidthClass: $6uUbQ$uint16,\n    fsType: new $6uUbQ$Bitfield($6uUbQ$uint16, [null, \"noEmbedding\", \"viewOnly\", \"editable\", null, null, null, null, \"noSubsetting\", \"bitmapOnly\"]),\n    ySubscriptXSize: $6uUbQ$int16,\n    ySubscriptYSize: $6uUbQ$int16,\n    ySubscriptXOffset: $6uUbQ$int16,\n    ySubscriptYOffset: $6uUbQ$int16,\n    ySuperscriptXSize: $6uUbQ$int16,\n    ySuperscriptYSize: $6uUbQ$int16,\n    ySuperscriptXOffset: $6uUbQ$int16,\n    ySuperscriptYOffset: $6uUbQ$int16,\n    yStrikeoutSize: $6uUbQ$int16,\n    yStrikeoutPosition: $6uUbQ$int16,\n    sFamilyClass: $6uUbQ$int16,\n    panose: new $6uUbQ$Array($6uUbQ$uint8, 10),\n    ulCharRange: new $6uUbQ$Array($6uUbQ$uint32, 4),\n    vendorID: new $6uUbQ$String(4),\n    fsSelection: new $6uUbQ$Bitfield($6uUbQ$uint16, [\"italic\", \"underscore\", \"negative\", \"outlined\", \"strikeout\", \"bold\", \"regular\", \"useTypoMetrics\", \"wws\", \"oblique\"]),\n    usFirstCharIndex: $6uUbQ$uint16,\n    usLastCharIndex: $6uUbQ$uint16 // The maximum Unicode index in this font\n  },\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n  1: {\n    typoAscender: $6uUbQ$int16,\n    typoDescender: $6uUbQ$int16,\n    typoLineGap: $6uUbQ$int16,\n    winAscent: $6uUbQ$uint16,\n    winDescent: $6uUbQ$uint16,\n    codePageRange: new $6uUbQ$Array($6uUbQ$uint32, 2)\n  },\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender: $6uUbQ$int16,\n    typoDescender: $6uUbQ$int16,\n    typoLineGap: $6uUbQ$int16,\n    winAscent: $6uUbQ$uint16,\n    winDescent: $6uUbQ$uint16,\n    codePageRange: new $6uUbQ$Array($6uUbQ$uint32, 2),\n    xHeight: $6uUbQ$int16,\n    capHeight: $6uUbQ$int16,\n    defaultChar: $6uUbQ$uint16,\n    breakChar: $6uUbQ$uint16,\n    maxContent: $6uUbQ$uint16\n  },\n  5: {\n    typoAscender: $6uUbQ$int16,\n    typoDescender: $6uUbQ$int16,\n    typoLineGap: $6uUbQ$int16,\n    winAscent: $6uUbQ$uint16,\n    winDescent: $6uUbQ$uint16,\n    codePageRange: new $6uUbQ$Array($6uUbQ$uint32, 2),\n    xHeight: $6uUbQ$int16,\n    capHeight: $6uUbQ$int16,\n    defaultChar: $6uUbQ$uint16,\n    breakChar: $6uUbQ$uint16,\n    maxContent: $6uUbQ$uint16,\n    usLowerOpticalPointSize: $6uUbQ$uint16,\n    usUpperOpticalPointSize: $6uUbQ$uint16\n  }\n});\nlet $84b272aa31b70606$var$versions = $84b272aa31b70606$var$OS2.versions;\n$84b272aa31b70606$var$versions[3] = $84b272aa31b70606$var$versions[4] = $84b272aa31b70606$var$versions[2];\nvar $84b272aa31b70606$export$2e2bcd8739ae039 = $84b272aa31b70606$var$OS2;\nvar\n// PostScript information\n$32d9e2eb9565d93c$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$fixed32, {\n  header: {\n    italicAngle: $6uUbQ$fixed32,\n    underlinePosition: $6uUbQ$int16,\n    underlineThickness: $6uUbQ$int16,\n    isFixedPitch: $6uUbQ$uint32,\n    minMemType42: $6uUbQ$uint32,\n    maxMemType42: $6uUbQ$uint32,\n    minMemType1: $6uUbQ$uint32,\n    maxMemType1: $6uUbQ$uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n  },\n  1: {},\n  2: {\n    numberOfGlyphs: $6uUbQ$uint16,\n    glyphNameIndex: new $6uUbQ$Array($6uUbQ$uint16, \"numberOfGlyphs\"),\n    names: new $6uUbQ$Array(new $6uUbQ$String($6uUbQ$uint8))\n  },\n  2.5: {\n    numberOfGlyphs: $6uUbQ$uint16,\n    offsets: new $6uUbQ$Array($6uUbQ$uint8, \"numberOfGlyphs\")\n  },\n  3: {},\n  4: {\n    map: new $6uUbQ$Array($6uUbQ$uint32, t => t.parent.maxp.numGlyphs)\n  }\n});\nvar\n// An array of predefined values accessible by instructions\n$5202bd9d9ad8eaac$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  controlValues: new $6uUbQ$Array($6uUbQ$int16)\n});\nvar\n// A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\n$5c0f37ca5ffb1850$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  instructions: new $6uUbQ$Array($6uUbQ$uint8)\n});\nlet $2b2b260902b1c57e$var$loca = new $6uUbQ$VersionedStruct(\"head.indexToLocFormat\", {\n  0: {\n    offsets: new $6uUbQ$Array($6uUbQ$uint16)\n  },\n  1: {\n    offsets: new $6uUbQ$Array($6uUbQ$uint32)\n  }\n});\n$2b2b260902b1c57e$var$loca.process = function () {\n  if (this.version === 0 && !this._processed) {\n    for (let i = 0; i < this.offsets.length; i++) this.offsets[i] <<= 1;\n    this._processed = true;\n  }\n};\n$2b2b260902b1c57e$var$loca.preEncode = function () {\n  if (this.version === 0 && this._processed !== false) {\n    for (let i = 0; i < this.offsets.length; i++) this.offsets[i] >>>= 1;\n    this._processed = false;\n  }\n};\nvar $2b2b260902b1c57e$export$2e2bcd8739ae039 = $2b2b260902b1c57e$var$loca;\nvar\n// Set of instructions executed whenever the point size or font transformation change\n$7afb878c7bea4f66$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  controlValueProgram: new $6uUbQ$Array($6uUbQ$uint8)\n});\nvar\n// only used for encoding\n$6c92b6371bce8bd9$export$2e2bcd8739ae039 = new $6uUbQ$Array(new $6uUbQ$Buffer());\nclass $43e9821ef3717eec$export$2e2bcd8739ae039 {\n  getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) ctx = ctx.parent;\n    return ctx ? ctx.version : -1;\n  }\n  decode(stream, parent) {\n    let version = this.getCFFVersion(parent);\n    let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n    if (count === 0) return [];\n    let offSize = stream.readUInt8();\n    let offsetType;\n    if (offSize === 1) offsetType = $6uUbQ$uint8;else if (offSize === 2) offsetType = $6uUbQ$uint16;else if (offSize === 3) offsetType = $6uUbQ$uint24;else if (offSize === 4) offsetType = $6uUbQ$uint32;else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n    let ret = [];\n    let startPos = stream.pos + (count + 1) * offSize - 1;\n    let start = offsetType.decode(stream);\n    for (let i = 0; i < count; i++) {\n      let end = offsetType.decode(stream);\n      if (this.type != null) {\n        let pos = stream.pos;\n        stream.pos = startPos + start;\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else ret.push({\n        offset: startPos + start,\n        length: end - start\n      });\n      start = end;\n    }\n    stream.pos = startPos + start;\n    return ret;\n  }\n  size(arr, parent) {\n    let size = 2;\n    if (arr.length === 0) return size;\n    let type = this.type || new $6uUbQ$Buffer();\n    // find maximum offset to detminine offset type\n    let offset = 1;\n    for (let i = 0; i < arr.length; i++) {\n      let item = arr[i];\n      offset += type.size(item, parent);\n    }\n    let offsetType;\n    if (offset <= 0xff) offsetType = $6uUbQ$uint8;else if (offset <= 0xffff) offsetType = $6uUbQ$uint16;else if (offset <= 0xffffff) offsetType = $6uUbQ$uint24;else if (offset <= 0xffffffff) offsetType = $6uUbQ$uint32;else throw new Error(\"Bad offset in CFFIndex\");\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n    return size;\n  }\n  encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) return;\n    let type = this.type || new $6uUbQ$Buffer();\n    // find maximum offset to detminine offset type\n    let sizes = [];\n    let offset = 1;\n    for (let item of arr) {\n      let s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n    let offsetType;\n    if (offset <= 0xff) offsetType = $6uUbQ$uint8;else if (offset <= 0xffff) offsetType = $6uUbQ$uint16;else if (offset <= 0xffffff) offsetType = $6uUbQ$uint24;else if (offset <= 0xffffffff) offsetType = $6uUbQ$uint32;else throw new Error(\"Bad offset in CFFIndex\");\n    // write offset size\n    stream.writeUInt8(offsetType.size());\n    // write elements\n    offset = 1;\n    offsetType.encode(stream, offset);\n    for (let size of sizes) {\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n    for (let item1 of arr) type.encode(stream, item1, parent);\n    return;\n  }\n  constructor(type) {\n    this.type = type;\n  }\n}\nconst $c2d28e92708f99da$var$FLOAT_EOF = 0xf;\nconst $c2d28e92708f99da$var$FLOAT_LOOKUP = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\", \"E\", \"E-\", null, \"-\"];\nconst $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP = {\n  \".\": 10,\n  \"E\": 11,\n  \"E-\": 12,\n  \"-\": 14\n};\nclass $c2d28e92708f99da$export$2e2bcd8739ae039 {\n  static decode(stream, value) {\n    if (32 <= value && value <= 246) return value - 139;\n    if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;\n    if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;\n    if (value === 28) return stream.readInt16BE();\n    if (value === 29) return stream.readInt32BE();\n    if (value === 30) {\n      let str = \"\";\n      while (true) {\n        let b = stream.readUInt8();\n        let n1 = b >> 4;\n        if (n1 === $c2d28e92708f99da$var$FLOAT_EOF) break;\n        str += $c2d28e92708f99da$var$FLOAT_LOOKUP[n1];\n        let n2 = b & 15;\n        if (n2 === $c2d28e92708f99da$var$FLOAT_EOF) break;\n        str += $c2d28e92708f99da$var$FLOAT_LOOKUP[n2];\n      }\n      return parseFloat(str);\n    }\n    return null;\n  }\n  static size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) value = 32768;\n    if ((value | 0) !== value) {\n      let str = \"\" + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n    } else if (-107 <= value && value <= 107) return 1;else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;else if (-32768 <= value && value <= 32767) return 3;else return 5;\n  }\n  static encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    let val = Number(value);\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    } else if ((val | 0) !== val) {\n      stream.writeUInt8(30);\n      let str = \"\" + val;\n      for (let i = 0; i < str.length; i += 2) {\n        let c1 = str[i];\n        let n1 = $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;\n        if (i === str.length - 1) var n2 = $c2d28e92708f99da$var$FLOAT_EOF;else {\n          let c2 = str[i + 1];\n          var n2 = $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n        stream.writeUInt8(n1 << 4 | n2 & 15);\n      }\n      if (n2 !== $c2d28e92708f99da$var$FLOAT_EOF) return stream.writeUInt8($c2d28e92708f99da$var$FLOAT_EOF << 4);\n    } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  }\n}\nclass $61aa549f16d58b9b$export$2e2bcd8739ae039 {\n  decodeOperands(type, stream, ret, operands) {\n    if (Array.isArray(type)) return operands.map((op, i) => this.decodeOperands(type[i], stream, ret, [op]));else if (type.decode != null) return type.decode(stream, ret, operands);else switch (type) {\n      case \"number\":\n      case \"offset\":\n      case \"sid\":\n        return operands[0];\n      case \"boolean\":\n        return !!operands[0];\n      default:\n        return operands;\n    }\n  }\n  encodeOperands(type, stream, ctx, operands) {\n    if (Array.isArray(type)) return operands.map((op, i) => this.encodeOperands(type[i], stream, ctx, op)[0]);else if (type.encode != null) return type.encode(stream, operands, ctx);else if (typeof operands === \"number\") return [operands];else if (typeof operands === \"boolean\") return [+operands];else if (Array.isArray(operands)) return operands;else return [operands];\n  }\n  decode(stream, parent) {\n    let end = stream.pos + parent.length;\n    let ret = {};\n    let operands = [];\n    // define hidden properties\n    Object.defineProperties(ret, {\n      parent: {\n        value: parent\n      },\n      _startOffset: {\n        value: stream.pos\n      }\n    });\n    // fill in defaults\n    for (let key in this.fields) {\n      let field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n    while (stream.pos < end) {\n      let b = stream.readUInt8();\n      if (b < 28) {\n        if (b === 12) b = b << 8 | stream.readUInt8();\n        let field = this.fields[b];\n        if (!field) throw new Error(`Unknown operator ${b}`);\n        let val = this.decodeOperands(field[2], stream, ret, operands);\n        if (val != null) {\n          if (val instanceof (0, $6uUbQ$PropertyDescriptor)) Object.defineProperty(ret, field[1], val);else ret[field[1]] = val;\n        }\n        operands = [];\n      } else operands.push((0, $c2d28e92708f99da$export$2e2bcd8739ae039).decode(stream, b));\n    }\n    return ret;\n  }\n  size(dict, parent, includePointers = true) {\n    let ctx = {\n      parent: parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n    let len = 0;\n    for (let k in this.fields) {\n      let field = this.fields[k];\n      let val = dict[field[1]];\n      if (val == null || (0, $6uUbQ$fastdeepequal)(val, field[3])) continue;\n      let operands = this.encodeOperands(field[2], null, ctx, val);\n      for (let op of operands) len += (0, $c2d28e92708f99da$export$2e2bcd8739ae039).size(op);\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n    if (includePointers) len += ctx.pointerSize;\n    return len;\n  }\n  encode(stream, dict, parent) {\n    let ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent: parent,\n      val: dict,\n      pointerSize: 0\n    };\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n    for (let field of this.ops) {\n      let val = dict[field[1]];\n      if (val == null || (0, $6uUbQ$fastdeepequal)(val, field[3])) continue;\n      let operands = this.encodeOperands(field[2], stream, ctx, val);\n      for (let op of operands) (0, $c2d28e92708f99da$export$2e2bcd8739ae039).encode(stream, op);\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      for (let op1 of key) stream.writeUInt8(op1);\n    }\n    let i = 0;\n    while (i < ctx.pointers.length) {\n      let ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n    return;\n  }\n  constructor(ops = []) {\n    this.ops = ops;\n    this.fields = {};\n    for (let field of ops) {\n      let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n}\nclass $0e34a43d05bde82c$export$2e2bcd8739ae039 extends $6uUbQ$Pointer {\n  decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: () => operands[0]\n    };\n    return super.decode(stream, parent, operands);\n  }\n  encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: () => 0\n      };\n      this.size(value, ctx);\n      return [new $0e34a43d05bde82c$var$Ptr(0)];\n    }\n    let ptr = null;\n    this.offsetType = {\n      encode: (stream, val) => ptr = val\n    };\n    super.encode(stream, value, ctx);\n    return [new $0e34a43d05bde82c$var$Ptr(ptr)];\n  }\n  constructor(type, options = {}) {\n    if (options.type == null) options.type = \"global\";\n    super(null, type, options);\n  }\n}\nclass $0e34a43d05bde82c$var$Ptr {\n  valueOf() {\n    return this.val;\n  }\n  constructor(val) {\n    this.val = val;\n    this.forceLarge = true;\n  }\n}\nclass $6d59db2e29cc77b3$var$CFFBlendOp {\n  static decode(stream, parent, operands) {\n    let numBlends = operands.pop();\n    // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n    while (operands.length > numBlends) operands.pop();\n  }\n}\nvar $6d59db2e29cc77b3$export$2e2bcd8739ae039 = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n// key       name                    type                                          default\n[6, \"BlueValues\", \"delta\", null], [7, \"OtherBlues\", \"delta\", null], [8, \"FamilyBlues\", \"delta\", null], [9, \"FamilyOtherBlues\", \"delta\", null], [[12, 9], \"BlueScale\", \"number\", 0.039625], [[12, 10], \"BlueShift\", \"number\", 7], [[12, 11], \"BlueFuzz\", \"number\", 1], [10, \"StdHW\", \"number\", null], [11, \"StdVW\", \"number\", null], [[12, 12], \"StemSnapH\", \"delta\", null], [[12, 13], \"StemSnapV\", \"delta\", null], [[12, 14], \"ForceBold\", \"boolean\", false], [[12, 17], \"LanguageGroup\", \"number\", 0], [[12, 18], \"ExpansionFactor\", \"number\", 0.06], [[12, 19], \"initialRandomSeed\", \"number\", 0], [20, \"defaultWidthX\", \"number\", 0], [21, \"nominalWidthX\", \"number\", 0], [22, \"vsindex\", \"number\", 0], [23, \"blend\", $6d59db2e29cc77b3$var$CFFBlendOp, null], [19, \"Subrs\", new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(), {\n  type: \"local\"\n}), null]]);\nvar\n// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\n$229224aec43783c5$export$2e2bcd8739ae039 = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\nlet $bc0433d9b7e41f5f$export$dee0027060fa13bd = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"\", \"questiondown\", \"\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"\", \"ring\", \"cedilla\", \"\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"AE\", \"\", \"ordfeminine\", \"\", \"\", \"\", \"\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"\", \"\", \"\", \"\", \"\", \"ae\", \"\", \"\", \"\", \"dotlessi\", \"\", \"\", \"lslash\", \"oslash\", \"oe\", \"germandbls\"];\nlet $bc0433d9b7e41f5f$export$4f58f497e14a53c3 = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"\", \"\", \"isuperior\", \"\", \"\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"\", \"\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"\", \"\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"\", \"Dotaccentsmall\", \"\", \"\", \"Macronsmall\", \"\", \"\", \"figuredash\", \"hypheninferior\", \"\", \"\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\nlet $ef658f5c9a1488b2$export$c33b50336c234f16 = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\"];\nlet $ef658f5c9a1488b2$export$3ed0f9e1fee8d489 = [\".notdef\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\nlet $ef658f5c9a1488b2$export$dc28be11139d4120 = [\".notdef\", \"space\", \"dollaroldstyle\", \"dollarsuperior\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"hyphensuperior\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"centoldstyle\", \"figuredash\", \"hypheninferior\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\"];\n\n//########################\n// Scripts and Languages #\n//########################\nlet $7cbbe4e24ef3cb75$var$LangSysTable = new $6uUbQ$Struct({\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n  reqFeatureIndex: $6uUbQ$uint16,\n  featureCount: $6uUbQ$uint16,\n  featureIndexes: new $6uUbQ$Array($6uUbQ$uint16, \"featureCount\")\n});\nlet $7cbbe4e24ef3cb75$var$LangSysRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  langSys: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$LangSysTable, {\n    type: \"parent\"\n  })\n});\nlet $7cbbe4e24ef3cb75$var$Script = new $6uUbQ$Struct({\n  defaultLangSys: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$LangSysTable),\n  count: $6uUbQ$uint16,\n  langSysRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LangSysRecord, \"count\")\n});\nlet $7cbbe4e24ef3cb75$var$ScriptRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  script: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$Script, {\n    type: \"parent\"\n  })\n});\nlet $7cbbe4e24ef3cb75$export$3e15fc05ce864229 = new $6uUbQ$Array($7cbbe4e24ef3cb75$var$ScriptRecord, $6uUbQ$uint16);\n//#######################\n// Features and Lookups #\n//#######################\nlet $7cbbe4e24ef3cb75$var$FeatureParams = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  nameID: $6uUbQ$uint16\n});\nlet $7cbbe4e24ef3cb75$export$6e91cf7616333d5 = new $6uUbQ$Struct({\n  featureParams: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$FeatureParams),\n  lookupCount: $6uUbQ$uint16,\n  lookupListIndexes: new $6uUbQ$Array($6uUbQ$uint16, \"lookupCount\")\n});\nlet $7cbbe4e24ef3cb75$var$FeatureRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  feature: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$6e91cf7616333d5, {\n    type: \"parent\"\n  })\n});\nlet $7cbbe4e24ef3cb75$export$aa18130def4b6cb4 = new $6uUbQ$Array($7cbbe4e24ef3cb75$var$FeatureRecord, $6uUbQ$uint16);\nlet $7cbbe4e24ef3cb75$var$LookupFlags = new $6uUbQ$Struct({\n  markAttachmentType: $6uUbQ$uint8,\n  flags: new $6uUbQ$Bitfield($6uUbQ$uint8, [\"rightToLeft\", \"ignoreBaseGlyphs\", \"ignoreLigatures\", \"ignoreMarks\", \"useMarkFilteringSet\"])\n});\nfunction $7cbbe4e24ef3cb75$export$df0008c6ff2da22a(SubTable) {\n  let Lookup = new $6uUbQ$Struct({\n    lookupType: $6uUbQ$uint16,\n    flags: $7cbbe4e24ef3cb75$var$LookupFlags,\n    subTableCount: $6uUbQ$uint16,\n    subTables: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, SubTable), \"subTableCount\"),\n    markFilteringSet: new $6uUbQ$Optional($6uUbQ$uint16, t => t.flags.flags.useMarkFilteringSet)\n  });\n  return new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, Lookup), $6uUbQ$uint16);\n}\n//#################\n// Coverage Table #\n//#################\nlet $7cbbe4e24ef3cb75$var$RangeRecord = new $6uUbQ$Struct({\n  start: $6uUbQ$uint16,\n  end: $6uUbQ$uint16,\n  startCoverageIndex: $6uUbQ$uint16\n});\nlet $7cbbe4e24ef3cb75$export$17608c3f81a6111 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    glyphCount: $6uUbQ$uint16,\n    glyphs: new $6uUbQ$Array($6uUbQ$uint16, \"glyphCount\")\n  },\n  2: {\n    rangeCount: $6uUbQ$uint16,\n    rangeRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$RangeRecord, \"rangeCount\")\n  }\n});\n//#########################\n// Class Definition Table #\n//#########################\nlet $7cbbe4e24ef3cb75$var$ClassRangeRecord = new $6uUbQ$Struct({\n  start: $6uUbQ$uint16,\n  end: $6uUbQ$uint16,\n  class: $6uUbQ$uint16\n});\nlet $7cbbe4e24ef3cb75$export$843d551fbbafef71 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    startGlyph: $6uUbQ$uint16,\n    glyphCount: $6uUbQ$uint16,\n    classValueArray: new $6uUbQ$Array($6uUbQ$uint16, \"glyphCount\")\n  },\n  2: {\n    classRangeCount: $6uUbQ$uint16,\n    classRangeRecord: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$ClassRangeRecord, \"classRangeCount\")\n  }\n});\nlet $7cbbe4e24ef3cb75$export$8215d14a63d9fb10 = new $6uUbQ$Struct({\n  a: $6uUbQ$uint16,\n  b: $6uUbQ$uint16,\n  deltaFormat: $6uUbQ$uint16\n});\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\nlet $7cbbe4e24ef3cb75$var$LookupRecord = new $6uUbQ$Struct({\n  sequenceIndex: $6uUbQ$uint16,\n  lookupListIndex: $6uUbQ$uint16\n});\nlet $7cbbe4e24ef3cb75$var$Rule = new $6uUbQ$Struct({\n  glyphCount: $6uUbQ$uint16,\n  lookupCount: $6uUbQ$uint16,\n  input: new $6uUbQ$Array($6uUbQ$uint16, t => t.glyphCount - 1),\n  lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n});\nlet $7cbbe4e24ef3cb75$var$RuleSet = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$Rule), $6uUbQ$uint16);\nlet $7cbbe4e24ef3cb75$var$ClassRule = new $6uUbQ$Struct({\n  glyphCount: $6uUbQ$uint16,\n  lookupCount: $6uUbQ$uint16,\n  classes: new $6uUbQ$Array($6uUbQ$uint16, t => t.glyphCount - 1),\n  lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n});\nlet $7cbbe4e24ef3cb75$var$ClassSet = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ClassRule), $6uUbQ$uint16);\nlet $7cbbe4e24ef3cb75$export$841858b892ce1f4c = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n    ruleSetCount: $6uUbQ$uint16,\n    ruleSets: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$RuleSet), \"ruleSetCount\")\n  },\n  2: {\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n    classDef: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n    classSetCnt: $6uUbQ$uint16,\n    classSet: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ClassSet), \"classSetCnt\")\n  },\n  3: {\n    glyphCount: $6uUbQ$uint16,\n    lookupCount: $6uUbQ$uint16,\n    coverages: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), \"glyphCount\"),\n    lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n  }\n});\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\nlet $7cbbe4e24ef3cb75$var$ChainRule = new $6uUbQ$Struct({\n  backtrackGlyphCount: $6uUbQ$uint16,\n  backtrack: new $6uUbQ$Array($6uUbQ$uint16, \"backtrackGlyphCount\"),\n  inputGlyphCount: $6uUbQ$uint16,\n  input: new $6uUbQ$Array($6uUbQ$uint16, t => t.inputGlyphCount - 1),\n  lookaheadGlyphCount: $6uUbQ$uint16,\n  lookahead: new $6uUbQ$Array($6uUbQ$uint16, \"lookaheadGlyphCount\"),\n  lookupCount: $6uUbQ$uint16,\n  lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n});\nlet $7cbbe4e24ef3cb75$var$ChainRuleSet = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ChainRule), $6uUbQ$uint16);\nlet $7cbbe4e24ef3cb75$export$5e6d09e6861162f6 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n    chainCount: $6uUbQ$uint16,\n    chainRuleSets: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ChainRuleSet), \"chainCount\")\n  },\n  2: {\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n    backtrackClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n    inputClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n    lookaheadClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n    chainCount: $6uUbQ$uint16,\n    chainClassSet: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ChainRuleSet), \"chainCount\")\n  },\n  3: {\n    backtrackGlyphCount: $6uUbQ$uint16,\n    backtrackCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), \"backtrackGlyphCount\"),\n    inputGlyphCount: $6uUbQ$uint16,\n    inputCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), \"inputGlyphCount\"),\n    lookaheadGlyphCount: $6uUbQ$uint16,\n    lookaheadCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), \"lookaheadGlyphCount\"),\n    lookupCount: $6uUbQ$uint16,\n    lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n  }\n});\n\n/*******************\n * Variation Store *\n *******************/\nlet $1a47b0c45c1c22fe$var$F2DOT14 = new $6uUbQ$Fixed(16, \"BE\", 14);\nlet $1a47b0c45c1c22fe$var$RegionAxisCoordinates = new $6uUbQ$Struct({\n  startCoord: $1a47b0c45c1c22fe$var$F2DOT14,\n  peakCoord: $1a47b0c45c1c22fe$var$F2DOT14,\n  endCoord: $1a47b0c45c1c22fe$var$F2DOT14\n});\nlet $1a47b0c45c1c22fe$var$VariationRegionList = new $6uUbQ$Struct({\n  axisCount: $6uUbQ$uint16,\n  regionCount: $6uUbQ$uint16,\n  variationRegions: new $6uUbQ$Array(new $6uUbQ$Array($1a47b0c45c1c22fe$var$RegionAxisCoordinates, \"axisCount\"), \"regionCount\")\n});\nlet $1a47b0c45c1c22fe$var$DeltaSet = new $6uUbQ$Struct({\n  shortDeltas: new $6uUbQ$Array($6uUbQ$int16, t => t.parent.shortDeltaCount),\n  regionDeltas: new $6uUbQ$Array($6uUbQ$int8, t => t.parent.regionIndexCount - t.parent.shortDeltaCount),\n  deltas: t => t.shortDeltas.concat(t.regionDeltas)\n});\nlet $1a47b0c45c1c22fe$var$ItemVariationData = new $6uUbQ$Struct({\n  itemCount: $6uUbQ$uint16,\n  shortDeltaCount: $6uUbQ$uint16,\n  regionIndexCount: $6uUbQ$uint16,\n  regionIndexes: new $6uUbQ$Array($6uUbQ$uint16, \"regionIndexCount\"),\n  deltaSets: new $6uUbQ$Array($1a47b0c45c1c22fe$var$DeltaSet, \"itemCount\")\n});\nlet $1a47b0c45c1c22fe$export$fe1b122a2710f241 = new $6uUbQ$Struct({\n  format: $6uUbQ$uint16,\n  variationRegionList: new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$VariationRegionList),\n  variationDataCount: $6uUbQ$uint16,\n  itemVariationData: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$ItemVariationData), \"variationDataCount\")\n});\n/**********************\n * Feature Variations *\n **********************/\nlet $1a47b0c45c1c22fe$var$ConditionTable = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    axisIndex: $6uUbQ$uint16,\n    axisIndex: $6uUbQ$uint16,\n    filterRangeMinValue: $1a47b0c45c1c22fe$var$F2DOT14,\n    filterRangeMaxValue: $1a47b0c45c1c22fe$var$F2DOT14\n  }\n});\nlet $1a47b0c45c1c22fe$var$ConditionSet = new $6uUbQ$Struct({\n  conditionCount: $6uUbQ$uint16,\n  conditionTable: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$ConditionTable), \"conditionCount\")\n});\nlet $1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord = new $6uUbQ$Struct({\n  featureIndex: $6uUbQ$uint16,\n  alternateFeatureTable: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $7cbbe4e24ef3cb75$export$6e91cf7616333d5), {\n    type: \"parent\"\n  })\n});\nlet $1a47b0c45c1c22fe$var$FeatureTableSubstitution = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  substitutionCount: $6uUbQ$uint16,\n  substitutions: new $6uUbQ$Array($1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord, \"substitutionCount\")\n});\nlet $1a47b0c45c1c22fe$var$FeatureVariationRecord = new $6uUbQ$Struct({\n  conditionSet: new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$ConditionSet, {\n    type: \"parent\"\n  }),\n  featureTableSubstitution: new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$FeatureTableSubstitution, {\n    type: \"parent\"\n  })\n});\nlet $1a47b0c45c1c22fe$export$441b70b7971dd419 = new $6uUbQ$Struct({\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  featureVariationRecordCount: $6uUbQ$uint32,\n  featureVariationRecords: new $6uUbQ$Array($1a47b0c45c1c22fe$var$FeatureVariationRecord, \"featureVariationRecordCount\")\n});\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\nclass $b84fd3dd9d8eddb2$var$PredefinedOp {\n  decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];\n    return this.type.decode(stream, parent, operands);\n  }\n  size(value, ctx) {\n    return this.type.size(value, ctx);\n  }\n  encode(stream, value, ctx) {\n    let index = this.predefinedOps.indexOf(value);\n    if (index !== -1) return index;\n    return this.type.encode(stream, value, ctx);\n  }\n  constructor(predefinedOps, type) {\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n}\nclass $b84fd3dd9d8eddb2$var$CFFEncodingVersion extends $6uUbQ$Number {\n  decode(stream) {\n    return $6uUbQ$uint8.decode(stream) & 0x7f;\n  }\n  constructor() {\n    super(\"UInt8\");\n  }\n}\nlet $b84fd3dd9d8eddb2$var$Range1 = new $6uUbQ$Struct({\n  first: $6uUbQ$uint16,\n  nLeft: $6uUbQ$uint8\n});\nlet $b84fd3dd9d8eddb2$var$Range2 = new $6uUbQ$Struct({\n  first: $6uUbQ$uint16,\n  nLeft: $6uUbQ$uint16\n});\nlet $b84fd3dd9d8eddb2$var$CFFCustomEncoding = new $6uUbQ$VersionedStruct(new $b84fd3dd9d8eddb2$var$CFFEncodingVersion(), {\n  0: {\n    nCodes: $6uUbQ$uint8,\n    codes: new $6uUbQ$Array($6uUbQ$uint8, \"nCodes\")\n  },\n  1: {\n    nRanges: $6uUbQ$uint8,\n    ranges: new $6uUbQ$Array($b84fd3dd9d8eddb2$var$Range1, \"nRanges\")\n  }\n});\nlet $b84fd3dd9d8eddb2$var$CFFEncoding = new $b84fd3dd9d8eddb2$var$PredefinedOp([(0, $bc0433d9b7e41f5f$export$dee0027060fa13bd), (0, $bc0433d9b7e41f5f$export$4f58f497e14a53c3)], new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFCustomEncoding, {\n  lazy: true\n}));\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\nclass $b84fd3dd9d8eddb2$var$RangeArray extends $6uUbQ$Array {\n  decode(stream, parent) {\n    let length = (0, $6uUbQ$resolveLength)(this.length, stream, parent);\n    let count = 0;\n    let res = [];\n    while (count < length) {\n      let range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n    return res;\n  }\n}\nlet $b84fd3dd9d8eddb2$var$CFFCustomCharset = new $6uUbQ$VersionedStruct($6uUbQ$uint8, {\n  0: {\n    glyphs: new $6uUbQ$Array($6uUbQ$uint16, t => t.parent.CharStrings.length - 1)\n  },\n  1: {\n    ranges: new $b84fd3dd9d8eddb2$var$RangeArray($b84fd3dd9d8eddb2$var$Range1, t => t.parent.CharStrings.length - 1)\n  },\n  2: {\n    ranges: new $b84fd3dd9d8eddb2$var$RangeArray($b84fd3dd9d8eddb2$var$Range2, t => t.parent.CharStrings.length - 1)\n  }\n});\nlet $b84fd3dd9d8eddb2$var$CFFCharset = new $b84fd3dd9d8eddb2$var$PredefinedOp([(0, $ef658f5c9a1488b2$export$c33b50336c234f16), (0, $ef658f5c9a1488b2$export$3ed0f9e1fee8d489), (0, $ef658f5c9a1488b2$export$dc28be11139d4120)], new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFCustomCharset, {\n  lazy: true\n}));\nlet $b84fd3dd9d8eddb2$var$FDRange3 = new $6uUbQ$Struct({\n  first: $6uUbQ$uint16,\n  fd: $6uUbQ$uint8\n});\nlet $b84fd3dd9d8eddb2$var$FDRange4 = new $6uUbQ$Struct({\n  first: $6uUbQ$uint32,\n  fd: $6uUbQ$uint16\n});\nlet $b84fd3dd9d8eddb2$var$FDSelect = new $6uUbQ$VersionedStruct($6uUbQ$uint8, {\n  0: {\n    fds: new $6uUbQ$Array($6uUbQ$uint8, t => t.parent.CharStrings.length)\n  },\n  3: {\n    nRanges: $6uUbQ$uint16,\n    ranges: new $6uUbQ$Array($b84fd3dd9d8eddb2$var$FDRange3, \"nRanges\"),\n    sentinel: $6uUbQ$uint16\n  },\n  4: {\n    nRanges: $6uUbQ$uint32,\n    ranges: new $6uUbQ$Array($b84fd3dd9d8eddb2$var$FDRange4, \"nRanges\"),\n    sentinel: $6uUbQ$uint32\n  }\n});\nlet $b84fd3dd9d8eddb2$var$ptr = new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)((0, $6d59db2e29cc77b3$export$2e2bcd8739ae039));\nclass $b84fd3dd9d8eddb2$var$CFFPrivateOp {\n  decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return $b84fd3dd9d8eddb2$var$ptr.decode(stream, parent, [operands[1]]);\n  }\n  size(dict, ctx) {\n    return [(0, $6d59db2e29cc77b3$export$2e2bcd8739ae039).size(dict, ctx, false), $b84fd3dd9d8eddb2$var$ptr.size(dict, ctx)[0]];\n  }\n  encode(stream, dict, ctx) {\n    return [(0, $6d59db2e29cc77b3$export$2e2bcd8739ae039).size(dict, ctx, false), $b84fd3dd9d8eddb2$var$ptr.encode(stream, dict, ctx)[0]];\n  }\n}\nlet $b84fd3dd9d8eddb2$var$FontDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n// key       name                   type(s)                                 default\n[18, \"Private\", new $b84fd3dd9d8eddb2$var$CFFPrivateOp(), null], [[12, 38], \"FontName\", \"sid\", null], [[12, 7], \"FontMatrix\", \"array\", [0.001, 0, 0, 0.001, 0, 0]], [[12, 5], \"PaintType\", \"number\", 0]]);\nlet $b84fd3dd9d8eddb2$var$CFFTopDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n// key       name                   type(s)                                 default\n[[12, 30], \"ROS\", [\"sid\", \"sid\", \"number\"], null], [0, \"version\", \"sid\", null], [1, \"Notice\", \"sid\", null], [[12, 0], \"Copyright\", \"sid\", null], [2, \"FullName\", \"sid\", null], [3, \"FamilyName\", \"sid\", null], [4, \"Weight\", \"sid\", null], [[12, 1], \"isFixedPitch\", \"boolean\", false], [[12, 2], \"ItalicAngle\", \"number\", 0], [[12, 3], \"UnderlinePosition\", \"number\", -100], [[12, 4], \"UnderlineThickness\", \"number\", 50], [[12, 5], \"PaintType\", \"number\", 0], [[12, 6], \"CharstringType\", \"number\", 2], [[12, 7], \"FontMatrix\", \"array\", [0.001, 0, 0, 0.001, 0, 0]], [13, \"UniqueID\", \"number\", null], [5, \"FontBBox\", \"array\", [0, 0, 0, 0]], [[12, 8], \"StrokeWidth\", \"number\", 0], [14, \"XUID\", \"array\", null], [15, \"charset\", $b84fd3dd9d8eddb2$var$CFFCharset, (0, $ef658f5c9a1488b2$export$c33b50336c234f16)], [16, \"Encoding\", $b84fd3dd9d8eddb2$var$CFFEncoding, (0, $bc0433d9b7e41f5f$export$dee0027060fa13bd)], [17, \"CharStrings\", new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)()), null], [18, \"Private\", new $b84fd3dd9d8eddb2$var$CFFPrivateOp(), null], [[12, 20], \"SyntheticBase\", \"number\", null], [[12, 21], \"PostScript\", \"sid\", null], [[12, 22], \"BaseFontName\", \"sid\", null], [[12, 23], \"BaseFontBlend\", \"delta\", null],\n// CID font specific\n[[12, 31], \"CIDFontVersion\", \"number\", 0], [[12, 32], \"CIDFontRevision\", \"number\", 0], [[12, 33], \"CIDFontType\", \"number\", 0], [[12, 34], \"CIDCount\", \"number\", 8720], [[12, 35], \"UIDBase\", \"number\", null], [[12, 37], \"FDSelect\", new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FDSelect), null], [[12, 36], \"FDArray\", new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FontDict)), null], [[12, 38], \"FontName\", \"sid\", null]]);\nlet $b84fd3dd9d8eddb2$var$VariationStore = new $6uUbQ$Struct({\n  length: $6uUbQ$uint16,\n  itemVariationStore: (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241)\n});\nlet $b84fd3dd9d8eddb2$var$CFF2TopDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([[[12, 7], \"FontMatrix\", \"array\", [0.001, 0, 0, 0.001, 0, 0]], [17, \"CharStrings\", new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)()), null], [[12, 37], \"FDSelect\", new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FDSelect), null], [[12, 36], \"FDArray\", new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FontDict)), null], [24, \"vstore\", new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$VariationStore), null], [25, \"maxstack\", \"number\", 193]]);\nlet $b84fd3dd9d8eddb2$var$CFFTop = new $6uUbQ$VersionedStruct($6uUbQ$fixed16, {\n  1: {\n    hdrSize: $6uUbQ$uint8,\n    offSize: $6uUbQ$uint8,\n    nameIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(new $6uUbQ$String(\"length\")),\n    topDictIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFTopDict),\n    stringIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(new $6uUbQ$String(\"length\")),\n    globalSubrIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)()\n  },\n  2: {\n    hdrSize: $6uUbQ$uint8,\n    length: $6uUbQ$uint16,\n    topDict: $b84fd3dd9d8eddb2$var$CFF2TopDict,\n    globalSubrIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)()\n  }\n});\nvar $b84fd3dd9d8eddb2$export$2e2bcd8739ae039 = $b84fd3dd9d8eddb2$var$CFFTop;\nclass $822ac0d589e4e237$var$CFFFont {\n  static decode(stream) {\n    return new $822ac0d589e4e237$var$CFFFont(stream);\n  }\n  decode() {\n    let start = this.stream.pos;\n    let top = (0, $b84fd3dd9d8eddb2$export$2e2bcd8739ae039).decode(this.stream);\n    for (let key in top) {\n      let val = top[key];\n      this[key] = val;\n    }\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) throw new Error(\"Only a single font is allowed in CFF\");\n      this.topDict = this.topDictIndex[0];\n    }\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  }\n  string(sid) {\n    if (this.version >= 2) return null;\n    if (sid < (0, $229224aec43783c5$export$2e2bcd8739ae039).length) return (0, $229224aec43783c5$export$2e2bcd8739ae039)[sid];\n    return this.stringIndex[sid - (0, $229224aec43783c5$export$2e2bcd8739ae039).length];\n  }\n  get postscriptName() {\n    if (this.version < 2) return this.nameIndex[0];\n    return null;\n  }\n  get fullName() {\n    return this.string(this.topDict.FullName);\n  }\n  get familyName() {\n    return this.string(this.topDict.FamilyName);\n  }\n  getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  }\n  getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) return null;\n    // CID-keyed fonts don't have glyph names\n    if (this.isCIDFont) return null;\n    let {\n      charset: charset\n    } = this.topDict;\n    if (Array.isArray(charset)) return charset[gid];\n    if (gid === 0) return \".notdef\";\n    gid -= 1;\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n      case 1:\n      case 2:\n        for (let i = 0; i < charset.ranges.length; i++) {\n          let range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));\n        }\n        break;\n    }\n    return null;\n  }\n  fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) return null;\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n      case 3:\n      case 4:\n        let {\n          ranges: ranges\n        } = this.topDict.FDSelect;\n        let low = 0;\n        let high = ranges.length - 1;\n        while (low <= high) {\n          let mid = low + high >> 1;\n          if (gid < ranges[mid].first) high = mid - 1;else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;else return ranges[mid].fd;\n        }\n      default:\n        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n    }\n  }\n  privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      let fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;\n      return null;\n    }\n    if (this.version < 2) return this.topDict.Private;\n    return this.topDict.FDArray[0].Private;\n  }\n  constructor(stream) {\n    this.stream = stream;\n    this.decode();\n  }\n}\nvar $822ac0d589e4e237$export$2e2bcd8739ae039 = $822ac0d589e4e237$var$CFFFont;\nlet $2bbf2bc1ce37cd8f$var$VerticalOrigin = new $6uUbQ$Struct({\n  glyphIndex: $6uUbQ$uint16,\n  vertOriginY: $6uUbQ$int16\n});\nvar $2bbf2bc1ce37cd8f$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  defaultVertOriginY: $6uUbQ$int16,\n  numVertOriginYMetrics: $6uUbQ$uint16,\n  metrics: new $6uUbQ$Array($2bbf2bc1ce37cd8f$var$VerticalOrigin, \"numVertOriginYMetrics\")\n});\nlet $0941618dc22a946d$export$16b227cb15d716a0 = new $6uUbQ$Struct({\n  height: $6uUbQ$uint8,\n  width: $6uUbQ$uint8,\n  horiBearingX: $6uUbQ$int8,\n  horiBearingY: $6uUbQ$int8,\n  horiAdvance: $6uUbQ$uint8,\n  vertBearingX: $6uUbQ$int8,\n  vertBearingY: $6uUbQ$int8,\n  vertAdvance: $6uUbQ$uint8\n});\nlet $0941618dc22a946d$export$62c53e75f69bfe12 = new $6uUbQ$Struct({\n  height: $6uUbQ$uint8,\n  width: $6uUbQ$uint8,\n  bearingX: $6uUbQ$int8,\n  bearingY: $6uUbQ$int8,\n  advance: $6uUbQ$uint8\n});\nlet $0941618dc22a946d$var$EBDTComponent = new $6uUbQ$Struct({\n  glyph: $6uUbQ$uint16,\n  xOffset: $6uUbQ$int8,\n  yOffset: $6uUbQ$int8\n});\nclass $0941618dc22a946d$var$ByteAligned {}\nclass $0941618dc22a946d$var$BitAligned {}\nlet $0941618dc22a946d$export$f1f5ddeb20d14f = new $6uUbQ$VersionedStruct(\"version\", {\n  1: {\n    metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n    data: $0941618dc22a946d$var$ByteAligned\n  },\n  2: {\n    metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n    data: $0941618dc22a946d$var$BitAligned\n  },\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n  5: {\n    data: $0941618dc22a946d$var$BitAligned\n  },\n  6: {\n    metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n    data: $0941618dc22a946d$var$ByteAligned\n  },\n  7: {\n    metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n    data: $0941618dc22a946d$var$BitAligned\n  },\n  8: {\n    metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n    pad: new $6uUbQ$Reserved($6uUbQ$uint8),\n    numComponents: $6uUbQ$uint16,\n    components: new $6uUbQ$Array($0941618dc22a946d$var$EBDTComponent, \"numComponents\")\n  },\n  9: {\n    metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n    pad: new $6uUbQ$Reserved($6uUbQ$uint8),\n    numComponents: $6uUbQ$uint16,\n    components: new $6uUbQ$Array($0941618dc22a946d$var$EBDTComponent, \"numComponents\")\n  },\n  17: {\n    metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n    dataLen: $6uUbQ$uint32,\n    data: new $6uUbQ$Buffer(\"dataLen\")\n  },\n  18: {\n    metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n    dataLen: $6uUbQ$uint32,\n    data: new $6uUbQ$Buffer(\"dataLen\")\n  },\n  19: {\n    dataLen: $6uUbQ$uint32,\n    data: new $6uUbQ$Buffer(\"dataLen\")\n  }\n});\nlet $9911c4c7201c13de$var$SBitLineMetrics = new $6uUbQ$Struct({\n  ascender: $6uUbQ$int8,\n  descender: $6uUbQ$int8,\n  widthMax: $6uUbQ$uint8,\n  caretSlopeNumerator: $6uUbQ$int8,\n  caretSlopeDenominator: $6uUbQ$int8,\n  caretOffset: $6uUbQ$int8,\n  minOriginSB: $6uUbQ$int8,\n  minAdvanceSB: $6uUbQ$int8,\n  maxBeforeBL: $6uUbQ$int8,\n  minAfterBL: $6uUbQ$int8,\n  pad: new $6uUbQ$Reserved($6uUbQ$int8, 2)\n});\nlet $9911c4c7201c13de$var$CodeOffsetPair = new $6uUbQ$Struct({\n  glyphCode: $6uUbQ$uint16,\n  offset: $6uUbQ$uint16\n});\nlet $9911c4c7201c13de$var$IndexSubtable = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  header: {\n    imageFormat: $6uUbQ$uint16,\n    imageDataOffset: $6uUbQ$uint32\n  },\n  1: {\n    offsetArray: new $6uUbQ$Array($6uUbQ$uint32, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n  2: {\n    imageSize: $6uUbQ$uint32,\n    bigMetrics: (0, $0941618dc22a946d$export$16b227cb15d716a0)\n  },\n  3: {\n    offsetArray: new $6uUbQ$Array($6uUbQ$uint16, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n  4: {\n    numGlyphs: $6uUbQ$uint32,\n    glyphArray: new $6uUbQ$Array($9911c4c7201c13de$var$CodeOffsetPair, t => t.numGlyphs + 1)\n  },\n  5: {\n    imageSize: $6uUbQ$uint32,\n    bigMetrics: (0, $0941618dc22a946d$export$16b227cb15d716a0),\n    numGlyphs: $6uUbQ$uint32,\n    glyphCodeArray: new $6uUbQ$Array($6uUbQ$uint16, \"numGlyphs\")\n  }\n});\nlet $9911c4c7201c13de$var$IndexSubtableArray = new $6uUbQ$Struct({\n  firstGlyphIndex: $6uUbQ$uint16,\n  lastGlyphIndex: $6uUbQ$uint16,\n  subtable: new $6uUbQ$Pointer($6uUbQ$uint32, $9911c4c7201c13de$var$IndexSubtable)\n});\nlet $9911c4c7201c13de$var$BitmapSizeTable = new $6uUbQ$Struct({\n  indexSubTableArray: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($9911c4c7201c13de$var$IndexSubtableArray, 1), {\n    type: \"parent\"\n  }),\n  indexTablesSize: $6uUbQ$uint32,\n  numberOfIndexSubTables: $6uUbQ$uint32,\n  colorRef: $6uUbQ$uint32,\n  hori: $9911c4c7201c13de$var$SBitLineMetrics,\n  vert: $9911c4c7201c13de$var$SBitLineMetrics,\n  startGlyphIndex: $6uUbQ$uint16,\n  endGlyphIndex: $6uUbQ$uint16,\n  ppemX: $6uUbQ$uint8,\n  ppemY: $6uUbQ$uint8,\n  bitDepth: $6uUbQ$uint8,\n  flags: new $6uUbQ$Bitfield($6uUbQ$uint8, [\"horizontal\", \"vertical\"])\n});\nvar $9911c4c7201c13de$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint32,\n  numSizes: $6uUbQ$uint32,\n  sizes: new $6uUbQ$Array($9911c4c7201c13de$var$BitmapSizeTable, \"numSizes\")\n});\nlet $abb847051efd51b1$var$ImageTable = new $6uUbQ$Struct({\n  ppem: $6uUbQ$uint16,\n  resolution: $6uUbQ$uint16,\n  imageOffsets: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, \"void\"), t => t.parent.parent.maxp.numGlyphs + 1)\n});\nvar\n// This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\n$abb847051efd51b1$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  flags: new $6uUbQ$Bitfield($6uUbQ$uint16, [\"renderOutlines\"]),\n  numImgTables: $6uUbQ$uint32,\n  imageTables: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, $abb847051efd51b1$var$ImageTable), \"numImgTables\")\n});\nlet $eb629188f3dfefdd$var$LayerRecord = new $6uUbQ$Struct({\n  gid: $6uUbQ$uint16,\n  paletteIndex: $6uUbQ$uint16 // Index value to use in the appropriate palette. This value must\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\nlet $eb629188f3dfefdd$var$BaseGlyphRecord = new $6uUbQ$Struct({\n  gid: $6uUbQ$uint16,\n  // and is not rendered for color.\n  firstLayerIndex: $6uUbQ$uint16,\n  // There will be numLayers consecutive entries for this base glyph.\n  numLayers: $6uUbQ$uint16\n});\nvar $eb629188f3dfefdd$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numBaseGlyphRecords: $6uUbQ$uint16,\n  baseGlyphRecord: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($eb629188f3dfefdd$var$BaseGlyphRecord, \"numBaseGlyphRecords\")),\n  layerRecords: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($eb629188f3dfefdd$var$LayerRecord, \"numLayerRecords\"), {\n    lazy: true\n  }),\n  numLayerRecords: $6uUbQ$uint16\n});\nlet $08734b8e7dc64587$var$ColorRecord = new $6uUbQ$Struct({\n  blue: $6uUbQ$uint8,\n  green: $6uUbQ$uint8,\n  red: $6uUbQ$uint8,\n  alpha: $6uUbQ$uint8\n});\nvar $08734b8e7dc64587$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  header: {\n    numPaletteEntries: $6uUbQ$uint16,\n    numPalettes: $6uUbQ$uint16,\n    numColorRecords: $6uUbQ$uint16,\n    colorRecords: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($08734b8e7dc64587$var$ColorRecord, \"numColorRecords\")),\n    colorRecordIndices: new $6uUbQ$Array($6uUbQ$uint16, \"numPalettes\")\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($6uUbQ$uint32, \"numPalettes\")),\n    offsetPaletteLabelArray: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($6uUbQ$uint16, \"numPalettes\")),\n    offsetPaletteEntryLabelArray: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($6uUbQ$uint16, \"numPaletteEntries\"))\n  }\n});\nlet $497cef411d884e34$var$BaseCoord = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    coordinate: $6uUbQ$int16 // X or Y value, in design units\n  },\n  2: {\n    coordinate: $6uUbQ$int16,\n    referenceGlyph: $6uUbQ$uint16,\n    baseCoordPoint: $6uUbQ$uint16 // Index of contour point on the referenceGlyph\n  },\n  3: {\n    coordinate: $6uUbQ$int16,\n    deviceTable: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10)) // Device table for X or Y value\n  }\n});\nlet $497cef411d884e34$var$BaseValues = new $6uUbQ$Struct({\n  defaultIndex: $6uUbQ$uint16,\n  baseCoordCount: $6uUbQ$uint16,\n  baseCoords: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord), \"baseCoordCount\")\n});\nlet $497cef411d884e34$var$FeatMinMaxRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  minCoord: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord, {\n    type: \"parent\"\n  }),\n  maxCoord: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord, {\n    type: \"parent\"\n  }) // May be NULL\n});\nlet $497cef411d884e34$var$MinMax = new $6uUbQ$Struct({\n  minCoord: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord),\n  maxCoord: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord),\n  featMinMaxCount: $6uUbQ$uint16,\n  featMinMaxRecords: new $6uUbQ$Array($497cef411d884e34$var$FeatMinMaxRecord, \"featMinMaxCount\") // In alphabetical order\n});\nlet $497cef411d884e34$var$BaseLangSysRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  minMax: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$MinMax, {\n    type: \"parent\"\n  })\n});\nlet $497cef411d884e34$var$BaseScript = new $6uUbQ$Struct({\n  baseValues: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseValues),\n  defaultMinMax: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$MinMax),\n  baseLangSysCount: $6uUbQ$uint16,\n  baseLangSysRecords: new $6uUbQ$Array($497cef411d884e34$var$BaseLangSysRecord, \"baseLangSysCount\") // in alphabetical order by BaseLangSysTag\n});\nlet $497cef411d884e34$var$BaseScriptRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  script: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseScript, {\n    type: \"parent\"\n  })\n});\nlet $497cef411d884e34$var$BaseScriptList = new $6uUbQ$Array($497cef411d884e34$var$BaseScriptRecord, $6uUbQ$uint16);\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nlet $497cef411d884e34$var$BaseTagList = new $6uUbQ$Array(new $6uUbQ$String(4), $6uUbQ$uint16);\nlet $497cef411d884e34$var$Axis = new $6uUbQ$Struct({\n  baseTagList: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseTagList),\n  baseScriptList: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseScriptList)\n});\nvar $497cef411d884e34$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  header: {\n    horizAxis: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$Axis),\n    vertAxis: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$Axis) // May be NULL\n  },\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241))\n  }\n});\nlet $cf5f33c63ef209e6$var$AttachPoint = new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16);\nlet $cf5f33c63ef209e6$var$AttachList = new $6uUbQ$Struct({\n  coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n  glyphCount: $6uUbQ$uint16,\n  attachPoints: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$AttachPoint), \"glyphCount\")\n});\nlet $cf5f33c63ef209e6$var$CaretValue = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    coordinate: $6uUbQ$int16\n  },\n  2: {\n    caretValuePoint: $6uUbQ$uint16\n  },\n  3: {\n    coordinate: $6uUbQ$int16,\n    deviceTable: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10))\n  }\n});\nlet $cf5f33c63ef209e6$var$LigGlyph = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$CaretValue), $6uUbQ$uint16);\nlet $cf5f33c63ef209e6$var$LigCaretList = new $6uUbQ$Struct({\n  coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n  ligGlyphCount: $6uUbQ$uint16,\n  ligGlyphs: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$LigGlyph), \"ligGlyphCount\")\n});\nlet $cf5f33c63ef209e6$var$MarkGlyphSetsDef = new $6uUbQ$Struct({\n  markSetTableFormat: $6uUbQ$uint16,\n  markSetCount: $6uUbQ$uint16,\n  coverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), \"markSetCount\")\n});\nvar $cf5f33c63ef209e6$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  header: {\n    glyphClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n    attachList: new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$AttachList),\n    ligCaretList: new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$LigCaretList),\n    markAttachClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71))\n  },\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef: new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef: new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$MarkGlyphSetsDef),\n    itemVariationStore: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241))\n  }\n});\nlet $47e0e8ef515d9903$var$ValueFormat = new $6uUbQ$Bitfield($6uUbQ$uint16, [\"xPlacement\", \"yPlacement\", \"xAdvance\", \"yAdvance\", \"xPlaDevice\", \"yPlaDevice\", \"xAdvDevice\", \"yAdvDevice\"]);\nlet $47e0e8ef515d9903$var$types = {\n  xPlacement: $6uUbQ$int16,\n  yPlacement: $6uUbQ$int16,\n  xAdvance: $6uUbQ$int16,\n  yAdvance: $6uUbQ$int16,\n  xPlaDevice: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n    type: \"global\",\n    relativeTo: ctx => ctx.rel\n  }),\n  yPlaDevice: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n    type: \"global\",\n    relativeTo: ctx => ctx.rel\n  }),\n  xAdvDevice: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n    type: \"global\",\n    relativeTo: ctx => ctx.rel\n  }),\n  yAdvDevice: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n    type: \"global\",\n    relativeTo: ctx => ctx.rel\n  })\n};\nclass $47e0e8ef515d9903$var$ValueRecord {\n  buildStruct(parent) {\n    let struct = parent;\n    while (!struct[this.key] && struct.parent) struct = struct.parent;\n    if (!struct[this.key]) return;\n    let fields = {};\n    fields.rel = () => struct._startOffset;\n    let format = struct[this.key];\n    for (let key in format) if (format[key]) fields[key] = $47e0e8ef515d9903$var$types[key];\n    return new $6uUbQ$Struct(fields);\n  }\n  size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  }\n  decode(stream, parent) {\n    let res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  }\n  constructor(key = \"valueFormat\") {\n    this.key = key;\n  }\n}\nlet $47e0e8ef515d9903$var$PairValueRecord = new $6uUbQ$Struct({\n  secondGlyph: $6uUbQ$uint16,\n  value1: new $47e0e8ef515d9903$var$ValueRecord(\"valueFormat1\"),\n  value2: new $47e0e8ef515d9903$var$ValueRecord(\"valueFormat2\")\n});\nlet $47e0e8ef515d9903$var$PairSet = new $6uUbQ$Array($47e0e8ef515d9903$var$PairValueRecord, $6uUbQ$uint16);\nlet $47e0e8ef515d9903$var$Class2Record = new $6uUbQ$Struct({\n  value1: new $47e0e8ef515d9903$var$ValueRecord(\"valueFormat1\"),\n  value2: new $47e0e8ef515d9903$var$ValueRecord(\"valueFormat2\")\n});\nlet $47e0e8ef515d9903$var$Anchor = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    xCoordinate: $6uUbQ$int16,\n    yCoordinate: $6uUbQ$int16\n  },\n  2: {\n    xCoordinate: $6uUbQ$int16,\n    yCoordinate: $6uUbQ$int16,\n    anchorPoint: $6uUbQ$uint16\n  },\n  3: {\n    xCoordinate: $6uUbQ$int16,\n    yCoordinate: $6uUbQ$int16,\n    xDeviceTable: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10)),\n    yDeviceTable: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10))\n  }\n});\nlet $47e0e8ef515d9903$var$EntryExitRecord = new $6uUbQ$Struct({\n  entryAnchor: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor, {\n    type: \"parent\"\n  }),\n  exitAnchor: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor, {\n    type: \"parent\"\n  })\n});\nlet $47e0e8ef515d9903$var$MarkRecord = new $6uUbQ$Struct({\n  class: $6uUbQ$uint16,\n  markAnchor: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor, {\n    type: \"parent\"\n  })\n});\nlet $47e0e8ef515d9903$var$MarkArray = new $6uUbQ$Array($47e0e8ef515d9903$var$MarkRecord, $6uUbQ$uint16);\nlet $47e0e8ef515d9903$var$BaseRecord = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor), t => t.parent.classCount);\nlet $47e0e8ef515d9903$var$BaseArray = new $6uUbQ$Array($47e0e8ef515d9903$var$BaseRecord, $6uUbQ$uint16);\nlet $47e0e8ef515d9903$var$ComponentRecord = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor), t => t.parent.parent.classCount);\nlet $47e0e8ef515d9903$var$LigatureAttach = new $6uUbQ$Array($47e0e8ef515d9903$var$ComponentRecord, $6uUbQ$uint16);\nlet $47e0e8ef515d9903$var$LigatureArray = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$LigatureAttach), $6uUbQ$uint16);\nlet $47e0e8ef515d9903$export$73a8cfb19cd43a0f = new $6uUbQ$VersionedStruct(\"lookupType\", {\n  1: new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n    1: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      valueFormat: $47e0e8ef515d9903$var$ValueFormat,\n      value: new $47e0e8ef515d9903$var$ValueRecord()\n    },\n    2: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      valueFormat: $47e0e8ef515d9903$var$ValueFormat,\n      valueCount: $6uUbQ$uint16,\n      values: new $6uUbQ$LazyArray(new $47e0e8ef515d9903$var$ValueRecord(), \"valueCount\")\n    }\n  }),\n  2: new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n    1: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      valueFormat1: $47e0e8ef515d9903$var$ValueFormat,\n      valueFormat2: $47e0e8ef515d9903$var$ValueFormat,\n      pairSetCount: $6uUbQ$uint16,\n      pairSets: new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$PairSet), \"pairSetCount\")\n    },\n    2: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      valueFormat1: $47e0e8ef515d9903$var$ValueFormat,\n      valueFormat2: $47e0e8ef515d9903$var$ValueFormat,\n      classDef1: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n      classDef2: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n      class1Count: $6uUbQ$uint16,\n      class2Count: $6uUbQ$uint16,\n      classRecords: new $6uUbQ$LazyArray(new $6uUbQ$LazyArray($47e0e8ef515d9903$var$Class2Record, \"class2Count\"), \"class1Count\")\n    }\n  }),\n  3: {\n    format: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    entryExitCount: $6uUbQ$uint16,\n    entryExitRecords: new $6uUbQ$Array($47e0e8ef515d9903$var$EntryExitRecord, \"entryExitCount\")\n  },\n  4: {\n    format: $6uUbQ$uint16,\n    markCoverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    baseCoverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    classCount: $6uUbQ$uint16,\n    markArray: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$MarkArray),\n    baseArray: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$BaseArray)\n  },\n  5: {\n    format: $6uUbQ$uint16,\n    markCoverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    ligatureCoverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    classCount: $6uUbQ$uint16,\n    markArray: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$MarkArray),\n    ligatureArray: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$LigatureArray)\n  },\n  6: {\n    format: $6uUbQ$uint16,\n    mark1Coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    mark2Coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    classCount: $6uUbQ$uint16,\n    mark1Array: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$MarkArray),\n    mark2Array: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$BaseArray)\n  },\n  7: (0, $7cbbe4e24ef3cb75$export$841858b892ce1f4c),\n  8: (0, $7cbbe4e24ef3cb75$export$5e6d09e6861162f6),\n  9: {\n    posFormat: $6uUbQ$uint16,\n    lookupType: $6uUbQ$uint16,\n    extension: new $6uUbQ$Pointer($6uUbQ$uint32, null)\n  }\n});\n// Fix circular reference\n$47e0e8ef515d9903$export$73a8cfb19cd43a0f.versions[9].extension.type = $47e0e8ef515d9903$export$73a8cfb19cd43a0f;\nvar $47e0e8ef515d9903$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  header: {\n    scriptList: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$3e15fc05ce864229)),\n    featureList: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$aa18130def4b6cb4)),\n    lookupList: new $6uUbQ$Pointer($6uUbQ$uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)($47e0e8ef515d9903$export$73a8cfb19cd43a0f))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$441b70b7971dd419))\n  }\n});\nlet $d3f442064af66e06$var$Sequence = new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16);\nlet $d3f442064af66e06$var$AlternateSet = $d3f442064af66e06$var$Sequence;\nlet $d3f442064af66e06$var$Ligature = new $6uUbQ$Struct({\n  glyph: $6uUbQ$uint16,\n  compCount: $6uUbQ$uint16,\n  components: new $6uUbQ$Array($6uUbQ$uint16, t => t.compCount - 1)\n});\nlet $d3f442064af66e06$var$LigatureSet = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $d3f442064af66e06$var$Ligature), $6uUbQ$uint16);\nlet $d3f442064af66e06$var$GSUBLookup = new $6uUbQ$VersionedStruct(\"lookupType\", {\n  1: new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n    1: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      deltaGlyphID: $6uUbQ$int16\n    },\n    2: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      glyphCount: $6uUbQ$uint16,\n      substitute: new $6uUbQ$LazyArray($6uUbQ$uint16, \"glyphCount\")\n    }\n  }),\n  2: {\n    substFormat: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    count: $6uUbQ$uint16,\n    sequences: new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, $d3f442064af66e06$var$Sequence), \"count\")\n  },\n  3: {\n    substFormat: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    count: $6uUbQ$uint16,\n    alternateSet: new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, $d3f442064af66e06$var$AlternateSet), \"count\")\n  },\n  4: {\n    substFormat: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    count: $6uUbQ$uint16,\n    ligatureSets: new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, $d3f442064af66e06$var$LigatureSet), \"count\")\n  },\n  5: (0, $7cbbe4e24ef3cb75$export$841858b892ce1f4c),\n  6: (0, $7cbbe4e24ef3cb75$export$5e6d09e6861162f6),\n  7: {\n    substFormat: $6uUbQ$uint16,\n    lookupType: $6uUbQ$uint16,\n    extension: new $6uUbQ$Pointer($6uUbQ$uint32, null)\n  },\n  8: {\n    substFormat: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    backtrackCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), \"backtrackGlyphCount\"),\n    lookaheadGlyphCount: $6uUbQ$uint16,\n    lookaheadCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), \"lookaheadGlyphCount\"),\n    glyphCount: $6uUbQ$uint16,\n    substitutes: new $6uUbQ$Array($6uUbQ$uint16, \"glyphCount\")\n  }\n});\n// Fix circular reference\n$d3f442064af66e06$var$GSUBLookup.versions[7].extension.type = $d3f442064af66e06$var$GSUBLookup;\nvar $d3f442064af66e06$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  header: {\n    scriptList: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$3e15fc05ce864229)),\n    featureList: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$aa18130def4b6cb4)),\n    lookupList: new $6uUbQ$Pointer($6uUbQ$uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)($d3f442064af66e06$var$GSUBLookup))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$441b70b7971dd419))\n  }\n});\nlet $71cfb3c4767fbd0c$var$JstfGSUBModList = new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16);\nlet $71cfb3c4767fbd0c$var$JstfPriority = new $6uUbQ$Struct({\n  shrinkageEnableGSUB: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  shrinkageDisableGSUB: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  shrinkageEnableGPOS: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  shrinkageDisableGPOS: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  shrinkageJstfMax: new $6uUbQ$Pointer($6uUbQ$uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)((0, $47e0e8ef515d9903$export$73a8cfb19cd43a0f))),\n  extensionEnableGSUB: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  extensionDisableGSUB: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  extensionEnableGPOS: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  extensionDisableGPOS: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  extensionJstfMax: new $6uUbQ$Pointer($6uUbQ$uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)((0, $47e0e8ef515d9903$export$73a8cfb19cd43a0f)))\n});\nlet $71cfb3c4767fbd0c$var$JstfLangSys = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfPriority), $6uUbQ$uint16);\nlet $71cfb3c4767fbd0c$var$JstfLangSysRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  jstfLangSys: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfLangSys)\n});\nlet $71cfb3c4767fbd0c$var$JstfScript = new $6uUbQ$Struct({\n  extenderGlyphs: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16)),\n  defaultLangSys: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfLangSys),\n  langSysCount: $6uUbQ$uint16,\n  langSysRecords: new $6uUbQ$Array($71cfb3c4767fbd0c$var$JstfLangSysRecord, \"langSysCount\")\n});\nlet $71cfb3c4767fbd0c$var$JstfScriptRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  script: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfScript, {\n    type: \"parent\"\n  })\n});\nvar $71cfb3c4767fbd0c$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint32,\n  scriptCount: $6uUbQ$uint16,\n  scriptList: new $6uUbQ$Array($71cfb3c4767fbd0c$var$JstfScriptRecord, \"scriptCount\")\n});\n\n// TODO: add this to restructure\nclass $d059a6bd2d3b5b63$var$VariableSizeNumber {\n  decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1:\n        return stream.readUInt8();\n      case 2:\n        return stream.readUInt16BE();\n      case 3:\n        return stream.readUInt24BE();\n      case 4:\n        return stream.readUInt32BE();\n    }\n  }\n  size(val, parent) {\n    return (0, $6uUbQ$resolveLength)(this._size, null, parent);\n  }\n  constructor(size) {\n    this._size = size;\n  }\n}\nlet $d059a6bd2d3b5b63$var$MapDataEntry = new $6uUbQ$Struct({\n  entry: new $d059a6bd2d3b5b63$var$VariableSizeNumber(t => ((t.parent.entryFormat & 0x0030) >> 4) + 1),\n  outerIndex: t => t.entry >> (t.parent.entryFormat & 0x000F) + 1,\n  innerIndex: t => t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1\n});\nlet $d059a6bd2d3b5b63$var$DeltaSetIndexMap = new $6uUbQ$Struct({\n  entryFormat: $6uUbQ$uint16,\n  mapCount: $6uUbQ$uint16,\n  mapData: new $6uUbQ$Array($d059a6bd2d3b5b63$var$MapDataEntry, \"mapCount\")\n});\nvar $d059a6bd2d3b5b63$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  itemVariationStore: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241)),\n  advanceWidthMapping: new $6uUbQ$Pointer($6uUbQ$uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap),\n  LSBMapping: new $6uUbQ$Pointer($6uUbQ$uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap),\n  RSBMapping: new $6uUbQ$Pointer($6uUbQ$uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap)\n});\nlet $dceeca3e1977ce30$var$Signature = new $6uUbQ$Struct({\n  format: $6uUbQ$uint32,\n  length: $6uUbQ$uint32,\n  offset: $6uUbQ$uint32\n});\nlet $dceeca3e1977ce30$var$SignatureBlock = new $6uUbQ$Struct({\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16, 2),\n  cbSignature: $6uUbQ$uint32,\n  signature: new $6uUbQ$Buffer(\"cbSignature\")\n});\nvar $dceeca3e1977ce30$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  ulVersion: $6uUbQ$uint32,\n  usNumSigs: $6uUbQ$uint16,\n  usFlag: $6uUbQ$uint16,\n  signatures: new $6uUbQ$Array($dceeca3e1977ce30$var$Signature, \"usNumSigs\"),\n  signatureBlocks: new $6uUbQ$Array($dceeca3e1977ce30$var$SignatureBlock, \"usNumSigs\")\n});\nlet $8acd740a9435aad0$var$GaspRange = new $6uUbQ$Struct({\n  rangeMaxPPEM: $6uUbQ$uint16,\n  rangeGaspBehavior: new $6uUbQ$Bitfield($6uUbQ$uint16, [\"grayscale\", \"gridfit\", \"symmetricSmoothing\", \"symmetricGridfit\" // only in version 1, for ClearType\n  ])\n});\nvar $8acd740a9435aad0$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numRanges: $6uUbQ$uint16,\n  gaspRanges: new $6uUbQ$Array($8acd740a9435aad0$var$GaspRange, \"numRanges\") // Sorted by ppem\n});\nlet $b5f380243c34d6a0$var$DeviceRecord = new $6uUbQ$Struct({\n  pixelSize: $6uUbQ$uint8,\n  maximumWidth: $6uUbQ$uint8,\n  widths: new $6uUbQ$Array($6uUbQ$uint8, t => t.parent.parent.maxp.numGlyphs)\n});\nvar\n// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\n$b5f380243c34d6a0$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numRecords: $6uUbQ$int16,\n  sizeDeviceRecord: $6uUbQ$int32,\n  records: new $6uUbQ$Array($b5f380243c34d6a0$var$DeviceRecord, \"numRecords\")\n});\nlet $ca2df1256966e313$var$KernPair = new $6uUbQ$Struct({\n  left: $6uUbQ$uint16,\n  right: $6uUbQ$uint16,\n  value: $6uUbQ$int16\n});\nlet $ca2df1256966e313$var$ClassTable = new $6uUbQ$Struct({\n  firstGlyph: $6uUbQ$uint16,\n  nGlyphs: $6uUbQ$uint16,\n  offsets: new $6uUbQ$Array($6uUbQ$uint16, \"nGlyphs\"),\n  max: t => t.offsets.length && Math.max.apply(Math, t.offsets)\n});\nlet $ca2df1256966e313$var$Kern2Array = new $6uUbQ$Struct({\n  off: t => t._startOffset - t.parent.parent._startOffset,\n  len: t => ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),\n  values: new $6uUbQ$LazyArray($6uUbQ$int16, \"len\")\n});\nlet $ca2df1256966e313$var$KernSubtable = new $6uUbQ$VersionedStruct(\"format\", {\n  0: {\n    nPairs: $6uUbQ$uint16,\n    searchRange: $6uUbQ$uint16,\n    entrySelector: $6uUbQ$uint16,\n    rangeShift: $6uUbQ$uint16,\n    pairs: new $6uUbQ$Array($ca2df1256966e313$var$KernPair, \"nPairs\")\n  },\n  2: {\n    rowWidth: $6uUbQ$uint16,\n    leftTable: new $6uUbQ$Pointer($6uUbQ$uint16, $ca2df1256966e313$var$ClassTable, {\n      type: \"parent\"\n    }),\n    rightTable: new $6uUbQ$Pointer($6uUbQ$uint16, $ca2df1256966e313$var$ClassTable, {\n      type: \"parent\"\n    }),\n    array: new $6uUbQ$Pointer($6uUbQ$uint16, $ca2df1256966e313$var$Kern2Array, {\n      type: \"parent\"\n    })\n  },\n  3: {\n    glyphCount: $6uUbQ$uint16,\n    kernValueCount: $6uUbQ$uint8,\n    leftClassCount: $6uUbQ$uint8,\n    rightClassCount: $6uUbQ$uint8,\n    flags: $6uUbQ$uint8,\n    kernValue: new $6uUbQ$Array($6uUbQ$int16, \"kernValueCount\"),\n    leftClass: new $6uUbQ$Array($6uUbQ$uint8, \"glyphCount\"),\n    rightClass: new $6uUbQ$Array($6uUbQ$uint8, \"glyphCount\"),\n    kernIndex: new $6uUbQ$Array($6uUbQ$uint8, t => t.leftClassCount * t.rightClassCount)\n  }\n});\nlet $ca2df1256966e313$var$KernTable = new $6uUbQ$VersionedStruct(\"version\", {\n  0: {\n    subVersion: $6uUbQ$uint16,\n    length: $6uUbQ$uint16,\n    format: $6uUbQ$uint8,\n    coverage: new $6uUbQ$Bitfield($6uUbQ$uint8, [\"horizontal\", \"minimum\", \"crossStream\", \"override\" // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable: $ca2df1256966e313$var$KernSubtable,\n    padding: new $6uUbQ$Reserved($6uUbQ$uint8, t => t.length - t._currentOffset)\n  },\n  1: {\n    length: $6uUbQ$uint32,\n    coverage: new $6uUbQ$Bitfield($6uUbQ$uint8, [null, null, null, null, null, \"variation\", \"crossStream\", \"vertical\" // Set if table has vertical kerning values\n    ]),\n    format: $6uUbQ$uint8,\n    tupleIndex: $6uUbQ$uint16,\n    subtable: $ca2df1256966e313$var$KernSubtable,\n    padding: new $6uUbQ$Reserved($6uUbQ$uint8, t => t.length - t._currentOffset)\n  }\n});\nvar $ca2df1256966e313$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  0: {\n    nTables: $6uUbQ$uint16,\n    tables: new $6uUbQ$Array($ca2df1256966e313$var$KernTable, \"nTables\")\n  },\n  1: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    nTables: $6uUbQ$uint32,\n    tables: new $6uUbQ$Array($ca2df1256966e313$var$KernTable, \"nTables\")\n  }\n});\nvar\n// Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\n$7a9f92b0c46ebe33$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numGlyphs: $6uUbQ$uint16,\n  yPels: new $6uUbQ$Array($6uUbQ$uint8, \"numGlyphs\")\n});\nvar\n// PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\n$2b2ccc419d152631$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  fontNumber: $6uUbQ$uint32,\n  pitch: $6uUbQ$uint16,\n  xHeight: $6uUbQ$uint16,\n  style: $6uUbQ$uint16,\n  typeFamily: $6uUbQ$uint16,\n  capHeight: $6uUbQ$uint16,\n  symbolSet: $6uUbQ$uint16,\n  typeface: new $6uUbQ$String(16),\n  characterComplement: new $6uUbQ$String(8),\n  fileName: new $6uUbQ$String(6),\n  strokeWeight: new $6uUbQ$String(1),\n  widthType: new $6uUbQ$String(1),\n  serifStyle: $6uUbQ$uint8,\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint8)\n});\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\nlet $ca5b40b9bcda9c9b$var$Ratio = new $6uUbQ$Struct({\n  bCharSet: $6uUbQ$uint8,\n  xRatio: $6uUbQ$uint8,\n  yStartRatio: $6uUbQ$uint8,\n  yEndRatio: $6uUbQ$uint8 // Ending y-Ratio value\n});\nlet $ca5b40b9bcda9c9b$var$vTable = new $6uUbQ$Struct({\n  yPelHeight: $6uUbQ$uint16,\n  yMax: $6uUbQ$int16,\n  yMin: $6uUbQ$int16 // Minimum value (in pels) for this yPelHeight\n});\nlet $ca5b40b9bcda9c9b$var$VdmxGroup = new $6uUbQ$Struct({\n  recs: $6uUbQ$uint16,\n  startsz: $6uUbQ$uint8,\n  endsz: $6uUbQ$uint8,\n  entries: new $6uUbQ$Array($ca5b40b9bcda9c9b$var$vTable, \"recs\") // The VDMX records\n});\nvar $ca5b40b9bcda9c9b$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numRecs: $6uUbQ$uint16,\n  numRatios: $6uUbQ$uint16,\n  ratioRanges: new $6uUbQ$Array($ca5b40b9bcda9c9b$var$Ratio, \"numRatios\"),\n  offsets: new $6uUbQ$Array($6uUbQ$uint16, \"numRatios\"),\n  groups: new $6uUbQ$Array($ca5b40b9bcda9c9b$var$VdmxGroup, \"numRecs\") // The actual VDMX groupings\n});\nvar\n// Vertical Header Table\n$69530a3c40755af0$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  ascent: $6uUbQ$int16,\n  descent: $6uUbQ$int16,\n  lineGap: $6uUbQ$int16,\n  advanceHeightMax: $6uUbQ$int16,\n  minTopSideBearing: $6uUbQ$int16,\n  minBottomSideBearing: $6uUbQ$int16,\n  yMaxExtent: $6uUbQ$int16,\n  caretSlopeRise: $6uUbQ$int16,\n  caretSlopeRun: $6uUbQ$int16,\n  caretOffset: $6uUbQ$int16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$int16, 4),\n  metricDataFormat: $6uUbQ$int16,\n  numberOfMetrics: $6uUbQ$uint16 // Number of advance heights in the Vertical Metrics table\n});\nlet $344073dd270f0e62$var$VmtxEntry = new $6uUbQ$Struct({\n  advance: $6uUbQ$uint16,\n  bearing: $6uUbQ$int16 // The top sidebearing of the glyph\n});\nvar\n// Vertical Metrics Table\n$344073dd270f0e62$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  metrics: new $6uUbQ$LazyArray($344073dd270f0e62$var$VmtxEntry, t => t.parent.vhea.numberOfMetrics),\n  bearings: new $6uUbQ$LazyArray($6uUbQ$int16, t => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\nlet $3793b781918cfced$var$shortFrac = new $6uUbQ$Fixed(16, \"BE\", 14);\nlet $3793b781918cfced$var$Correspondence = new $6uUbQ$Struct({\n  fromCoord: $3793b781918cfced$var$shortFrac,\n  toCoord: $3793b781918cfced$var$shortFrac\n});\nlet $3793b781918cfced$var$Segment = new $6uUbQ$Struct({\n  pairCount: $6uUbQ$uint16,\n  correspondence: new $6uUbQ$Array($3793b781918cfced$var$Correspondence, \"pairCount\")\n});\nvar $3793b781918cfced$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  axisCount: $6uUbQ$uint32,\n  segment: new $6uUbQ$Array($3793b781918cfced$var$Segment, \"axisCount\")\n});\nclass $6cb7dd5f47d82580$var$UnboundedArrayAccessor {\n  getItem(index) {\n    if (this._items[index] == null) {\n      let pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n    return this._items[index];\n  }\n  inspect() {\n    return `[UnboundedArray ${this.type.constructor.name}]`;\n  }\n  constructor(type, stream, parent) {\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n}\nclass $6cb7dd5f47d82580$export$c5af1eebc882e39a extends $6uUbQ$Array {\n  decode(stream, parent) {\n    return new $6cb7dd5f47d82580$var$UnboundedArrayAccessor(this.type, stream, parent);\n  }\n  constructor(type) {\n    super(type, 0);\n  }\n}\nlet $6cb7dd5f47d82580$export$8351f8c2ae2f103c = function (ValueType = $6uUbQ$uint16) {\n  // Helper class that makes internal structures invisible to pointers\n  class Shadow {\n    decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    }\n    size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    }\n    encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    }\n    constructor(type) {\n      this.type = type;\n    }\n  }\n  ValueType = new Shadow(ValueType);\n  let BinarySearchHeader = new $6uUbQ$Struct({\n    unitSize: $6uUbQ$uint16,\n    nUnits: $6uUbQ$uint16,\n    searchRange: $6uUbQ$uint16,\n    entrySelector: $6uUbQ$uint16,\n    rangeShift: $6uUbQ$uint16\n  });\n  let LookupSegmentSingle = new $6uUbQ$Struct({\n    lastGlyph: $6uUbQ$uint16,\n    firstGlyph: $6uUbQ$uint16,\n    value: ValueType\n  });\n  let LookupSegmentArray = new $6uUbQ$Struct({\n    lastGlyph: $6uUbQ$uint16,\n    firstGlyph: $6uUbQ$uint16,\n    values: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$Array(ValueType, t => t.lastGlyph - t.firstGlyph + 1), {\n      type: \"parent\"\n    })\n  });\n  let LookupSingle = new $6uUbQ$Struct({\n    glyph: $6uUbQ$uint16,\n    value: ValueType\n  });\n  return new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n    0: {\n      values: new $6cb7dd5f47d82580$export$c5af1eebc882e39a(ValueType) // length == number of glyphs maybe?\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $6uUbQ$Array(LookupSegmentSingle, t => t.binarySearchHeader.nUnits)\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $6uUbQ$Array(LookupSegmentArray, t => t.binarySearchHeader.nUnits)\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $6uUbQ$Array(LookupSingle, t => t.binarySearchHeader.nUnits)\n    },\n    8: {\n      firstGlyph: $6uUbQ$uint16,\n      count: $6uUbQ$uint16,\n      values: new $6uUbQ$Array(ValueType, \"count\")\n    }\n  });\n};\nfunction $6cb7dd5f47d82580$export$79f7d93d790934ba(entryData = {}, lookupType = $6uUbQ$uint16) {\n  let entry = Object.assign({\n    newState: $6uUbQ$uint16,\n    flags: $6uUbQ$uint16\n  }, entryData);\n  let Entry = new $6uUbQ$Struct(entry);\n  let StateArray = new $6cb7dd5f47d82580$export$c5af1eebc882e39a(new $6uUbQ$Array($6uUbQ$uint16, t => t.nClasses));\n  let StateHeader = new $6uUbQ$Struct({\n    nClasses: $6uUbQ$uint32,\n    classTable: new $6uUbQ$Pointer($6uUbQ$uint32, new $6cb7dd5f47d82580$export$8351f8c2ae2f103c(lookupType)),\n    stateArray: new $6uUbQ$Pointer($6uUbQ$uint32, StateArray),\n    entryTable: new $6uUbQ$Pointer($6uUbQ$uint32, new $6cb7dd5f47d82580$export$c5af1eebc882e39a(Entry))\n  });\n  return StateHeader;\n}\nfunction $6cb7dd5f47d82580$export$105027425199cc51(entryData = {}, lookupType = $6uUbQ$uint16) {\n  let ClassLookupTable = new $6uUbQ$Struct({\n    version() {\n      return 8;\n    },\n    firstGlyph: $6uUbQ$uint16,\n    values: new $6uUbQ$Array($6uUbQ$uint8, $6uUbQ$uint16)\n  });\n  let entry = Object.assign({\n    newStateOffset: $6uUbQ$uint16,\n    // convert offset to stateArray index\n    newState: t => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n    flags: $6uUbQ$uint16\n  }, entryData);\n  let Entry = new $6uUbQ$Struct(entry);\n  let StateArray = new $6cb7dd5f47d82580$export$c5af1eebc882e39a(new $6uUbQ$Array($6uUbQ$uint8, t => t.nClasses));\n  let StateHeader1 = new $6uUbQ$Struct({\n    nClasses: $6uUbQ$uint16,\n    classTable: new $6uUbQ$Pointer($6uUbQ$uint16, ClassLookupTable),\n    stateArray: new $6uUbQ$Pointer($6uUbQ$uint16, StateArray),\n    entryTable: new $6uUbQ$Pointer($6uUbQ$uint16, new $6cb7dd5f47d82580$export$c5af1eebc882e39a(Entry))\n  });\n  return StateHeader1;\n}\nlet $6a3746e8c708f5a3$var$BslnSubtable = new $6uUbQ$VersionedStruct(\"format\", {\n  0: {\n    deltas: new $6uUbQ$Array($6uUbQ$int16, 32)\n  },\n  1: {\n    deltas: new $6uUbQ$Array($6uUbQ$int16, 32),\n    mappingData: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)($6uUbQ$uint16)\n  },\n  2: {\n    standardGlyph: $6uUbQ$uint16,\n    controlPoints: new $6uUbQ$Array($6uUbQ$uint16, 32)\n  },\n  3: {\n    standardGlyph: $6uUbQ$uint16,\n    controlPoints: new $6uUbQ$Array($6uUbQ$uint16, 32),\n    mappingData: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)($6uUbQ$uint16)\n  }\n});\nvar $6a3746e8c708f5a3$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  format: $6uUbQ$uint16,\n  defaultBaseline: $6uUbQ$uint16,\n  subtable: $6a3746e8c708f5a3$var$BslnSubtable\n});\nlet $d0c76fac617b308a$var$Setting = new $6uUbQ$Struct({\n  setting: $6uUbQ$uint16,\n  nameIndex: $6uUbQ$int16,\n  name: t => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nlet $d0c76fac617b308a$var$FeatureName = new $6uUbQ$Struct({\n  feature: $6uUbQ$uint16,\n  nSettings: $6uUbQ$uint16,\n  settingTable: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($d0c76fac617b308a$var$Setting, \"nSettings\"), {\n    type: \"parent\"\n  }),\n  featureFlags: new $6uUbQ$Bitfield($6uUbQ$uint8, [null, null, null, null, null, null, \"hasDefault\", \"exclusive\"]),\n  defaultSetting: $6uUbQ$uint8,\n  nameIndex: $6uUbQ$int16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nvar $d0c76fac617b308a$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  featureNameCount: $6uUbQ$uint16,\n  reserved1: new $6uUbQ$Reserved($6uUbQ$uint16),\n  reserved2: new $6uUbQ$Reserved($6uUbQ$uint32),\n  featureNames: new $6uUbQ$Array($d0c76fac617b308a$var$FeatureName, \"featureNameCount\")\n});\nlet $e83fd065f00fcd01$var$Axis = new $6uUbQ$Struct({\n  axisTag: new $6uUbQ$String(4),\n  minValue: $6uUbQ$fixed32,\n  defaultValue: $6uUbQ$fixed32,\n  maxValue: $6uUbQ$fixed32,\n  flags: $6uUbQ$uint16,\n  nameID: $6uUbQ$uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID]\n});\nlet $e83fd065f00fcd01$var$Instance = new $6uUbQ$Struct({\n  nameID: $6uUbQ$uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID],\n  flags: $6uUbQ$uint16,\n  coord: new $6uUbQ$Array($6uUbQ$fixed32, t => t.parent.axisCount),\n  postscriptNameID: new $6uUbQ$Optional($6uUbQ$uint16, t => t.parent.instanceSize - t._currentOffset > 0)\n});\nvar $e83fd065f00fcd01$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  offsetToData: $6uUbQ$uint16,\n  countSizePairs: $6uUbQ$uint16,\n  axisCount: $6uUbQ$uint16,\n  axisSize: $6uUbQ$uint16,\n  instanceCount: $6uUbQ$uint16,\n  instanceSize: $6uUbQ$uint16,\n  axis: new $6uUbQ$Array($e83fd065f00fcd01$var$Axis, \"axisCount\"),\n  instance: new $6uUbQ$Array($e83fd065f00fcd01$var$Instance, \"instanceCount\")\n});\nlet $dbe33c8d3a7f131c$var$shortFrac = new $6uUbQ$Fixed(16, \"BE\", 14);\nclass $dbe33c8d3a7f131c$var$Offset {\n  static decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n  }\n}\nlet $dbe33c8d3a7f131c$var$gvar = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n  axisCount: $6uUbQ$uint16,\n  globalCoordCount: $6uUbQ$uint16,\n  globalCoords: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array(new $6uUbQ$Array($dbe33c8d3a7f131c$var$shortFrac, \"axisCount\"), \"globalCoordCount\")),\n  glyphCount: $6uUbQ$uint16,\n  flags: $6uUbQ$uint16,\n  offsetToData: $6uUbQ$uint32,\n  offsets: new $6uUbQ$Array(new $6uUbQ$Pointer($dbe33c8d3a7f131c$var$Offset, \"void\", {\n    relativeTo: ctx => ctx.offsetToData,\n    allowNull: false\n  }), t => t.glyphCount + 1)\n});\nvar $dbe33c8d3a7f131c$export$2e2bcd8739ae039 = $dbe33c8d3a7f131c$var$gvar;\nlet $05b01887df96c4ee$var$ClassTable = new $6uUbQ$Struct({\n  length: $6uUbQ$uint16,\n  coverage: $6uUbQ$uint16,\n  subFeatureFlags: $6uUbQ$uint32,\n  stateTable: new (0, $6cb7dd5f47d82580$export$105027425199cc51)()\n});\nlet $05b01887df96c4ee$var$WidthDeltaRecord = new $6uUbQ$Struct({\n  justClass: $6uUbQ$uint32,\n  beforeGrowLimit: $6uUbQ$fixed32,\n  beforeShrinkLimit: $6uUbQ$fixed32,\n  afterGrowLimit: $6uUbQ$fixed32,\n  afterShrinkLimit: $6uUbQ$fixed32,\n  growFlags: $6uUbQ$uint16,\n  shrinkFlags: $6uUbQ$uint16\n});\nlet $05b01887df96c4ee$var$WidthDeltaCluster = new $6uUbQ$Array($05b01887df96c4ee$var$WidthDeltaRecord, $6uUbQ$uint32);\nlet $05b01887df96c4ee$var$ActionData = new $6uUbQ$VersionedStruct(\"actionType\", {\n  0: {\n    lowerLimit: $6uUbQ$fixed32,\n    upperLimit: $6uUbQ$fixed32,\n    order: $6uUbQ$uint16,\n    glyphs: new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16)\n  },\n  1: {\n    addGlyph: $6uUbQ$uint16\n  },\n  2: {\n    substThreshold: $6uUbQ$fixed32,\n    addGlyph: $6uUbQ$uint16,\n    substGlyph: $6uUbQ$uint16\n  },\n  3: {},\n  4: {\n    variationAxis: $6uUbQ$uint32,\n    minimumLimit: $6uUbQ$fixed32,\n    noStretchValue: $6uUbQ$fixed32,\n    maximumLimit: $6uUbQ$fixed32\n  },\n  5: {\n    flags: $6uUbQ$uint16,\n    glyph: $6uUbQ$uint16\n  }\n});\nlet $05b01887df96c4ee$var$Action = new $6uUbQ$Struct({\n  actionClass: $6uUbQ$uint16,\n  actionType: $6uUbQ$uint16,\n  actionLength: $6uUbQ$uint32,\n  actionData: $05b01887df96c4ee$var$ActionData,\n  padding: new $6uUbQ$Reserved($6uUbQ$uint8, t => t.actionLength - t._currentOffset)\n});\nlet $05b01887df96c4ee$var$PostcompensationAction = new $6uUbQ$Array($05b01887df96c4ee$var$Action, $6uUbQ$uint32);\nlet $05b01887df96c4ee$var$PostCompensationTable = new $6uUbQ$Struct({\n  lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$PostcompensationAction))\n});\nlet $05b01887df96c4ee$var$JustificationTable = new $6uUbQ$Struct({\n  classTable: new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$ClassTable, {\n    type: \"parent\"\n  }),\n  wdcOffset: $6uUbQ$uint16,\n  postCompensationTable: new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$PostCompensationTable, {\n    type: \"parent\"\n  }),\n  widthDeltaClusters: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$WidthDeltaCluster, {\n    type: \"parent\",\n    relativeTo: ctx => ctx.wdcOffset\n  }))\n});\nvar $05b01887df96c4ee$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint32,\n  format: $6uUbQ$uint16,\n  horizontal: new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$JustificationTable),\n  vertical: new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$JustificationTable)\n});\nlet $03ee6ebd54db1053$var$LigatureData = {\n  action: $6uUbQ$uint16\n};\nlet $03ee6ebd54db1053$var$ContextualData = {\n  markIndex: $6uUbQ$uint16,\n  currentIndex: $6uUbQ$uint16\n};\nlet $03ee6ebd54db1053$var$InsertionData = {\n  currentInsertIndex: $6uUbQ$uint16,\n  markedInsertIndex: $6uUbQ$uint16\n};\nlet $03ee6ebd54db1053$var$SubstitutionTable = new $6uUbQ$Struct({\n  items: new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)()))\n});\nlet $03ee6ebd54db1053$var$SubtableData = new $6uUbQ$VersionedStruct(\"type\", {\n  0: {\n    stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)()\n  },\n  1: {\n    stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$ContextualData),\n    substitutionTable: new $6uUbQ$Pointer($6uUbQ$uint32, $03ee6ebd54db1053$var$SubstitutionTable)\n  },\n  2: {\n    stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$LigatureData),\n    ligatureActions: new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)($6uUbQ$uint32)),\n    components: new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)($6uUbQ$uint16)),\n    ligatureList: new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)($6uUbQ$uint16))\n  },\n  4: {\n    lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)()\n  },\n  5: {\n    stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$InsertionData),\n    insertionActions: new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)($6uUbQ$uint16))\n  }\n});\nlet $03ee6ebd54db1053$var$Subtable = new $6uUbQ$Struct({\n  length: $6uUbQ$uint32,\n  coverage: $6uUbQ$uint24,\n  type: $6uUbQ$uint8,\n  subFeatureFlags: $6uUbQ$uint32,\n  table: $03ee6ebd54db1053$var$SubtableData,\n  padding: new $6uUbQ$Reserved($6uUbQ$uint8, t => t.length - t._currentOffset)\n});\nlet $03ee6ebd54db1053$var$FeatureEntry = new $6uUbQ$Struct({\n  featureType: $6uUbQ$uint16,\n  featureSetting: $6uUbQ$uint16,\n  enableFlags: $6uUbQ$uint32,\n  disableFlags: $6uUbQ$uint32\n});\nlet $03ee6ebd54db1053$var$MorxChain = new $6uUbQ$Struct({\n  defaultFlags: $6uUbQ$uint32,\n  chainLength: $6uUbQ$uint32,\n  nFeatureEntries: $6uUbQ$uint32,\n  nSubtables: $6uUbQ$uint32,\n  features: new $6uUbQ$Array($03ee6ebd54db1053$var$FeatureEntry, \"nFeatureEntries\"),\n  subtables: new $6uUbQ$Array($03ee6ebd54db1053$var$Subtable, \"nSubtables\")\n});\nvar $03ee6ebd54db1053$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  unused: new $6uUbQ$Reserved($6uUbQ$uint16),\n  nChains: $6uUbQ$uint32,\n  chains: new $6uUbQ$Array($03ee6ebd54db1053$var$MorxChain, \"nChains\")\n});\nlet $b7492a80b0d1a056$var$OpticalBounds = new $6uUbQ$Struct({\n  left: $6uUbQ$int16,\n  top: $6uUbQ$int16,\n  right: $6uUbQ$int16,\n  bottom: $6uUbQ$int16\n});\nvar $b7492a80b0d1a056$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  format: $6uUbQ$uint16,\n  lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)($b7492a80b0d1a056$var$OpticalBounds)\n});\nlet $c3395722bea751e2$var$tables = {};\nvar $c3395722bea751e2$export$2e2bcd8739ae039 = $c3395722bea751e2$var$tables;\n$c3395722bea751e2$var$tables.cmap = (0, $26a62205ad06574e$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.head = (0, $f2612a29f92ac062$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hhea = (0, $2c179dd593583073$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hmtx = (0, $bdc9060542264b85$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.maxp = (0, $dbf51cb3d3fe409d$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.name = (0, $2bcf221753ec8e32$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables[\"OS/2\"] = (0, $84b272aa31b70606$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.post = (0, $32d9e2eb9565d93c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.fpgm = (0, $5c0f37ca5ffb1850$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.loca = (0, $2b2b260902b1c57e$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.prep = (0, $7afb878c7bea4f66$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables[\"cvt \"] = (0, $5202bd9d9ad8eaac$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.glyf = (0, $6c92b6371bce8bd9$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables[\"CFF \"] = (0, $822ac0d589e4e237$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables[\"CFF2\"] = (0, $822ac0d589e4e237$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.VORG = (0, $2bbf2bc1ce37cd8f$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.EBLC = (0, $9911c4c7201c13de$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.CBLC = $c3395722bea751e2$var$tables.EBLC;\n$c3395722bea751e2$var$tables.sbix = (0, $abb847051efd51b1$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.COLR = (0, $eb629188f3dfefdd$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.CPAL = (0, $08734b8e7dc64587$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.BASE = (0, $497cef411d884e34$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GDEF = (0, $cf5f33c63ef209e6$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GPOS = (0, $47e0e8ef515d9903$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GSUB = (0, $d3f442064af66e06$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.JSTF = (0, $71cfb3c4767fbd0c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.HVAR = (0, $d059a6bd2d3b5b63$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.DSIG = (0, $dceeca3e1977ce30$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.gasp = (0, $8acd740a9435aad0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hdmx = (0, $b5f380243c34d6a0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.kern = (0, $ca2df1256966e313$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.LTSH = (0, $7a9f92b0c46ebe33$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.PCLT = (0, $2b2ccc419d152631$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.VDMX = (0, $ca5b40b9bcda9c9b$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.vhea = (0, $69530a3c40755af0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.vmtx = (0, $344073dd270f0e62$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.avar = (0, $3793b781918cfced$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.bsln = (0, $6a3746e8c708f5a3$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.feat = (0, $d0c76fac617b308a$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.fvar = (0, $e83fd065f00fcd01$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.gvar = (0, $dbe33c8d3a7f131c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.just = (0, $05b01887df96c4ee$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.morx = (0, $03ee6ebd54db1053$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.opbd = (0, $b7492a80b0d1a056$export$2e2bcd8739ae039);\nlet $816c07a04b6dba87$var$TableEntry = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  checkSum: $6uUbQ$uint32,\n  offset: new $6uUbQ$Pointer($6uUbQ$uint32, \"void\", {\n    type: \"global\"\n  }),\n  length: $6uUbQ$uint32\n});\nlet $816c07a04b6dba87$var$Directory = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  numTables: $6uUbQ$uint16,\n  searchRange: $6uUbQ$uint16,\n  entrySelector: $6uUbQ$uint16,\n  rangeShift: $6uUbQ$uint16,\n  tables: new $6uUbQ$Array($816c07a04b6dba87$var$TableEntry, \"numTables\")\n});\n$816c07a04b6dba87$var$Directory.process = function () {\n  let tables = {};\n  for (let table of this.tables) tables[table.tag] = table;\n  this.tables = tables;\n};\n$816c07a04b6dba87$var$Directory.preEncode = function () {\n  if (!Array.isArray(this.tables)) {\n    let tables = [];\n    for (let tag in this.tables) {\n      let table = this.tables[tag];\n      if (table) tables.push({\n        tag: tag,\n        checkSum: 0,\n        offset: new $6uUbQ$VoidPointer((0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag], table),\n        length: (0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag].size(table)\n      });\n    }\n    this.tables = tables;\n  }\n  this.tag = \"true\";\n  this.numTables = this.tables.length;\n  let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);\n  let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n  this.searchRange = maxPowerOf2 * 16;\n  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\nvar $816c07a04b6dba87$export$2e2bcd8739ae039 = $816c07a04b6dba87$var$Directory;\nfunction $12727730ddfc8bfe$export$2e0ae67339d5f1ac(arr, cmp) {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min <= max) {\n    let mid = min + max >> 1;\n    let res = cmp(arr[mid]);\n    if (res < 0) max = mid - 1;else if (res > 0) min = mid + 1;else return mid;\n  }\n  return -1;\n}\nfunction $12727730ddfc8bfe$export$d02631cccf789723(index, end) {\n  let range1 = [];\n  while (index < end) range1.push(index++);\n  return range1;\n}\nconst $12727730ddfc8bfe$export$3d28c1996ced1f14 = new TextDecoder(\"ascii\");\n// Based on https://github.com/niklasvh/base64-arraybuffer. MIT license.\nconst $12727730ddfc8bfe$var$CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst $12727730ddfc8bfe$var$LOOKUP = new Uint8Array(256);\nfor (let i = 0; i < $12727730ddfc8bfe$var$CHARS.length; i++) $12727730ddfc8bfe$var$LOOKUP[$12727730ddfc8bfe$var$CHARS.charCodeAt(i)] = i;\nfunction $12727730ddfc8bfe$export$94fdf11bafc8de6b(base64) {\n  let bufferLength = base64.length * 0.75;\n  if (base64[base64.length - 1] === \"=\") {\n    bufferLength--;\n    if (base64[base64.length - 2] === \"=\") bufferLength--;\n  }\n  let bytes = new Uint8Array(bufferLength);\n  let p = 0;\n  for (let i1 = 0, len = base64.length; i1 < len; i1 += 4) {\n    let encoded1 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i1)];\n    let encoded2 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i1 + 1)];\n    let encoded3 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i1 + 2)];\n    let encoded4 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i1 + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n  return bytes;\n}\nclass $f08dd41ef10b694c$export$2e2bcd8739ae039 {\n  findSubtable(cmapTable, pairs) {\n    for (let [platformID, encodingID] of pairs) for (let cmap of cmapTable.tables) {\n      if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;\n    }\n    return null;\n  }\n  lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) codepoint = this.encoding.get(codepoint) || codepoint;else if (variationSelector) {\n      let gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) return gid;\n    }\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n      case 4:\n        {\n          let min = 0;\n          let max = cmap.segCount - 1;\n          while (min <= max) {\n            let mid = min + max >> 1;\n            if (codepoint < cmap.startCode.get(mid)) max = mid - 1;else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;else {\n              let rangeOffset = cmap.idRangeOffset.get(mid);\n              let gid;\n              if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);else {\n                let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                gid = cmap.glyphIndexArray.get(index) || 0;\n                if (gid !== 0) gid += cmap.idDelta.get(mid);\n              }\n              return gid & 0xffff;\n            }\n          }\n          return 0;\n        }\n      case 8:\n        throw new Error(\"TODO: cmap format 8\");\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n      case 12:\n      case 13:\n        {\n          let min = 0;\n          let max = cmap.nGroups - 1;\n          while (min <= max) {\n            let mid = min + max >> 1;\n            let group = cmap.groups.get(mid);\n            if (codepoint < group.startCharCode) max = mid - 1;else if (codepoint > group.endCharCode) min = mid + 1;else {\n              if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);else return group.glyphID;\n            }\n          }\n          return 0;\n        }\n      case 14:\n        throw new Error(\"TODO: cmap format 14\");\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n  getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) return 0;\n    let selectors = this.uvs.varSelectors.toArray();\n    let i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(selectors, x => variationSelector - x.varSelector);\n    let sel = selectors[i];\n    if (i !== -1 && sel.defaultUVS) i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(sel.defaultUVS, x => codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0);\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(sel.nonDefaultUVS, x => codepoint - x.unicodeValue);\n      if (i !== -1) return sel.nonDefaultUVS[i].glyphID;\n    }\n    return 0;\n  }\n  getCharacterSet() {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return (0, $12727730ddfc8bfe$export$d02631cccf789723)(0, cmap.codeMap.length);\n      case 4:\n        {\n          let res = [];\n          let endCodes = cmap.endCode.toArray();\n          for (let i = 0; i < endCodes.length; i++) {\n            let tail = endCodes[i] + 1;\n            let start = cmap.startCode.get(i);\n            res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(start, tail));\n          }\n          return res;\n        }\n      case 8:\n        throw new Error(\"TODO: cmap format 8\");\n      case 6:\n      case 10:\n        return (0, $12727730ddfc8bfe$export$d02631cccf789723)(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n      case 12:\n      case 13:\n        {\n          let res = [];\n          for (let group of cmap.groups.toArray()) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));\n          return res;\n        }\n      case 14:\n        throw new Error(\"TODO: cmap format 14\");\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n  codePointsForGlyph(gid) {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        {\n          let res = [];\n          for (let i = 0; i < 256; i++) if (cmap.codeMap.get(i) === gid) res.push(i);\n          return res;\n        }\n      case 4:\n        {\n          let res = [];\n          for (let i = 0; i < cmap.segCount; i++) {\n            let end = cmap.endCode.get(i);\n            let start = cmap.startCode.get(i);\n            let rangeOffset = cmap.idRangeOffset.get(i);\n            let delta = cmap.idDelta.get(i);\n            for (var c = start; c <= end; c++) {\n              let g = 0;\n              if (rangeOffset === 0) g = c + delta;else {\n                let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n                g = cmap.glyphIndexArray.get(index) || 0;\n                if (g !== 0) g += delta;\n              }\n              if (g === gid) res.push(c);\n            }\n          }\n          return res;\n        }\n      case 12:\n        {\n          let res = [];\n          for (let group of cmap.groups.toArray()) if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));\n          return res;\n        }\n      case 13:\n        {\n          let res = [];\n          for (let group of cmap.groups.toArray()) if (gid === group.glyphID) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));\n          return res;\n        }\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n  constructor(cmapTable) {\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [\n    // 32-bit subtables\n    [3, 10], [0, 6], [0, 4],\n    // 16-bit subtables\n    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]);\n    // If not unicode cmap was found, take the first table with a supported encoding.\n    if (!this.cmap) for (let cmap of cmapTable.tables) {\n      let encoding = (0, $e449ad78d50845fe$export$badc544e0651b6b1)(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n      let mapping = (0, $e449ad78d50845fe$export$1dceb3c14ed68bee)(encoding);\n      if (mapping) {\n        this.cmap = cmap.table;\n        this.encoding = mapping;\n      }\n    }\n    if (!this.cmap) throw new Error(\"Could not find a supported cmap table\");\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) this.uvs = null;\n  }\n}\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f08dd41ef10b694c$export$2e2bcd8739ae039.prototype, \"getCharacterSet\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f08dd41ef10b694c$export$2e2bcd8739ae039.prototype, \"codePointsForGlyph\", null);\nclass $0bba3a9db57637f3$export$2e2bcd8739ae039 {\n  process(glyphs, positions) {\n    for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      let left = glyphs[glyphIndex].id;\n      let right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  }\n  getKerning(left, right) {\n    let res = 0;\n    for (let table of this.kern.tables) {\n      if (table.coverage.crossStream) continue;\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) continue;\n          break;\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) continue;\n          break;\n        default:\n          throw new Error(`Unsupported kerning table version ${table.version}`);\n      }\n      let val = 0;\n      let s = table.subtable;\n      switch (table.format) {\n        case 0:\n          let pairIdx = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(s.pairs, function (pair) {\n            return left - pair.left || right - pair.right;\n          });\n          if (pairIdx >= 0) val = s.pairs[pairIdx].value;\n          break;\n        case 2:\n          let leftOffset = 0,\n            rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];else leftOffset = s.array.off;\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          let index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) return 0;\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n        default:\n          throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n      }\n      // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n      if (table.coverage.override) res = val;else res += val;\n    }\n    return res;\n  }\n  constructor(font) {\n    this.kern = font.kern;\n  }\n}\nclass $0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039 {\n  positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    let clusterStart = 0;\n    let clusterEnd = 0;\n    for (let index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.isMark) clusterEnd = index;else {\n        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        clusterStart = clusterEnd = index;\n      }\n    }\n    if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    return positions;\n  }\n  positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    let base = glyphs[clusterStart];\n    let baseBox = base.cbox.copy();\n    // adjust bounding box for ligature glyphs\n    if (base.codePoints.length > 1)\n      // LTR. TODO: RTL support.\n      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n    let xOffset = -positions[clusterStart].xAdvance;\n    let yOffset = 0;\n    let yGap = this.font.unitsPerEm / 16;\n    // position each of the mark glyphs relative to the base glyph\n    for (let index = clusterStart + 1; index <= clusterEnd; index++) {\n      let mark = glyphs[index];\n      let markBox = mark.cbox;\n      let position = positions[index];\n      let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n      if (combiningClass !== \"Not_Reordered\") {\n        position.xOffset = position.yOffset = 0;\n        // x positioning\n        switch (combiningClass) {\n          case \"Double_Above\":\n          case \"Double_Below\":\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n          case \"Attached_Below_Left\":\n          case \"Below_Left\":\n          case \"Above_Left\":\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n          case \"Attached_Above_Right\":\n          case \"Below_Right\":\n          case \"Above_Right\":\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n          default:\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        }\n        // y positioning\n        switch (combiningClass) {\n          case \"Double_Below\":\n          case \"Below_Left\":\n          case \"Below\":\n          case \"Below_Right\":\n          case \"Attached_Below_Left\":\n          case \"Attached_Below\":\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === \"Attached_Below_Left\" || combiningClass === \"Attached_Below\") baseBox.minY += yGap;\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n          case \"Double_Above\":\n          case \"Above_Left\":\n          case \"Above\":\n          case \"Above_Right\":\n          case \"Attached_Above\":\n          case \"Attached_Above_Right\":\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === \"Attached_Above\" || combiningClass === \"Attached_Above_Right\") baseBox.maxY += yGap;\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n    return;\n  }\n  getCombiningClass(codePoint) {\n    let combiningClass = (0, $6uUbQ$getCombiningClass)(codePoint);\n    // Thai / Lao need some per-character work\n    if ((codePoint & -256) === 0x0e00) {\n      if (combiningClass === \"Not_Reordered\") switch (codePoint) {\n        case 0x0e31:\n        case 0x0e34:\n        case 0x0e35:\n        case 0x0e36:\n        case 0x0e37:\n        case 0x0e47:\n        case 0x0e4c:\n        case 0x0e3d:\n        case 0x0e4e:\n          return \"Above_Right\";\n        case 0x0eb1:\n        case 0x0eb4:\n        case 0x0eb5:\n        case 0x0eb6:\n        case 0x0eb7:\n        case 0x0ebb:\n        case 0x0ecc:\n        case 0x0ecd:\n          return \"Above\";\n        case 0x0ebc:\n          return \"Below\";\n      } else if (codePoint === 0x0e3a) return \"Below_Right\";\n    }\n    switch (combiningClass) {\n      // Hebrew\n      case \"CCC10\":\n      case \"CCC11\":\n      case \"CCC12\":\n      case \"CCC13\":\n      case \"CCC14\":\n      case \"CCC15\":\n      case \"CCC16\":\n      case \"CCC17\":\n      case \"CCC18\":\n      case \"CCC20\":\n      case \"CCC22\":\n        return \"Below\";\n      case \"CCC23\":\n        return \"Attached_Above\";\n      case \"CCC24\":\n        return \"Above_Right\";\n      case \"CCC25\":\n      case \"CCC19\":\n        return \"Above_Left\";\n      case \"CCC26\":\n        return \"Above\";\n      case \"CCC21\":\n        break;\n      // Arabic and Syriac\n      case \"CCC27\":\n      case \"CCC28\":\n      case \"CCC30\":\n      case \"CCC31\":\n      case \"CCC33\":\n      case \"CCC34\":\n      case \"CCC35\":\n      case \"CCC36\":\n        return \"Above\";\n      case \"CCC29\":\n      case \"CCC32\":\n        return \"Below\";\n      // Thai\n      case \"CCC103\":\n        return \"Below_Right\";\n      case \"CCC107\":\n        return \"Above_Right\";\n      // Lao\n      case \"CCC118\":\n        return \"Below\";\n      case \"CCC122\":\n        return \"Above\";\n      // Tibetan\n      case \"CCC129\":\n      case \"CCC132\":\n        return \"Below\";\n      case \"CCC130\":\n        return \"Above\";\n    }\n    return combiningClass;\n  }\n  constructor(font) {\n    this.font = font;\n  }\n}\nclass $f34600ab9d7f70d8$export$2e2bcd8739ae039 {\n  /**\n  * The width of the bounding box\n  * @type {number}\n  */\n  get width() {\n    return this.maxX - this.minX;\n  }\n  /**\n  * The height of the bounding box\n  * @type {number}\n  */\n  get height() {\n    return this.maxY - this.minY;\n  }\n  addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) this.minX = x;\n      if (x > this.maxX) this.maxX = x;\n    }\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) this.minY = y;\n      if (y > this.maxY) this.maxY = y;\n    }\n  }\n  copy() {\n    return new $f34600ab9d7f70d8$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);\n  }\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /**\n    * The minimum X position in the bounding box\n    * @type {number}\n    */\n    this.minX = minX;\n    /**\n    * The minimum Y position in the bounding box\n    * @type {number}\n    */\n    this.minY = minY;\n    /**\n    * The maxmimum X position in the bounding box\n    * @type {number}\n    */\n    this.maxX = maxX;\n    /**\n    * The maxmimum Y position in the bounding box\n    * @type {number}\n    */\n    this.maxY = maxY;\n  }\n}\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nconst $130d1a642ebcd2b7$var$UNICODE_SCRIPTS = {\n  Caucasian_Albanian: \"aghb\",\n  Arabic: \"arab\",\n  Imperial_Aramaic: \"armi\",\n  Armenian: \"armn\",\n  Avestan: \"avst\",\n  Balinese: \"bali\",\n  Bamum: \"bamu\",\n  Bassa_Vah: \"bass\",\n  Batak: \"batk\",\n  Bengali: [\"bng2\", \"beng\"],\n  Bopomofo: \"bopo\",\n  Brahmi: \"brah\",\n  Braille: \"brai\",\n  Buginese: \"bugi\",\n  Buhid: \"buhd\",\n  Chakma: \"cakm\",\n  Canadian_Aboriginal: \"cans\",\n  Carian: \"cari\",\n  Cham: \"cham\",\n  Cherokee: \"cher\",\n  Coptic: \"copt\",\n  Cypriot: \"cprt\",\n  Cyrillic: \"cyrl\",\n  Devanagari: [\"dev2\", \"deva\"],\n  Deseret: \"dsrt\",\n  Duployan: \"dupl\",\n  Egyptian_Hieroglyphs: \"egyp\",\n  Elbasan: \"elba\",\n  Ethiopic: \"ethi\",\n  Georgian: \"geor\",\n  Glagolitic: \"glag\",\n  Gothic: \"goth\",\n  Grantha: \"gran\",\n  Greek: \"grek\",\n  Gujarati: [\"gjr2\", \"gujr\"],\n  Gurmukhi: [\"gur2\", \"guru\"],\n  Hangul: \"hang\",\n  Han: \"hani\",\n  Hanunoo: \"hano\",\n  Hebrew: \"hebr\",\n  Hiragana: \"hira\",\n  Pahawh_Hmong: \"hmng\",\n  Katakana_Or_Hiragana: \"hrkt\",\n  Old_Italic: \"ital\",\n  Javanese: \"java\",\n  Kayah_Li: \"kali\",\n  Katakana: \"kana\",\n  Kharoshthi: \"khar\",\n  Khmer: \"khmr\",\n  Khojki: \"khoj\",\n  Kannada: [\"knd2\", \"knda\"],\n  Kaithi: \"kthi\",\n  Tai_Tham: \"lana\",\n  Lao: \"lao \",\n  Latin: \"latn\",\n  Lepcha: \"lepc\",\n  Limbu: \"limb\",\n  Linear_A: \"lina\",\n  Linear_B: \"linb\",\n  Lisu: \"lisu\",\n  Lycian: \"lyci\",\n  Lydian: \"lydi\",\n  Mahajani: \"mahj\",\n  Mandaic: \"mand\",\n  Manichaean: \"mani\",\n  Mende_Kikakui: \"mend\",\n  Meroitic_Cursive: \"merc\",\n  Meroitic_Hieroglyphs: \"mero\",\n  Malayalam: [\"mlm2\", \"mlym\"],\n  Modi: \"modi\",\n  Mongolian: \"mong\",\n  Mro: \"mroo\",\n  Meetei_Mayek: \"mtei\",\n  Myanmar: [\"mym2\", \"mymr\"],\n  Old_North_Arabian: \"narb\",\n  Nabataean: \"nbat\",\n  Nko: \"nko \",\n  Ogham: \"ogam\",\n  Ol_Chiki: \"olck\",\n  Old_Turkic: \"orkh\",\n  Oriya: [\"ory2\", \"orya\"],\n  Osmanya: \"osma\",\n  Palmyrene: \"palm\",\n  Pau_Cin_Hau: \"pauc\",\n  Old_Permic: \"perm\",\n  Phags_Pa: \"phag\",\n  Inscriptional_Pahlavi: \"phli\",\n  Psalter_Pahlavi: \"phlp\",\n  Phoenician: \"phnx\",\n  Miao: \"plrd\",\n  Inscriptional_Parthian: \"prti\",\n  Rejang: \"rjng\",\n  Runic: \"runr\",\n  Samaritan: \"samr\",\n  Old_South_Arabian: \"sarb\",\n  Saurashtra: \"saur\",\n  Shavian: \"shaw\",\n  Sharada: \"shrd\",\n  Siddham: \"sidd\",\n  Khudawadi: \"sind\",\n  Sinhala: \"sinh\",\n  Sora_Sompeng: \"sora\",\n  Sundanese: \"sund\",\n  Syloti_Nagri: \"sylo\",\n  Syriac: \"syrc\",\n  Tagbanwa: \"tagb\",\n  Takri: \"takr\",\n  Tai_Le: \"tale\",\n  New_Tai_Lue: \"talu\",\n  Tamil: [\"tml2\", \"taml\"],\n  Tai_Viet: \"tavt\",\n  Telugu: [\"tel2\", \"telu\"],\n  Tifinagh: \"tfng\",\n  Tagalog: \"tglg\",\n  Thaana: \"thaa\",\n  Thai: \"thai\",\n  Tibetan: \"tibt\",\n  Tirhuta: \"tirh\",\n  Ugaritic: \"ugar\",\n  Vai: \"vai \",\n  Warang_Citi: \"wara\",\n  Old_Persian: \"xpeo\",\n  Cuneiform: \"xsux\",\n  Yi: \"yi  \",\n  Inherited: \"zinh\",\n  Common: \"zyyy\",\n  Unknown: \"zzzz\"\n};\nconst $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS = {};\nfor (let script in $130d1a642ebcd2b7$var$UNICODE_SCRIPTS) {\n  let tag = $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) for (let t of tag) $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[t] = script;else $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[tag] = script;\n}\nfunction $130d1a642ebcd2b7$export$b32f0b5f69d65e51(script1) {\n  return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script1];\n}\nfunction $130d1a642ebcd2b7$export$ce50e82f12a827a4(tag) {\n  return $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[tag];\n}\nfunction $130d1a642ebcd2b7$export$e5cb25e204fb8450(string) {\n  let len = string.length;\n  let idx = 0;\n  while (idx < len) {\n    let code = string.charCodeAt(idx++);\n    // Check if this is a high surrogate\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      let next = string.charCodeAt(idx);\n      // Check if this is a low surrogate\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n    let script2 = (0, $6uUbQ$getScript)(code);\n    if (script2 !== \"Common\" && script2 !== \"Inherited\" && script2 !== \"Unknown\") return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script2];\n  }\n  return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS.Unknown;\n}\nfunction $130d1a642ebcd2b7$export$16fab0757cfc223d(codePoints) {\n  for (let i = 0; i < codePoints.length; i++) {\n    let codePoint = codePoints[i];\n    let script3 = (0, $6uUbQ$getScript)(codePoint);\n    if (script3 !== \"Common\" && script3 !== \"Inherited\" && script3 !== \"Unknown\") return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script3];\n  }\n  return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS.Unknown;\n}\n// The scripts in this map are written from right to left\nconst $130d1a642ebcd2b7$var$RTL = {\n  arab: true,\n  hebr: true,\n  syrc: true,\n  thaa: true,\n  cprt: true,\n  khar: true,\n  phnx: true,\n  \"nko \": true,\n  lydi: true,\n  avst: true,\n  armi: true,\n  phli: true,\n  prti: true,\n  sarb: true,\n  orkh: true,\n  samr: true,\n  mand: true,\n  merc: true,\n  mero: true,\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true,\n  mend: true,\n  nbat: true,\n  narb: true,\n  palm: true,\n  phlp: true // Psalter Pahlavi\n};\nfunction $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script4) {\n  if ($130d1a642ebcd2b7$var$RTL[script4]) return \"rtl\";\n  return \"ltr\";\n}\nclass $be07b3e97a42687a$export$2e2bcd8739ae039 {\n  /**\n  * The total advance width of the run.\n  * @type {number}\n  */\n  get advanceWidth() {\n    let width = 0;\n    for (let position of this.positions) width += position.xAdvance;\n    return width;\n  }\n  /**\n  * The total advance height of the run.\n  * @type {number}\n  */\n  get advanceHeight() {\n    let height = 0;\n    for (let position of this.positions) height += position.yAdvance;\n    return height;\n  }\n  /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */\n  get bbox() {\n    let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)();\n    let x = 0;\n    let y = 0;\n    for (let index = 0; index < this.glyphs.length; index++) {\n      let glyph = this.glyphs[index];\n      let p = this.positions[index];\n      let b = glyph.bbox;\n      bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n      bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n      x += p.xAdvance;\n      y += p.yAdvance;\n    }\n    return bbox;\n  }\n  constructor(glyphs, features, script, language, direction) {\n    /**\n    * An array of Glyph objects in the run\n    * @type {Glyph[]}\n    */\n    this.glyphs = glyphs;\n    /**\n    * An array of GlyphPosition objects for each glyph in the run\n    * @type {GlyphPosition[]}\n    */\n    this.positions = null;\n    /**\n    * The script that was requested for shaping. This was either passed in or detected automatically.\n    * @type {string}\n    */\n    this.script = script;\n    /**\n    * The language requested for shaping, as passed in. If `null`, the default language for the\n    * script was used.\n    * @type {string}\n    */\n    this.language = language || null;\n    /**\n    * The direction requested for shaping, as passed in (either ltr or rtl).\n    * If `null`, the default direction of the script is used.\n    * @type {string}\n    */\n    this.direction = direction || $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script);\n    /**\n    * The features requested during shaping. This is a combination of user\n    * specified features and features chosen by the shaper.\n    * @type {object}\n    */\n    this.features = {};\n    // Convert features to an object\n    if (Array.isArray(features)) for (let tag of features) this.features[tag] = true;else if (typeof features === \"object\") this.features = features;\n  }\n}\nclass $1ac75d9a55b67f01$export$2e2bcd8739ae039 {\n  constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {\n    /**\n    * The amount to move the virtual pen in the X direction after rendering this glyph.\n    * @type {number}\n    */\n    this.xAdvance = xAdvance;\n    /**\n    * The amount to move the virtual pen in the Y direction after rendering this glyph.\n    * @type {number}\n    */\n    this.yAdvance = yAdvance;\n    /**\n    * The offset from the pen position in the X direction at which to render this glyph.\n    * @type {number}\n    */\n    this.xOffset = xOffset;\n    /**\n    * The offset from the pen position in the Y direction at which to render this glyph.\n    * @type {number}\n    */\n    this.yOffset = yOffset;\n  }\n}\n\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nconst $3b6302b64eccc32c$var$features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n  // upperAndLowerCase: 0          # deprecated\n  // allCaps: 1                    # deprecated\n  // allLowerCase: 2               # deprecated\n  // smallCaps: 3                  # deprecated\n  // initialCaps: 4                # deprecated\n  // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n  // formInterrobang: 6\n  // smartQuotes: 8\n  // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n  // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n  // hanjaToHangul: 1\n  // hiraganaToKatakana: 2\n  // katakanaToHiragana: 3\n  // kanaToRomanization: 4\n  // romanizationToHiragana: 5\n  // romanizationToKatakana: 6\n  // hanjaToHangulAltOne: 7\n  // hanjaToHangulAltTwo: 8\n  // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: {\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\nconst $3b6302b64eccc32c$var$feature = (name, selector) => [$3b6302b64eccc32c$var$features[name].code, $3b6302b64eccc32c$var$features[name][selector]];\nconst $3b6302b64eccc32c$var$OTMapping = {\n  rlig: $3b6302b64eccc32c$var$feature(\"ligatures\", \"requiredLigatures\"),\n  clig: $3b6302b64eccc32c$var$feature(\"ligatures\", \"contextualLigatures\"),\n  dlig: $3b6302b64eccc32c$var$feature(\"ligatures\", \"rareLigatures\"),\n  hlig: $3b6302b64eccc32c$var$feature(\"ligatures\", \"historicalLigatures\"),\n  liga: $3b6302b64eccc32c$var$feature(\"ligatures\", \"commonLigatures\"),\n  hist: $3b6302b64eccc32c$var$feature(\"ligatures\", \"historicalLigatures\"),\n  smcp: $3b6302b64eccc32c$var$feature(\"lowerCase\", \"lowerCaseSmallCaps\"),\n  pcap: $3b6302b64eccc32c$var$feature(\"lowerCase\", \"lowerCasePetiteCaps\"),\n  frac: $3b6302b64eccc32c$var$feature(\"fractions\", \"diagonalFractions\"),\n  dnom: $3b6302b64eccc32c$var$feature(\"fractions\", \"diagonalFractions\"),\n  numr: $3b6302b64eccc32c$var$feature(\"fractions\", \"diagonalFractions\"),\n  afrc: $3b6302b64eccc32c$var$feature(\"fractions\", \"verticalFractions\"),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n  case: $3b6302b64eccc32c$var$feature(\"caseSensitiveLayout\", \"caseSensitiveLayout\"),\n  ccmp: $3b6302b64eccc32c$var$feature(\"unicodeDecomposition\", \"canonicalComposition\"),\n  cpct: $3b6302b64eccc32c$var$feature(\"CJKVerticalRomanPlacement\", \"CJKVerticalRomanCentered\"),\n  valt: $3b6302b64eccc32c$var$feature(\"CJKVerticalRomanPlacement\", \"CJKVerticalRomanCentered\"),\n  swsh: $3b6302b64eccc32c$var$feature(\"contextualAlternates\", \"swashAlternates\"),\n  cswh: $3b6302b64eccc32c$var$feature(\"contextualAlternates\", \"contextualSwashAlternates\"),\n  curs: $3b6302b64eccc32c$var$feature(\"cursiveConnection\", \"cursive\"),\n  c2pc: $3b6302b64eccc32c$var$feature(\"upperCase\", \"upperCasePetiteCaps\"),\n  c2sc: $3b6302b64eccc32c$var$feature(\"upperCase\", \"upperCaseSmallCaps\"),\n  init: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"wordInitialSwashes\"),\n  fin2: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n  medi: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"nonFinalSwashes\"),\n  med2: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"nonFinalSwashes\"),\n  fin3: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n  fina: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n  pkna: $3b6302b64eccc32c$var$feature(\"kanaSpacing\", \"proportionalKana\"),\n  half: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"halfWidthText\"),\n  halt: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"altHalfWidthText\"),\n  hkna: $3b6302b64eccc32c$var$feature(\"alternateKana\", \"alternateHorizKana\"),\n  vkna: $3b6302b64eccc32c$var$feature(\"alternateKana\", \"alternateVertKana\"),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n  ital: $3b6302b64eccc32c$var$feature(\"italicCJKRoman\", \"CJKItalicRoman\"),\n  lnum: $3b6302b64eccc32c$var$feature(\"numberCase\", \"upperCaseNumbers\"),\n  onum: $3b6302b64eccc32c$var$feature(\"numberCase\", \"lowerCaseNumbers\"),\n  mgrk: $3b6302b64eccc32c$var$feature(\"mathematicalExtras\", \"mathematicalGreek\"),\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n  calt: $3b6302b64eccc32c$var$feature(\"contextualAlternates\", \"contextualAlternates\"),\n  vrt2: $3b6302b64eccc32c$var$feature(\"verticalSubstitution\", \"substituteVerticalForms\"),\n  vert: $3b6302b64eccc32c$var$feature(\"verticalSubstitution\", \"substituteVerticalForms\"),\n  tnum: $3b6302b64eccc32c$var$feature(\"numberSpacing\", \"monospacedNumbers\"),\n  pnum: $3b6302b64eccc32c$var$feature(\"numberSpacing\", \"proportionalNumbers\"),\n  sups: $3b6302b64eccc32c$var$feature(\"verticalPosition\", \"superiors\"),\n  subs: $3b6302b64eccc32c$var$feature(\"verticalPosition\", \"inferiors\"),\n  ordn: $3b6302b64eccc32c$var$feature(\"verticalPosition\", \"ordinals\"),\n  pwid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"proportionalText\"),\n  hwid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"halfWidthText\"),\n  qwid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"quarterWidthText\"),\n  twid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"thirdWidthText\"),\n  fwid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"proportionalText\"),\n  palt: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"altProportionalText\"),\n  trad: $3b6302b64eccc32c$var$feature(\"characterShape\", \"traditionalCharacters\"),\n  smpl: $3b6302b64eccc32c$var$feature(\"characterShape\", \"simplifiedCharacters\"),\n  jp78: $3b6302b64eccc32c$var$feature(\"characterShape\", \"JIS1978Characters\"),\n  jp83: $3b6302b64eccc32c$var$feature(\"characterShape\", \"JIS1983Characters\"),\n  jp90: $3b6302b64eccc32c$var$feature(\"characterShape\", \"JIS1990Characters\"),\n  jp04: $3b6302b64eccc32c$var$feature(\"characterShape\", \"JIS2004Characters\"),\n  expt: $3b6302b64eccc32c$var$feature(\"characterShape\", \"expertCharacters\"),\n  hojo: $3b6302b64eccc32c$var$feature(\"characterShape\", \"hojoCharacters\"),\n  nlck: $3b6302b64eccc32c$var$feature(\"characterShape\", \"NLCCharacters\"),\n  tnam: $3b6302b64eccc32c$var$feature(\"characterShape\", \"traditionalNamesCharacters\"),\n  ruby: $3b6302b64eccc32c$var$feature(\"rubyKana\", \"rubyKana\"),\n  titl: $3b6302b64eccc32c$var$feature(\"styleOptions\", \"titlingCaps\"),\n  zero: $3b6302b64eccc32c$var$feature(\"typographicExtras\", \"slashedZero\"),\n  ss01: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltOne\"),\n  ss02: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltTwo\"),\n  ss03: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltThree\"),\n  ss04: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltFour\"),\n  ss05: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltFive\"),\n  ss06: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltSix\"),\n  ss07: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltSeven\"),\n  ss08: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltEight\"),\n  ss09: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltNine\"),\n  ss10: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltTen\"),\n  ss11: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltEleven\"),\n  ss12: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltTwelve\"),\n  ss13: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltThirteen\"),\n  ss14: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltFourteen\"),\n  ss15: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltFifteen\"),\n  ss16: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltSixteen\"),\n  ss17: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltSeventeen\"),\n  ss18: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltEighteen\"),\n  ss19: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltNineteen\"),\n  ss20: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltTwenty\")\n};\n// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n// Add cv01-cv99 features\nfor (let i = 1; i <= 99; i++) $3b6302b64eccc32c$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [$3b6302b64eccc32c$var$features.characterAlternatives.code, i];\n// create inverse mapping\nlet $3b6302b64eccc32c$var$AATMapping = {};\nfor (let ot in $3b6302b64eccc32c$var$OTMapping) {\n  let aat = $3b6302b64eccc32c$var$OTMapping[ot];\n  if ($3b6302b64eccc32c$var$AATMapping[aat[0]] == null) $3b6302b64eccc32c$var$AATMapping[aat[0]] = {};\n  $3b6302b64eccc32c$var$AATMapping[aat[0]][aat[1]] = ot;\n}\nfunction $3b6302b64eccc32c$export$b813f7d2a1677c16(features1) {\n  let res = {};\n  for (let k in features1) {\n    let r;\n    if (r = $3b6302b64eccc32c$var$OTMapping[k]) {\n      if (res[r[0]] == null) res[r[0]] = {};\n      res[r[0]][r[1]] = features1[k];\n    }\n  }\n  return res;\n}\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction $3b6302b64eccc32c$var$mapFeatureStrings(f) {\n  let [type, setting] = f;\n  if (isNaN(type)) var typeCode = $3b6302b64eccc32c$var$features[type] && $3b6302b64eccc32c$var$features[type].code;else var typeCode = type;\n  if (isNaN(setting)) var settingCode = $3b6302b64eccc32c$var$features[type] && $3b6302b64eccc32c$var$features[type][setting];else var settingCode = setting;\n  return [typeCode, settingCode];\n}\nfunction $3b6302b64eccc32c$export$bd6df347a4f391c4(features2) {\n  let res = {};\n  if (Array.isArray(features2)) for (let k = 0; k < features2.length; k++) {\n    let r;\n    let f = $3b6302b64eccc32c$var$mapFeatureStrings(features2[k]);\n    if (r = $3b6302b64eccc32c$var$AATMapping[f[0]] && $3b6302b64eccc32c$var$AATMapping[f[0]][f[1]]) res[r] = true;\n  } else if (typeof features2 === \"object\") for (let type in features2) {\n    let feature1 = features2[type];\n    for (let setting in feature1) {\n      let r;\n      let f = $3b6302b64eccc32c$var$mapFeatureStrings([type, setting]);\n      if (feature1[setting] && (r = $3b6302b64eccc32c$var$AATMapping[f[0]] && $3b6302b64eccc32c$var$AATMapping[f[0]][f[1]])) res[r] = true;\n    }\n  }\n  return Object.keys(res);\n}\nclass $ff5ce077dae0f144$export$2e2bcd8739ae039 {\n  lookup(glyph) {\n    switch (this.table.version) {\n      case 0:\n        return this.table.values.getItem(glyph);\n      case 2:\n      case 4:\n        {\n          let min = 0;\n          let max = this.table.binarySearchHeader.nUnits - 1;\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid];\n            // special end of search value\n            if (seg.firstGlyph === 0xffff) return null;\n            if (glyph < seg.firstGlyph) max = mid - 1;else if (glyph > seg.lastGlyph) min = mid + 1;else {\n              if (this.table.version === 2) return seg.value;else return seg.values[glyph - seg.firstGlyph];\n            }\n          }\n          return null;\n        }\n      case 6:\n        {\n          let min = 0;\n          let max = this.table.binarySearchHeader.nUnits - 1;\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid];\n            // special end of search value\n            if (seg.glyph === 0xffff) return null;\n            if (glyph < seg.glyph) max = mid - 1;else if (glyph > seg.glyph) min = mid + 1;else return seg.value;\n          }\n          return null;\n        }\n      case 8:\n        return this.table.values[glyph - this.table.firstGlyph];\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n  }\n  glyphsForValue(classValue) {\n    let res = [];\n    switch (this.table.version) {\n      case 2:\n      case 4:\n        for (let segment of this.table.segments) if (this.table.version === 2 && segment.value === classValue) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(segment.firstGlyph, segment.lastGlyph + 1));else {\n          for (let index = 0; index < segment.values.length; index++) if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);\n        }\n        break;\n      case 6:\n        for (let segment1 of this.table.segments) if (segment1.value === classValue) res.push(segment1.glyph);\n        break;\n      case 8:\n        for (let i = 0; i < this.table.values.length; i++) if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);\n        break;\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n    return res;\n  }\n  constructor(table) {\n    this.table = table;\n  }\n}\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $ff5ce077dae0f144$export$2e2bcd8739ae039.prototype, \"glyphsForValue\", null);\nconst $50c7aac9316f2948$var$START_OF_TEXT_STATE = 0;\nconst $50c7aac9316f2948$var$START_OF_LINE_STATE = 1;\nconst $50c7aac9316f2948$var$END_OF_TEXT_CLASS = 0;\nconst $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS = 1;\nconst $50c7aac9316f2948$var$DELETED_GLYPH_CLASS = 2;\nconst $50c7aac9316f2948$var$END_OF_LINE_CLASS = 3;\nconst $50c7aac9316f2948$var$DONT_ADVANCE = 0x4000;\nclass $50c7aac9316f2948$export$2e2bcd8739ae039 {\n  process(glyphs, reverse, processEntry) {\n    let currentState = $50c7aac9316f2948$var$START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n    let index = reverse ? glyphs.length - 1 : 0;\n    let dir = reverse ? -1 : 1;\n    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {\n      let glyph = null;\n      let classCode = $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS;\n      let shouldAdvance = true;\n      if (index === glyphs.length || index === -1) classCode = $50c7aac9316f2948$var$END_OF_TEXT_CLASS;else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) classCode = $50c7aac9316f2948$var$DELETED_GLYPH_CLASS;else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) classCode = $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS;\n        }\n      }\n      let row = this.stateTable.stateArray.getItem(currentState);\n      let entryIndex = row[classCode];\n      let entry = this.stateTable.entryTable.getItem(entryIndex);\n      if (classCode !== $50c7aac9316f2948$var$END_OF_TEXT_CLASS && classCode !== $50c7aac9316f2948$var$DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & $50c7aac9316f2948$var$DONT_ADVANCE);\n      }\n      currentState = entry.newState;\n      if (shouldAdvance) index += dir;\n    }\n    return glyphs;\n  }\n  /**\n  * Performs a depth-first traversal of the glyph strings\n  * represented by the state machine.\n  */\n  traverse(opts, state = 0, visited = new Set()) {\n    if (visited.has(state)) return;\n    visited.add(state);\n    let {\n      nClasses: nClasses,\n      stateArray: stateArray,\n      entryTable: entryTable\n    } = this.stateTable;\n    let row = stateArray.getItem(state);\n    // Skip predefined classes\n    for (let classCode = 4; classCode < nClasses; classCode++) {\n      let entryIndex = row[classCode];\n      let entry = entryTable.getItem(entryIndex);\n      // Try all glyphs in the class\n      for (let glyph of this.lookupTable.glyphsForValue(classCode)) {\n        if (opts.enter) opts.enter(glyph, entry);\n        if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);\n        if (opts.exit) opts.exit(glyph, entry);\n      }\n    }\n  }\n  constructor(stateTable) {\n    this.stateTable = stateTable;\n    this.lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(stateTable.classTable);\n  }\n}\n\n// indic replacement flags\nconst $55f71433a605c87d$var$MARK_FIRST = 0x8000;\nconst $55f71433a605c87d$var$MARK_LAST = 0x2000;\nconst $55f71433a605c87d$var$VERB = 0x000F;\n// contextual substitution and glyph insertion flag\nconst $55f71433a605c87d$var$SET_MARK = 0x8000;\n// ligature entry flags\nconst $55f71433a605c87d$var$SET_COMPONENT = 0x8000;\nconst $55f71433a605c87d$var$PERFORM_ACTION = 0x2000;\n// ligature action masks\nconst $55f71433a605c87d$var$LAST_MASK = 0x80000000;\nconst $55f71433a605c87d$var$STORE_MASK = 0x40000000;\nconst $55f71433a605c87d$var$OFFSET_MASK = 0x3FFFFFFF;\nconst $55f71433a605c87d$var$VERTICAL_ONLY = 0x800000;\nconst $55f71433a605c87d$var$REVERSE_DIRECTION = 0x400000;\nconst $55f71433a605c87d$var$HORIZONTAL_AND_VERTICAL = 0x200000;\n// glyph insertion flags\nconst $55f71433a605c87d$var$CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst $55f71433a605c87d$var$MARKED_IS_KASHIDA_LIKE = 0x1000;\nconst $55f71433a605c87d$var$CURRENT_INSERT_BEFORE = 0x0800;\nconst $55f71433a605c87d$var$MARKED_INSERT_BEFORE = 0x0400;\nconst $55f71433a605c87d$var$CURRENT_INSERT_COUNT = 0x03E0;\nconst $55f71433a605c87d$var$MARKED_INSERT_COUNT = 0x001F;\nclass $55f71433a605c87d$export$2e2bcd8739ae039 {\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:boolean}}\n  process(glyphs, features = {}) {\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n      // enable/disable the requested features\n      for (let feature of chain.features) {\n        let f;\n        if (f = features[feature.featureType]) {\n          if (f[feature.featureSetting]) {\n            flags &= feature.disableFlags;\n            flags |= feature.enableFlags;\n          } else if (f[feature.featureSetting] === false) {\n            flags |= ~feature.disableFlags;\n            flags &= ~feature.enableFlags;\n          }\n        }\n      }\n      for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);\n    }\n    // remove deleted glyphs\n    let index = glyphs.length - 1;\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) glyphs.splice(index, 1);\n      index--;\n    }\n    return glyphs;\n  }\n  processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n    let reverse = !!(this.subtable.coverage & $55f71433a605c87d$var$REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  }\n  getStateMachine(subtable) {\n    return new (0, $50c7aac9316f2948$export$2e2bcd8739ae039)(subtable.table.stateTable);\n  }\n  getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n      case 1:\n        return this.processContextualSubstitution;\n      case 2:\n        return this.processLigature;\n      case 4:\n        return this.processNoncontextualSubstitutions;\n      case 5:\n        return this.processGlyphInsertion;\n      default:\n        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n    }\n  }\n  processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & $55f71433a605c87d$var$MARK_FIRST) this.firstGlyph = index;\n    if (entry.flags & $55f71433a605c87d$var$MARK_LAST) this.lastGlyph = index;\n    $55f71433a605c87d$var$reorderGlyphs(this.glyphs, entry.flags & $55f71433a605c87d$var$VERB, this.firstGlyph, this.lastGlyph);\n  }\n  processContextualSubstitution(glyph, entry, index) {\n    let subsitutions = this.subtable.table.substitutionTable.items;\n    if (entry.markIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.markIndex);\n      let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n    }\n    if (entry.currentIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.currentIndex);\n      let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(lookup);\n      glyph = this.glyphs[index];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n    }\n    if (entry.flags & $55f71433a605c87d$var$SET_MARK) this.markedGlyph = index;\n  }\n  processLigature(glyph, entry, index) {\n    if (entry.flags & $55f71433a605c87d$var$SET_COMPONENT) this.ligatureStack.push(index);\n    if (entry.flags & $55f71433a605c87d$var$PERFORM_ACTION) {\n      let actions = this.subtable.table.ligatureActions;\n      let components = this.subtable.table.components;\n      let ligatureList = this.subtable.table.ligatureList;\n      let actionIndex = entry.action;\n      let last = false;\n      let ligatureIndex = 0;\n      let codePoints = [];\n      let ligatureGlyphs = [];\n      while (!last) {\n        let componentGlyph = this.ligatureStack.pop();\n        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n        let action = actions.getItem(actionIndex++);\n        last = !!(action & $55f71433a605c87d$var$LAST_MASK);\n        let store = !!(action & $55f71433a605c87d$var$STORE_MASK);\n        let offset = (action & $55f71433a605c87d$var$OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n        offset += this.glyphs[componentGlyph].id;\n        let component = components.getItem(offset);\n        ligatureIndex += component;\n        if (last || store) {\n          let ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n      }\n      // Put ligature glyph indexes back on the stack\n      this.ligatureStack.push(...ligatureGlyphs);\n    }\n  }\n  processNoncontextualSubstitutions(subtable, glyphs, index) {\n    let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(subtable.table.lookupTable);\n    for (index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.id !== 0xffff) {\n        let gid = lookupTable.lookup(glyph.id);\n        if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n  }\n  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    let insertions = [];\n    while (count--) {\n      let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n    if (!isBefore) glyphIndex++;\n    this.glyphs.splice(glyphIndex, 0, ...insertions);\n  }\n  processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & $55f71433a605c87d$var$SET_MARK) this.markedIndex = index;\n    if (entry.markedInsertIndex !== 0xffff) {\n      let count = (entry.flags & $55f71433a605c87d$var$MARKED_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & $55f71433a605c87d$var$MARKED_INSERT_BEFORE);\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n    if (entry.currentInsertIndex !== 0xffff) {\n      let count = (entry.flags & $55f71433a605c87d$var$CURRENT_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & $55f71433a605c87d$var$CURRENT_INSERT_BEFORE);\n      this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n    }\n  }\n  getSupportedFeatures() {\n    let features = [];\n    for (let chain of this.morx.chains) for (let feature of chain.features) features.push([feature.featureType, feature.featureSetting]);\n    return features;\n  }\n  generateInputs(gid) {\n    if (!this.inputCache) this.generateInputCache();\n    return this.inputCache[gid] || [];\n  }\n  generateInputCache() {\n    this.inputCache = {};\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n      for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);\n    }\n  }\n  generateInputsForSubtable(subtable) {\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) return;\n    let reverse = !!(subtable.coverage & $55f71433a605c87d$var$REVERSE_DIRECTION);\n    if (reverse) throw new Error(\"Reverse subtable, not supported.\");\n    this.subtable = subtable;\n    this.ligatureStack = [];\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n    let input = [];\n    let stack = [];\n    this.glyphs = [];\n    stateMachine.traverse({\n      enter: (glyph, entry) => {\n        let glyphs = this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: this.ligatureStack.slice()\n        });\n        // Add glyph to input and glyphs to process.\n        let g1 = this.font.getGlyph(glyph);\n        input.push(g1);\n        glyphs.push(input[input.length - 1]);\n        // Process ligature substitution\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n        // Add input to result if only one matching (non-deleted) glyph remains.\n        let count = 0;\n        let found = 0;\n        for (let i = 0; i < glyphs.length && count <= 1; i++) if (glyphs[i].id !== 0xffff) {\n          count++;\n          found = glyphs[i].id;\n        }\n        if (count === 1) {\n          let result = input.map(g => g.id);\n          let cache1 = this.inputCache[found];\n          if (cache1) cache1.push(result);else this.inputCache[found] = [result];\n        }\n      },\n      exit: () => {\n        ({\n          glyphs: this.glyphs,\n          ligatureStack: this.ligatureStack\n        } = stack.pop());\n        input.pop();\n      }\n    });\n  }\n  constructor(font) {\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n}\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $55f71433a605c87d$export$2e2bcd8739ae039.prototype, \"getStateMachine\", null);\n// swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\nfunction $55f71433a605c87d$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n  let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) end.reverse();\n  let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n  if (reverseA) start.reverse();\n  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n  return glyphs;\n}\nfunction $55f71433a605c87d$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  let length = lastGlyph - firstGlyph + 1;\n  switch (verb) {\n    case 0:\n      return glyphs;\n    case 1:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n    case 2:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n    case 3:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n    case 4:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n    case 5:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n    case 6:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n    case 7:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n    case 8:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n    case 9:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n    case 10:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n    case 11:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n    case 12:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n    case 13:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n    case 14:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n    case 15:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n    default:\n      throw new Error(`Unknown verb: ${verb}`);\n  }\n}\nclass $ba6dd74203be8728$export$2e2bcd8739ae039 {\n  substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === \"rtl\") glyphRun.glyphs.reverse();\n    this.morxProcessor.process(glyphRun.glyphs, $3b6302b64eccc32c$export$b813f7d2a1677c16(glyphRun.features));\n  }\n  getAvailableFeatures(script, language) {\n    return $3b6302b64eccc32c$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());\n  }\n  stringsForGlyph(gid) {\n    let glyphStrings = this.morxProcessor.generateInputs(gid);\n    let result = new Set();\n    for (let glyphs of glyphStrings) this._addStrings(glyphs, 0, result, \"\");\n    return result;\n  }\n  _addStrings(glyphs, index, strings, string) {\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n    for (let codePoint of codePoints) {\n      let s = string + String.fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);else strings.add(s);\n    }\n  }\n  constructor(font) {\n    this.font = font;\n    this.morxProcessor = new (0, $55f71433a605c87d$export$2e2bcd8739ae039)(font);\n    this.fallbackPosition = false;\n  }\n}\nclass $94d7a73bd2edfc9a$export$2e2bcd8739ae039 {\n  /**\n  * Adds the given features to the last stage.\n  * Ignores features that have already been applied.\n  */\n  _addFeatures(features, global) {\n    let stageIndex = this.stages.length - 1;\n    let stage = this.stages[stageIndex];\n    for (let feature of features) if (this.allFeatures[feature] == null) {\n      stage.push(feature);\n      this.allFeatures[feature] = stageIndex;\n      if (global) this.globalFeatures[feature] = true;\n    }\n  }\n  /**\n  * Add features to the last stage\n  */\n  add(arg, global = true) {\n    if (this.stages.length === 0) this.stages.push([]);\n    if (typeof arg === \"string\") arg = [arg];\n    if (Array.isArray(arg)) this._addFeatures(arg, global);else if (typeof arg === \"object\") {\n      this._addFeatures(arg.global || [], true);\n      this._addFeatures(arg.local || [], false);\n    } else throw new Error(\"Unsupported argument to ShapingPlan#add\");\n  }\n  /**\n  * Add a new stage\n  */\n  addStage(arg, global) {\n    if (typeof arg === \"function\") this.stages.push(arg, []);else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  }\n  setFeatureOverrides(features) {\n    if (Array.isArray(features)) this.add(features);else if (typeof features === \"object\") for (let tag in features) {\n      if (features[tag]) this.add(tag);else if (this.allFeatures[tag] != null) {\n        let stage = this.stages[this.allFeatures[tag]];\n        stage.splice(stage.indexOf(tag), 1);\n        delete this.allFeatures[tag];\n        delete this.globalFeatures[tag];\n      }\n    }\n  }\n  /**\n  * Assigns the global features to the given glyphs\n  */\n  assignGlobalFeatures(glyphs) {\n    for (let glyph of glyphs) for (let feature in this.globalFeatures) glyph.features[feature] = true;\n  }\n  /**\n  * Executes the planned stages using the given OTProcessor\n  */\n  process(processor, glyphs, positions) {\n    for (let stage of this.stages) {\n      if (typeof stage === \"function\") {\n        if (!positions) stage(this.font, glyphs, this);\n      } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);\n    }\n  }\n  constructor(font, script, direction) {\n    this.font = font;\n    this.script = script;\n    this.direction = direction;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n}\nconst $649970d87335b30f$var$VARIATION_FEATURES = [\"rvrn\"];\nconst $649970d87335b30f$var$COMMON_FEATURES = [\"ccmp\", \"locl\", \"rlig\", \"mark\", \"mkmk\"];\nconst $649970d87335b30f$var$FRACTIONAL_FEATURES = [\"frac\", \"numr\", \"dnom\"];\nconst $649970d87335b30f$var$HORIZONTAL_FEATURES = [\"calt\", \"clig\", \"liga\", \"rclt\", \"curs\", \"kern\"];\nconst $649970d87335b30f$var$VERTICAL_FEATURES = [\"vert\"];\nconst $649970d87335b30f$var$DIRECTIONAL_FEATURES = {\n  ltr: [\"ltra\", \"ltrm\"],\n  rtl: [\"rtla\", \"rtlm\"]\n};\nclass $649970d87335b30f$export$2e2bcd8739ae039 {\n  static plan(plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(plan);\n    this.planFeatures(plan);\n    this.planPostprocessing(plan, features);\n    // Assign the global features to all the glyphs\n    plan.assignGlobalFeatures(glyphs);\n    // Assign local features to glyphs\n    this.assignFeatures(plan, glyphs);\n  }\n  static planPreprocessing(plan) {\n    plan.add({\n      global: [...$649970d87335b30f$var$VARIATION_FEATURES, ...$649970d87335b30f$var$DIRECTIONAL_FEATURES[plan.direction]],\n      local: $649970d87335b30f$var$FRACTIONAL_FEATURES\n    });\n  }\n  static planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n  }\n  static planPostprocessing(plan, userFeatures) {\n    plan.add([...$649970d87335b30f$var$COMMON_FEATURES, ...$649970d87335b30f$var$HORIZONTAL_FEATURES]);\n    plan.setFeatureOverrides(userFeatures);\n  }\n  static assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (let i = 0; i < glyphs.length; i++) {\n      let glyph = glyphs[i];\n      if (glyph.codePoints[0] === 0x2044) {\n        let start = i;\n        let end = i + 1;\n        // Apply numerator\n        while (start > 0 && (0, $6uUbQ$isDigit)(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        }\n        // Apply denominator\n        while (end < glyphs.length && (0, $6uUbQ$isDigit)(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        }\n        // Apply fraction slash\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  }\n}\n(0, $6uUbQ$swchelperssrc_define_propertymjs)($649970d87335b30f$export$2e2bcd8739ae039, \"zeroMarkWidths\", \"AFTER_GPOS\");\nconst $764eb544bbe1ccf0$var$trie = new (0, $6uUbQ$unicodetrie)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"ABABAAAAAACgMQAAAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=\"));\nconst $764eb544bbe1ccf0$var$FEATURES = [\"isol\", \"fina\", \"fin2\", \"fin3\", \"medi\", \"med2\", \"init\"];\nconst $764eb544bbe1ccf0$var$ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  \"DALATH RISH\": 5,\n  Transparent: 6\n};\nconst $764eb544bbe1ccf0$var$ISOL = \"isol\";\nconst $764eb544bbe1ccf0$var$FINA = \"fina\";\nconst $764eb544bbe1ccf0$var$FIN2 = \"fin2\";\nconst $764eb544bbe1ccf0$var$FIN3 = \"fin3\";\nconst $764eb544bbe1ccf0$var$MEDI = \"medi\";\nconst $764eb544bbe1ccf0$var$MED2 = \"med2\";\nconst $764eb544bbe1ccf0$var$INIT = \"init\";\nconst $764eb544bbe1ccf0$var$NONE = null;\n// Each entry is [prevAction, curAction, nextState]\nconst $764eb544bbe1ccf0$var$STATE_TABLE = [\n//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n// State 0: prev was U,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 6]],\n// State 1: prev was R or ISOL/ALAPH,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$FIN2, 5], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 6]],\n// State 2: prev was D/L in ISOL form,  willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$INIT, $764eb544bbe1ccf0$var$FINA, 1], [$764eb544bbe1ccf0$var$INIT, $764eb544bbe1ccf0$var$FINA, 3], [$764eb544bbe1ccf0$var$INIT, $764eb544bbe1ccf0$var$FINA, 4], [$764eb544bbe1ccf0$var$INIT, $764eb544bbe1ccf0$var$FINA, 6]],\n// State 3: prev was D in FINA form,  willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$MEDI, $764eb544bbe1ccf0$var$FINA, 1], [$764eb544bbe1ccf0$var$MEDI, $764eb544bbe1ccf0$var$FINA, 3], [$764eb544bbe1ccf0$var$MEDI, $764eb544bbe1ccf0$var$FINA, 4], [$764eb544bbe1ccf0$var$MEDI, $764eb544bbe1ccf0$var$FINA, 6]],\n// State 4: prev was FINA ALAPH,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$MED2, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$MED2, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$MED2, $764eb544bbe1ccf0$var$FIN2, 5], [$764eb544bbe1ccf0$var$MED2, $764eb544bbe1ccf0$var$ISOL, 6]],\n// State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$ISOL, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$ISOL, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$ISOL, $764eb544bbe1ccf0$var$FIN2, 5], [$764eb544bbe1ccf0$var$ISOL, $764eb544bbe1ccf0$var$ISOL, 6]],\n// State 6: prev was DALATH/RISH,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$FIN3, 5], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 6]]];\nclass $764eb544bbe1ccf0$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n  static planFeatures(plan) {\n    plan.add([\"ccmp\", \"locl\"]);\n    for (let i = 0; i < $764eb544bbe1ccf0$var$FEATURES.length; i++) {\n      let feature = $764eb544bbe1ccf0$var$FEATURES[i];\n      plan.addStage(feature, false);\n    }\n    plan.addStage(\"mset\");\n  }\n  static assignFeatures(plan, glyphs) {\n    super.assignFeatures(plan, glyphs);\n    let prev = -1;\n    let state = 0;\n    let actions = [];\n    // Apply the state machine to map glyphs to features\n    for (let i = 0; i < glyphs.length; i++) {\n      let curAction, prevAction;\n      var glyph = glyphs[i];\n      let type = $764eb544bbe1ccf0$var$getShapingClass(glyph.codePoints[0]);\n      if (type === $764eb544bbe1ccf0$var$ShapingClasses.Transparent) {\n        actions[i] = $764eb544bbe1ccf0$var$NONE;\n        continue;\n      }\n      [prevAction, curAction, state] = $764eb544bbe1ccf0$var$STATE_TABLE[state][type];\n      if (prevAction !== $764eb544bbe1ccf0$var$NONE && prev !== -1) actions[prev] = prevAction;\n      actions[i] = curAction;\n      prev = i;\n    }\n    // Apply the chosen features to their respective glyphs\n    for (let index = 0; index < glyphs.length; index++) {\n      let feature;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) glyph.features[feature] = true;\n    }\n  }\n}\nfunction $764eb544bbe1ccf0$var$getShapingClass(codePoint) {\n  let res = $764eb544bbe1ccf0$var$trie.get(codePoint);\n  if (res) return res - 1;\n  let category = (0, $6uUbQ$getCategory)(codePoint);\n  if (category === \"Mn\" || category === \"Me\" || category === \"Cf\") return $764eb544bbe1ccf0$var$ShapingClasses.Transparent;\n  return $764eb544bbe1ccf0$var$ShapingClasses.Non_Joining;\n}\nclass $85d408632270248b$export$2e2bcd8739ae039 {\n  reset(options = {}, index = 0) {\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  }\n  get cur() {\n    return this.glyphs[this.index] || null;\n  }\n  shouldIgnore(glyph) {\n    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n  }\n  move(dir) {\n    this.index += dir;\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) this.index += dir;\n    if (0 > this.index || this.index >= this.glyphs.length) return null;\n    return this.glyphs[this.index];\n  }\n  next() {\n    return this.move(1);\n  }\n  prev() {\n    return this.move(-1);\n  }\n  peek(count = 1) {\n    let idx = this.index;\n    let res = this.increment(count);\n    this.index = idx;\n    return res;\n  }\n  peekIndex(count = 1) {\n    let idx = this.index;\n    this.increment(count);\n    let res = this.index;\n    this.index = idx;\n    return res;\n  }\n  increment(count = 1) {\n    let dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n    while (count--) this.move(dir);\n    return this.glyphs[this.index];\n  }\n  constructor(glyphs, options) {\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n}\nconst $a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS = [\"DFLT\", \"dflt\", \"latn\"];\nclass $a83b9c36aaa94fd3$export$2e2bcd8739ae039 {\n  findScript(script) {\n    if (this.table.scriptList == null) return null;\n    if (!Array.isArray(script)) script = [script];\n    for (let s of script) for (let entry of this.table.scriptList) {\n      if (entry.tag === s) return entry;\n    }\n    return null;\n  }\n  selectScript(script, language, direction) {\n    let changed = false;\n    let entry;\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) entry = this.findScript($a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS);\n      if (!entry) return this.scriptTag;\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n    if (!direction || direction !== this.direction) this.direction = direction || $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script);\n    if (language && language.length < 4) language += \" \".repeat(4 - language.length);\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n      for (let lang of this.script.langSysRecords) if (lang.tag === language) {\n        this.language = lang.langSys;\n        this.languageTag = lang.tag;\n        break;\n      }\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n      changed = true;\n    }\n    // Build a feature lookup table\n    if (changed) {\n      this.features = {};\n      if (this.language) for (let featureIndex of this.language.featureIndexes) {\n        let record = this.table.featureList[featureIndex];\n        let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n        this.features[record.tag] = substituteFeature || record.feature;\n      }\n    }\n    return this.scriptTag;\n  }\n  lookupsForFeatures(userFeatures = [], exclude) {\n    let lookups = [];\n    for (let tag of userFeatures) {\n      let feature = this.features[tag];\n      if (!feature) continue;\n      for (let lookupIndex of feature.lookupListIndexes) {\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n    lookups.sort((a, b) => a.index - b.index);\n    return lookups;\n  }\n  substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) return null;\n    let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    let substitutions = record.featureTableSubstitution.substitutions;\n    for (let substitution of substitutions) {\n      if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;\n    }\n    return null;\n  }\n  findVariationsIndex(coords) {\n    let variations = this.table.featureVariations;\n    if (!variations) return -1;\n    let records = variations.featureVariationRecords;\n    for (let i = 0; i < records.length; i++) {\n      let conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) return i;\n    }\n    return -1;\n  }\n  variationConditionsMatch(conditions, coords) {\n    return conditions.every(condition => {\n      let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  }\n  applyFeatures(userFeatures, glyphs, advances) {\n    let lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  }\n  applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new (0, $85d408632270248b$export$2e2bcd8739ae039)(glyphs);\n    for (let {\n      feature: feature,\n      lookup: lookup\n    } of lookups) {\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n        for (let table of lookup.subTables) {\n          let res = this.applyLookup(lookup.lookupType, table);\n          if (res) break;\n        }\n        this.glyphIterator.next();\n      }\n    }\n  }\n  applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  }\n  applyLookupList(lookupRecords) {\n    let options = this.glyphIterator.options;\n    let glyphIndex = this.glyphIterator.index;\n    for (let lookupRecord of lookupRecords) {\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex);\n      // Get the lookup and setup flags for subtables\n      let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n      // Apply lookup subtables until one matches\n      for (let table of lookup.subTables) {\n        if (this.applyLookup(lookup.lookupType, table)) break;\n      }\n    }\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  }\n  coverageIndex(coverage, glyph) {\n    if (glyph == null) glyph = this.glyphIterator.cur.id;\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n      case 2:\n        for (let range of coverage.rangeRecords) {\n          if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;\n        }\n        break;\n    }\n    return -1;\n  }\n  match(sequenceIndex, sequence, fn, matched) {\n    let pos = this.glyphIterator.index;\n    let glyph = this.glyphIterator.increment(sequenceIndex);\n    let idx = 0;\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) matched.push(this.glyphIterator.index);\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) return false;\n    return matched || true;\n  }\n  sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);\n  }\n  sequenceMatchIndices(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => {\n      // If the current feature doesn't apply to this glyph,\n      if (!(this.currentFeature in glyph.features)) return false;\n      return component === glyph.id;\n    }, []);\n  }\n  coverageSequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (coverage, glyph) => this.coverageIndex(coverage, glyph.id) >= 0);\n  }\n  getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1:\n        let i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];\n        break;\n      case 2:\n        for (let range of classDef.classRangeRecord) {\n          if (range.start <= glyph && glyph <= range.end) return range.class;\n        }\n        break;\n    }\n    return 0;\n  }\n  classSequenceMatches(sequenceIndex, sequence, classDef) {\n    return this.match(sequenceIndex, sequence, (classID, glyph) => classID === this.getClassID(glyph.id, classDef));\n  }\n  applyContext(table) {\n    let index, set;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) return false;\n        set = table.ruleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);\n        }\n        break;\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) return false;\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) return false;\n        set = table.classSet[index];\n        for (let rule1 of set) {\n          if (this.classSequenceMatches(1, rule1.classes, table.classDef)) return this.applyLookupList(rule1.lookupRecords);\n        }\n        break;\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);\n        break;\n    }\n    return false;\n  }\n  applyChainingContext(table) {\n    let index;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) return false;\n        let set = table.chainRuleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);\n        }\n        break;\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) return false;\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        let rules = table.chainClassSet[index];\n        if (!rules) return false;\n        for (let rule2 of rules) {\n          if (this.classSequenceMatches(-rule2.backtrack.length, rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + rule2.input.length, rule2.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule2.lookupRecords);\n        }\n        break;\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);\n        break;\n    }\n    return false;\n  }\n  constructor(font, table) {\n    this.font = font;\n    this.table = table;\n    this.script = null;\n    this.scriptTag = null;\n    this.language = null;\n    this.languageTag = null;\n    this.features = {};\n    this.lookups = {};\n    // Setup variation substitutions\n    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;\n    // initialize to default script + language\n    this.selectScript();\n    // current context (set by applyFeatures)\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n}\nclass $10e7b257e1a9a756$export$2e2bcd8739ae039 {\n  get id() {\n    return this._id;\n  }\n  set id(id) {\n    this._id = id;\n    this.substituted = true;\n    let GDEF = this._font.GDEF;\n    if (GDEF && GDEF.glyphClassDef) {\n      // TODO: clean this up\n      let classID = (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.glyphClassDef);\n      this.isBase = classID === 1;\n      this.isLigature = classID === 2;\n      this.isMark = classID === 3;\n      this.markAttachmentType = GDEF.markAttachClassDef ? (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n    } else {\n      this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, $6uUbQ$isMark));\n      this.isBase = !this.isMark;\n      this.isLigature = this.codePoints.length > 1;\n      this.markAttachmentType = 0;\n    }\n  }\n  copy() {\n    return new $10e7b257e1a9a756$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);\n  }\n  constructor(font, id, codePoints = [], features) {\n    this._font = font;\n    this.codePoints = codePoints;\n    this.id = id;\n    this.features = {};\n    if (Array.isArray(features)) for (let i = 0; i < features.length; i++) {\n      let feature = features[i];\n      this.features[feature] = true;\n    } else if (typeof features === \"object\") Object.assign(this.features, features);\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n}\nclass $e1c6bbc8cb416f8c$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n  static planFeatures(plan) {\n    plan.add([\"ljmo\", \"vjmo\", \"tjmo\"], false);\n  }\n  static assignFeatures(plan, glyphs) {\n    let state = 0;\n    let i = 0;\n    while (i < glyphs.length) {\n      let action;\n      let glyph = glyphs[i];\n      let code = glyph.codePoints[0];\n      let type = $e1c6bbc8cb416f8c$var$getType(code);\n      [action, state] = $e1c6bbc8cb416f8c$var$STATE_TABLE[state][type];\n      switch (action) {\n        case $e1c6bbc8cb416f8c$var$DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) i = $e1c6bbc8cb416f8c$var$decompose(glyphs, i, plan.font);\n          break;\n        case $e1c6bbc8cb416f8c$var$COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = $e1c6bbc8cb416f8c$var$compose(glyphs, i, plan.font);\n          break;\n        case $e1c6bbc8cb416f8c$var$TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          $e1c6bbc8cb416f8c$var$reorderToneMark(glyphs, i, plan.font);\n          break;\n        case $e1c6bbc8cb416f8c$var$INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = $e1c6bbc8cb416f8c$var$insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n      i++;\n    }\n  }\n}\n(0, $6uUbQ$swchelperssrc_define_propertymjs)($e1c6bbc8cb416f8c$export$2e2bcd8739ae039, \"zeroMarkWidths\", \"NONE\");\nconst $e1c6bbc8cb416f8c$var$HANGUL_BASE = 0xac00;\nconst $e1c6bbc8cb416f8c$var$HANGUL_END = 0xd7a4;\nconst $e1c6bbc8cb416f8c$var$HANGUL_COUNT = $e1c6bbc8cb416f8c$var$HANGUL_END - $e1c6bbc8cb416f8c$var$HANGUL_BASE + 1;\nconst $e1c6bbc8cb416f8c$var$L_BASE = 0x1100; // lead\nconst $e1c6bbc8cb416f8c$var$V_BASE = 0x1161; // vowel\nconst $e1c6bbc8cb416f8c$var$T_BASE = 0x11a7; // trail\nconst $e1c6bbc8cb416f8c$var$L_COUNT = 19;\nconst $e1c6bbc8cb416f8c$var$V_COUNT = 21;\nconst $e1c6bbc8cb416f8c$var$T_COUNT = 28;\nconst $e1c6bbc8cb416f8c$var$L_END = $e1c6bbc8cb416f8c$var$L_BASE + $e1c6bbc8cb416f8c$var$L_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$V_END = $e1c6bbc8cb416f8c$var$V_BASE + $e1c6bbc8cb416f8c$var$V_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$T_END = $e1c6bbc8cb416f8c$var$T_BASE + $e1c6bbc8cb416f8c$var$T_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$DOTTED_CIRCLE = 0x25cc;\nconst $e1c6bbc8cb416f8c$var$isL = code => 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\nconst $e1c6bbc8cb416f8c$var$isV = code => 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\nconst $e1c6bbc8cb416f8c$var$isT = code => 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\nconst $e1c6bbc8cb416f8c$var$isTone = code => 0x302e <= code && code <= 0x302f;\nconst $e1c6bbc8cb416f8c$var$isLVT = code => $e1c6bbc8cb416f8c$var$HANGUL_BASE <= code && code <= $e1c6bbc8cb416f8c$var$HANGUL_END;\nconst $e1c6bbc8cb416f8c$var$isLV = code => code - $e1c6bbc8cb416f8c$var$HANGUL_BASE < $e1c6bbc8cb416f8c$var$HANGUL_COUNT && (code - $e1c6bbc8cb416f8c$var$HANGUL_BASE) % $e1c6bbc8cb416f8c$var$T_COUNT === 0;\nconst $e1c6bbc8cb416f8c$var$isCombiningL = code => $e1c6bbc8cb416f8c$var$L_BASE <= code && code <= $e1c6bbc8cb416f8c$var$L_END;\nconst $e1c6bbc8cb416f8c$var$isCombiningV = code => $e1c6bbc8cb416f8c$var$V_BASE <= code && code <= $e1c6bbc8cb416f8c$var$V_END;\nconst $e1c6bbc8cb416f8c$var$isCombiningT = code => $e1c6bbc8cb416f8c$var$T_BASE + 1 && 1 <= code && code <= $e1c6bbc8cb416f8c$var$T_END;\n// Character categories\nconst $e1c6bbc8cb416f8c$var$X = 0; // Other character\nconst $e1c6bbc8cb416f8c$var$L = 1; // Leading consonant\nconst $e1c6bbc8cb416f8c$var$V = 2; // Medial vowel\nconst $e1c6bbc8cb416f8c$var$T = 3; // Trailing consonant\nconst $e1c6bbc8cb416f8c$var$LV = 4; // Composed <LV> syllable\nconst $e1c6bbc8cb416f8c$var$LVT = 5; // Composed <LVT> syllable\nconst $e1c6bbc8cb416f8c$var$M = 6; // Tone mark\n// This function classifies a character using the above categories.\nfunction $e1c6bbc8cb416f8c$var$getType(code) {\n  if ($e1c6bbc8cb416f8c$var$isL(code)) return $e1c6bbc8cb416f8c$var$L;\n  if ($e1c6bbc8cb416f8c$var$isV(code)) return $e1c6bbc8cb416f8c$var$V;\n  if ($e1c6bbc8cb416f8c$var$isT(code)) return $e1c6bbc8cb416f8c$var$T;\n  if ($e1c6bbc8cb416f8c$var$isLV(code)) return $e1c6bbc8cb416f8c$var$LV;\n  if ($e1c6bbc8cb416f8c$var$isLVT(code)) return $e1c6bbc8cb416f8c$var$LVT;\n  if ($e1c6bbc8cb416f8c$var$isTone(code)) return $e1c6bbc8cb416f8c$var$M;\n  return $e1c6bbc8cb416f8c$var$X;\n}\n// State machine actions\nconst $e1c6bbc8cb416f8c$var$NO_ACTION = 0;\nconst $e1c6bbc8cb416f8c$var$DECOMPOSE = 1;\nconst $e1c6bbc8cb416f8c$var$COMPOSE = 2;\nconst $e1c6bbc8cb416f8c$var$TONE_MARK = 4;\nconst $e1c6bbc8cb416f8c$var$INVALID = 5;\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nconst $e1c6bbc8cb416f8c$var$STATE_TABLE = [\n//       X                 L                 V                T                  LV                LVT               M\n// State 0: start state\n[[$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 1], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 2], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 3], [$e1c6bbc8cb416f8c$var$INVALID, 0]],\n// State 1: <L>\n[[$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 1], [$e1c6bbc8cb416f8c$var$COMPOSE, 2], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 2], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 3], [$e1c6bbc8cb416f8c$var$INVALID, 0]],\n// State 2: <L,V> or <LV>\n[[$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 1], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$COMPOSE, 3], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 2], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 3], [$e1c6bbc8cb416f8c$var$TONE_MARK, 0]],\n// State 3: <L,V,T> or <LVT>\n[[$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 1], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 2], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 3], [$e1c6bbc8cb416f8c$var$TONE_MARK, 0]]];\nfunction $e1c6bbc8cb416f8c$var$getGlyph(font, code, features) {\n  return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, font.glyphForCodePoint(code).id, [code], features);\n}\nfunction $e1c6bbc8cb416f8c$var$decompose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyph.codePoints[0];\n  let s = code - $e1c6bbc8cb416f8c$var$HANGUL_BASE;\n  let t = $e1c6bbc8cb416f8c$var$T_BASE + s % $e1c6bbc8cb416f8c$var$T_COUNT;\n  s = s / $e1c6bbc8cb416f8c$var$T_COUNT | 0;\n  let l = $e1c6bbc8cb416f8c$var$L_BASE + s / $e1c6bbc8cb416f8c$var$V_COUNT | 0;\n  let v = $e1c6bbc8cb416f8c$var$V_BASE + s % $e1c6bbc8cb416f8c$var$V_COUNT;\n  // Don't decompose if all of the components are not available\n  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $e1c6bbc8cb416f8c$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i;\n  // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n  let ljmo = $e1c6bbc8cb416f8c$var$getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n  let vjmo = $e1c6bbc8cb416f8c$var$getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n  let insert = [ljmo, vjmo];\n  if (t > $e1c6bbc8cb416f8c$var$T_BASE) {\n    let tjmo = $e1c6bbc8cb416f8c$var$getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n  glyphs.splice(i, 1, ...insert);\n  return i + insert.length - 1;\n}\nfunction $e1c6bbc8cb416f8c$var$compose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  let type = $e1c6bbc8cb416f8c$var$getType(code);\n  let prev = glyphs[i - 1].codePoints[0];\n  let prevType = $e1c6bbc8cb416f8c$var$getType(prev);\n  // Figure out what type of syllable we're dealing with\n  let lv, ljmo, vjmo, tjmo;\n  if (prevType === $e1c6bbc8cb416f8c$var$LV && type === $e1c6bbc8cb416f8c$var$T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === $e1c6bbc8cb416f8c$var$V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n    let l = ljmo.codePoints[0];\n    let v = vjmo.codePoints[0];\n    // Make sure L and V are combining characters\n    if ($e1c6bbc8cb416f8c$var$isCombiningL(l) && $e1c6bbc8cb416f8c$var$isCombiningV(v)) lv = $e1c6bbc8cb416f8c$var$HANGUL_BASE + ((l - $e1c6bbc8cb416f8c$var$L_BASE) * $e1c6bbc8cb416f8c$var$V_COUNT + (v - $e1c6bbc8cb416f8c$var$V_BASE)) * $e1c6bbc8cb416f8c$var$T_COUNT;\n  }\n  let t = tjmo && tjmo.codePoints[0] || $e1c6bbc8cb416f8c$var$T_BASE;\n  if (lv != null && (t === $e1c6bbc8cb416f8c$var$T_BASE || $e1c6bbc8cb416f8c$var$isCombiningT(t))) {\n    let s = lv + (t - $e1c6bbc8cb416f8c$var$T_BASE);\n    // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n    if (font.hasGlyphForCodePoint(s)) {\n      let del = prevType === $e1c6bbc8cb416f8c$var$V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, $e1c6bbc8cb416f8c$var$getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  }\n  // Didn't compose (either a non-combining component or unsupported by font).\n  if (ljmo) ljmo.features.ljmo = true;\n  if (vjmo) vjmo.features.vjmo = true;\n  if (tjmo) tjmo.features.tjmo = true;\n  if (prevType === $e1c6bbc8cb416f8c$var$LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    $e1c6bbc8cb416f8c$var$decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n  return i;\n}\nfunction $e1c6bbc8cb416f8c$var$getLength(code) {\n  switch ($e1c6bbc8cb416f8c$var$getType(code)) {\n    case $e1c6bbc8cb416f8c$var$LV:\n    case $e1c6bbc8cb416f8c$var$LVT:\n      return 1;\n    case $e1c6bbc8cb416f8c$var$V:\n      return 2;\n    case $e1c6bbc8cb416f8c$var$T:\n      return 3;\n  }\n}\nfunction $e1c6bbc8cb416f8c$var$reorderToneMark(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  // Move tone mark to the beginning of the previous syllable, unless it is zero width\n  if (font.glyphForCodePoint(code).advanceWidth === 0) return;\n  let prev = glyphs[i - 1].codePoints[0];\n  let len = $e1c6bbc8cb416f8c$var$getLength(prev);\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\nfunction $e1c6bbc8cb416f8c$var$insertDottedCircle(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  if (font.hasGlyphForCodePoint($e1c6bbc8cb416f8c$var$DOTTED_CIRCLE)) {\n    let dottedCircle = $e1c6bbc8cb416f8c$var$getGlyph(font, $e1c6bbc8cb416f8c$var$DOTTED_CIRCLE, glyph.features);\n    // If the tone mark is zero width, insert the dotted circle before, otherwise after\n    let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n  return i;\n}\nvar $4b0735ca6c692ea5$exports = {};\n$4b0735ca6c692ea5$exports = JSON.parse('{\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\"accepting\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"symbol_cluster\"],[],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"standalone_cluster\"]]}');\nvar $aa333a9607471296$exports = {};\n$aa333a9607471296$exports = JSON.parse('{\"categories\":[\"O\",\"IND\",\"S\",\"GB\",\"B\",\"FM\",\"CGJ\",\"VMAbv\",\"VMPst\",\"VAbv\",\"VPst\",\"CMBlw\",\"VPre\",\"VBlw\",\"H\",\"VMBlw\",\"CMAbv\",\"MBlw\",\"CS\",\"R\",\"SUB\",\"MPst\",\"MPre\",\"FAbv\",\"FPst\",\"FBlw\",\"SMAbv\",\"SMBlw\",\"VMPre\",\"ZWNJ\",\"ZWJ\",\"WJ\",\"VS\",\"N\",\"HN\",\"MAbv\"],\"decompositions\":{\"2507\":[2503,2494],\"2508\":[2503,2519],\"2888\":[2887,2902],\"2891\":[2887,2878],\"2892\":[2887,2903],\"3018\":[3014,3006],\"3019\":[3015,3006],\"3020\":[3014,3031],\"3144\":[3142,3158],\"3264\":[3263,3285],\"3271\":[3270,3285],\"3272\":[3270,3286],\"3274\":[3270,3266],\"3275\":[3270,3266,3285],\"3402\":[3398,3390],\"3403\":[3399,3390],\"3404\":[3398,3415],\"3546\":[3545,3530],\"3548\":[3545,3535],\"3549\":[3545,3535,3530],\"3550\":[3545,3551],\"3635\":[3661,3634],\"3763\":[3789,3762],\"3955\":[3953,3954],\"3957\":[3953,3956],\"3958\":[4018,3968],\"3959\":[4018,3953,3968],\"3960\":[4019,3968],\"3961\":[4019,3953,3968],\"3969\":[3953,3968],\"6971\":[6970,6965],\"6973\":[6972,6965],\"6976\":[6974,6965],\"6977\":[6975,6965],\"6979\":[6978,6965],\"69934\":[69937,69927],\"69935\":[69938,69927],\"70475\":[70471,70462],\"70476\":[70471,70487],\"70843\":[70841,70842],\"70844\":[70841,70832],\"70846\":[70841,70845],\"71098\":[71096,71087],\"71099\":[71097,71087]},\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\"accepting\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"virama_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"number_joiner_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"numeral_cluster\"]]}');\nconst $90a9d3398ee54fe5$export$a513ea61a7bee91c = {\n  X: 1,\n  C: 2,\n  V: 4,\n  N: 8,\n  H: 16,\n  ZWNJ: 32,\n  ZWJ: 64,\n  M: 128,\n  SM: 256,\n  VD: 512,\n  A: 1024,\n  Placeholder: 2048,\n  Dotted_Circle: 4096,\n  RS: 8192,\n  Coeng: 16384,\n  Repha: 32768,\n  Ra: 65536,\n  CM: 131072,\n  Symbol: 262144 // Avagraha, etc that take marks (SM,A,VD).\n};\nconst $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0 = {\n  Start: 1,\n  Ra_To_Become_Reph: 2,\n  Pre_M: 4,\n  Pre_C: 8,\n  Base_C: 16,\n  After_Main: 32,\n  Above_C: 64,\n  Before_Sub: 128,\n  Below_C: 256,\n  After_Sub: 512,\n  Before_Post: 1024,\n  Post_C: 2048,\n  After_Post: 4096,\n  Final_C: 8192,\n  SMVD: 16384,\n  End: 32768\n};\nconst $90a9d3398ee54fe5$export$8519deaa7de2b07 = $90a9d3398ee54fe5$export$a513ea61a7bee91c.C | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Ra | $90a9d3398ee54fe5$export$a513ea61a7bee91c.CM | $90a9d3398ee54fe5$export$a513ea61a7bee91c.V | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Placeholder | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Dotted_Circle;\nconst $90a9d3398ee54fe5$export$bbcd928767338e0d = $90a9d3398ee54fe5$export$a513ea61a7bee91c.ZWJ | $90a9d3398ee54fe5$export$a513ea61a7bee91c.ZWNJ;\nconst $90a9d3398ee54fe5$export$ca9599b2a300afc = $90a9d3398ee54fe5$export$a513ea61a7bee91c.H | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Coeng;\nconst $90a9d3398ee54fe5$export$e99d119da76a0fc5 = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: \"Implicit\",\n    blwfMode: \"Pre_And_Post\"\n  },\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: \"Implicit\",\n    blwfMode: \"Pre_And_Post\"\n  },\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Sub,\n    rephMode: \"Implicit\",\n    blwfMode: \"Pre_And_Post\"\n  },\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Sub,\n    rephMode: \"Implicit\",\n    blwfMode: \"Pre_And_Post\"\n  },\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: \"Implicit\",\n    blwfMode: \"Pre_And_Post\"\n  },\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Main,\n    rephMode: \"Implicit\",\n    blwfMode: \"Pre_And_Post\"\n  },\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: \"Implicit\",\n    blwfMode: \"Pre_And_Post\"\n  },\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: \"Explicit\",\n    blwfMode: \"Post_Only\"\n  },\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: \"Implicit\",\n    blwfMode: \"Post_Only\"\n  },\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: \"Last\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Main,\n    rephMode: \"Log_Repha\",\n    blwfMode: \"Pre_And_Post\"\n  },\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: \"First\",\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,\n    rephMode: \"Vis_Repha\",\n    blwfMode: \"Pre_And_Post\"\n  }\n};\nconst $90a9d3398ee54fe5$export$f647c9cfdd77d95a = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\nconst {\n  decompositions: $7826f90f6f0cecc9$var$decompositions\n} = (0, ( /*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports)));\nconst $7826f90f6f0cecc9$var$trie = new (0, $6uUbQ$unicodetrie)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"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\"));\nconst $7826f90f6f0cecc9$var$stateMachine = new (0, $6uUbQ$dfa)((0, ( /*@__PURE__*/$parcel$interopDefault($4b0735ca6c692ea5$exports))));\nclass $7826f90f6f0cecc9$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n  static planFeatures(plan) {\n    plan.addStage($7826f90f6f0cecc9$var$setupSyllables);\n    plan.addStage([\"locl\", \"ccmp\"]);\n    plan.addStage($7826f90f6f0cecc9$var$initialReordering);\n    plan.addStage(\"nukt\");\n    plan.addStage(\"akhn\");\n    plan.addStage(\"rphf\", false);\n    plan.addStage(\"rkrf\");\n    plan.addStage(\"pref\", false);\n    plan.addStage(\"blwf\", false);\n    plan.addStage(\"abvf\", false);\n    plan.addStage(\"half\", false);\n    plan.addStage(\"pstf\", false);\n    plan.addStage(\"vatu\");\n    plan.addStage(\"cjct\");\n    plan.addStage(\"cfar\", false);\n    plan.addStage($7826f90f6f0cecc9$var$finalReordering);\n    plan.addStage({\n      local: [\"init\"],\n      global: [\"pres\", \"abvs\", \"blws\", \"psts\", \"haln\", \"dist\", \"abvm\", \"blwm\", \"calt\", \"clig\"]\n    });\n    // Setup the indic config for the selected script\n    plan.unicodeScript = $130d1a642ebcd2b7$export$ce50e82f12a827a4(plan.script);\n    plan.indicConfig = (0, $90a9d3398ee54fe5$export$e99d119da76a0fc5)[plan.unicodeScript] || (0, $90a9d3398ee54fe5$export$e99d119da76a0fc5).Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== \"2\";\n    // TODO: turn off kern (Khmer) and liga features.\n  }\n  static assignFeatures(plan, glyphs) {\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      let d = (0, $90a9d3398ee54fe5$export$f647c9cfdd77d95a)[codepoint] || $7826f90f6f0cecc9$var$decompositions[codepoint];\n      if (d) {\n        let decomposed = d.map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\n(0, $6uUbQ$swchelperssrc_define_propertymjs)($7826f90f6f0cecc9$export$2e2bcd8739ae039, \"zeroMarkWidths\", \"NONE\");\nfunction $7826f90f6f0cecc9$var$indicCategory(glyph) {\n  return $7826f90f6f0cecc9$var$trie.get(glyph.codePoints[0]) >> 8;\n}\nfunction $7826f90f6f0cecc9$var$indicPosition(glyph) {\n  return 1 << ($7826f90f6f0cecc9$var$trie.get(glyph.codePoints[0]) & 0xff);\n}\nclass $7826f90f6f0cecc9$var$IndicInfo {\n  constructor(category, position, syllableType, syllable) {\n    this.category = category;\n    this.position = position;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\nfunction $7826f90f6f0cecc9$var$setupSyllables(font, glyphs) {\n  let syllable = 0;\n  let last = 0;\n  for (let [start, end, tags] of $7826f90f6f0cecc9$var$stateMachine.match(glyphs.map($7826f90f6f0cecc9$var$indicCategory))) {\n    if (start > last) {\n      ++syllable;\n      for (let i = last; i < start; i++) glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).X, (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).End, \"non_indic_cluster\", syllable);\n    }\n    ++syllable;\n    // Create shaper info\n    for (let i = start; i <= end; i++) glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo(1 << $7826f90f6f0cecc9$var$indicCategory(glyphs[i]), $7826f90f6f0cecc9$var$indicPosition(glyphs[i]), tags[0], syllable);\n    last = end + 1;\n  }\n  if (last < glyphs.length) {\n    ++syllable;\n    for (let i = last; i < glyphs.length; i++) glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).X, (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).End, \"non_indic_cluster\", syllable);\n  }\n}\nfunction $7826f90f6f0cecc9$var$isConsonant(glyph) {\n  return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$8519deaa7de2b07);\n}\nfunction $7826f90f6f0cecc9$var$isJoiner(glyph) {\n  return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$bbcd928767338e0d);\n}\nfunction $7826f90f6f0cecc9$var$isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$ca9599b2a300afc);\n}\nfunction $7826f90f6f0cecc9$var$wouldSubstitute(glyphs, feature) {\n  for (let glyph of glyphs) glyph.features = {\n    [feature]: true\n  };\n  let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n  return glyphs.length === 1;\n}\nfunction $7826f90f6f0cecc9$var$consonantPosition(font, consonant, virama) {\n  let glyphs = [virama, consonant, virama];\n  if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), \"blwf\") || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), \"blwf\")) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C;else if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), \"pstf\") || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), \"pstf\")) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C;else if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), \"pref\") || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), \"pref\")) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C;\n  return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n}\nfunction $7826f90f6f0cecc9$var$initialReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  let virama = font.glyphForCodePoint(indicConfig.virama).id;\n  if (virama) {\n    let info = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, virama, [indicConfig.virama]);\n    for (let i = 0; i < glyphs.length; i++) if (glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) glyphs[i].shaperInfo.position = $7826f90f6f0cecc9$var$consonantPosition(font, glyphs[i].copy(), info);\n  }\n  for (let start = 0, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, start)) {\n    let {\n      category: category,\n      syllableType: syllableType\n    } = glyphs[start].shaperInfo;\n    if (syllableType === \"symbol_cluster\" || syllableType === \"non_indic_cluster\") continue;\n    if (syllableType === \"broken_cluster\" && dottedCircle) {\n      let g = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo(1 << $7826f90f6f0cecc9$var$indicCategory(g), $7826f90f6f0cecc9$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);\n      // Insert after possible Repha.\n      let i = start;\n      while (i < end && glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha) i++;\n      glyphs.splice(i++, 0, g);\n      end++;\n    }\n    // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n    let base = end;\n    let limit = start;\n    let hasReph = false;\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    if (indicConfig.rephPos !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === \"Implicit\" && !$7826f90f6f0cecc9$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === \"Explicit\" && glyphs[start + 2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ)) {\n      // See if it matches the 'rphf' feature.\n      let g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n      if ($7826f90f6f0cecc9$var$wouldSubstitute(g.slice(0, 2), \"rphf\") || indicConfig.rephMode === \"Explicit\" && $7826f90f6f0cecc9$var$wouldSubstitute(g, \"rphf\")) {\n        limit += 2;\n        while (limit < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[limit])) limit++;\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === \"Log_Repha\" && glyphs[start].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha) {\n      limit++;\n      while (limit < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[limit])) limit++;\n      base = start;\n      hasReph = true;\n    }\n    switch (indicConfig.basePos) {\n      case \"Last\":\n        {\n          // starting from the end of the syllable, move backwards\n          let i = end;\n          let seenBelow = false;\n          do {\n            let info = glyphs[--i].shaperInfo;\n            // until a consonant is found\n            if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) {\n              // that does not have a below-base or post-base form\n              // (post-base forms have to follow below-base forms),\n              if (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C && (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C || seenBelow)) {\n                base = i;\n                break;\n              }\n              // or that is not a pre-base reordering Ra,\n              //\n              // IMPLEMENTATION NOTES:\n              //\n              // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n              // by the logic above already.\n              //\n              // or arrive at the first consonant. The consonant stopped at will\n              // be the base.\n              if (info.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C) seenBelow = true;\n              base = i;\n            } else if (start < i && info.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ && glyphs[i - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) break;\n          } while (i > limit);\n          break;\n        }\n      case \"First\":\n        // The first consonant is always the base.\n        base = start;\n        // Mark all subsequent consonants as below.\n        for (let i = base + 1; i < end; i++) if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C;\n    }\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n    if (hasReph && base === start && limit - base <= 2) hasReph = false;\n    // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n    // Reorder characters\n    for (let i1 = start; i1 < base; i1++) {\n      let info = glyphs[i1].shaperInfo;\n      info.position = Math.min((0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_C, info.position);\n    }\n    if (base < end) glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n    // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n    for (let i2 = base + 1; i2 < end; i2++) if (glyphs[i2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n      for (let j = i2 + 1; j < end; j++) if ($7826f90f6f0cecc9$var$isConsonant(glyphs[j])) {\n        glyphs[j].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Final_C;\n        break;\n      }\n      break;\n    }\n    // Handle beginning Ra\n    if (hasReph) glyphs[start].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph;\n    // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n    if (plan.isOldSpec) {\n      let disallowDoubleHalants = plan.unicodeScript !== \"Malayalam\";\n      for (let i = base + 1; i < end; i++) if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) {\n        let j;\n        for (j = end - 1; j > i; j--) {\n          if ($7826f90f6f0cecc9$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) break;\n        }\n        if (glyphs[j].shaperInfo.category !== (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && j > i) {\n          // Move Halant to after last consonant.\n          let t = glyphs[i];\n          glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n          glyphs[j] = t;\n        }\n        break;\n      }\n    }\n    // Attach misc marks to previous char to move with them.\n    let lastPos = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Start;\n    for (let i3 = start; i3 < end; i3++) {\n      let info = glyphs[i3].shaperInfo;\n      if (info.category & ((0, $90a9d3398ee54fe5$export$bbcd928767338e0d) | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).N | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).RS | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).CM | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc) & info.category)) {\n        info.position = lastPos;\n        if (info.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && info.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (let j = i3; j > start; j--) if (glyphs[j - 1].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n            info.position = glyphs[j - 1].shaperInfo.position;\n            break;\n          }\n        }\n      } else if (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) lastPos = info.position;\n    }\n    // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n    let last = base;\n    for (let i4 = base + 1; i4 < end; i4++) {\n      if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i4])) {\n        for (let j = last + 1; j < i4; j++) if (glyphs[j].shaperInfo.position < (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) glyphs[j].shaperInfo.position = glyphs[i4].shaperInfo.position;\n        last = i4;\n      } else if (glyphs[i4].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) last = i4;\n    }\n    let arr = glyphs.slice(start, end);\n    arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);\n    glyphs.splice(start, arr.length, ...arr);\n    // Find base again\n    for (let i5 = start; i5 < end; i5++) if (glyphs[i5].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) {\n      base = i5;\n      break;\n    }\n    // Setup features now\n    // Reph\n    for (let i6 = start; i6 < end && glyphs[i6].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph; i6++) glyphs[i6].features.rphf = true;\n    // Pre-base\n    let blwf = !plan.isOldSpec && indicConfig.blwfMode === \"Pre_And_Post\";\n    for (let i7 = start; i7 < base; i7++) {\n      glyphs[i7].features.half = true;\n      if (blwf) glyphs[i7].features.blwf = true;\n    }\n    // Post-base\n    for (let i8 = base + 1; i8 < end; i8++) {\n      glyphs[i8].features.abvf = true;\n      glyphs[i8].features.pstf = true;\n      glyphs[i8].features.blwf = true;\n    }\n    if (plan.isOldSpec && plan.unicodeScript === \"Devanagari\") {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (let i = start; i + 1 < base; i++) if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Ra && glyphs[i + 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ)) {\n        glyphs[i].features.blwf = true;\n        glyphs[i + 1].features.blwf = true;\n      }\n    }\n    let prefLen = 2;\n    if (features.pref && base + prefLen < end)\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (let i9 = base + 1; i9 + prefLen - 1 < end; i9++) {\n        let g = [glyphs[i9].copy(), glyphs[i9 + 1].copy()];\n        if ($7826f90f6f0cecc9$var$wouldSubstitute(g, \"pref\")) {\n          for (let j = 0; j < prefLen; j++) glyphs[i9++].features.pref = true;\n          // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n          if (features.cfar) for (; i9 < end; i9++) glyphs[i9].features.cfar = true;\n          break;\n        }\n      }\n    // Apply ZWJ/ZWNJ effects\n    for (let i10 = start + 1; i10 < end; i10++) if ($7826f90f6f0cecc9$var$isJoiner(glyphs[i10])) {\n      let nonJoiner = glyphs[i10].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWNJ;\n      let j = i10;\n      do {\n        j--;\n        // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n        // being there, since we don't skip them for the CJCT\n        // feature (ie. F_MANUAL_ZWJ)\n        // A ZWNJ disables HALF.\n        if (nonJoiner) delete glyphs[j].features.half;\n      } while (j > start && !$7826f90f6f0cecc9$var$isConsonant(glyphs[j]));\n    }\n  }\n}\nfunction $7826f90f6f0cecc9$var$finalReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n  for (let start = 0, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n    let tryPref = !!features.pref;\n    // Find base again\n    let base = start;\n    for (; base < end; base++) if (glyphs[base].shaperInfo.position >= (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) {\n      if (tryPref && base + 1 < end) {\n        for (let i = base + 1; i < end; i++) if (glyphs[i].features.pref) {\n          if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n            // Ok, this was a 'pref' candidate but didn't form any.\n            // Base is around here...\n            base = i;\n            while (base < end && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[base])) base++;\n            glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).BASE_C;\n            tryPref = false;\n          }\n          break;\n        }\n      }\n      // For Malayalam, skip over unformed below- (but NOT post-) forms.\n      if (plan.unicodeScript === \"Malayalam\") for (let i = base + 1; i < end; i++) {\n        while (i < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[i])) i++;\n        if (i === end || !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[i])) break;\n        i++; // Skip halant.\n        while (i < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[i])) i++;\n        if (i < end && $7826f90f6f0cecc9$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C) {\n          base = i;\n          glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n        }\n      }\n      if (start < base && glyphs[base].shaperInfo.position > (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) base--;\n      break;\n    }\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ) base--;\n    if (base < end) while (start < base && glyphs[base].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).N | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc))) base--;\n    // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n    if (start + 1 < end && start < base) {\n      // If we lost track of base, alas, position before last thingy.\n      let newPos = base === end ? base - 2 : base - 1;\n      // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n      if (plan.unicodeScript !== \"Malayalam\" && plan.unicodeScript !== \"Tamil\") {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc)))) newPos--;\n        // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n        if ($7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M)\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          {\n            if (newPos + 1 < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[newPos + 1])) newPos++;\n          } else newPos = start; // No move.\n      }\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n        // Now go see if there's actually any matras...\n        for (let i = newPos; i > start; i--) if (glyphs[i - 1].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n          let oldPos = i - 1;\n          if (oldPos < base && base <= newPos) base--;\n          let tmp = glyphs[oldPos];\n          glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n          glyphs[newPos] = tmp;\n          newPos--;\n        }\n      }\n    }\n    // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n    if (start + 1 < end && glyphs[start].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && glyphs[start].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n      let newRephPos;\n      let rephPos = indicConfig.rephPos;\n      let found = false;\n      // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n      if (rephPos !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n        while (newRephPos < base && !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;\n        if (newRephPos < base && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && $7826f90f6f0cecc9$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n          found = true;\n        }\n        // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n        if (!found && rephPos === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Main) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Main) newRephPos++;\n          found = newRephPos < end;\n        }\n        // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n        if (!found && rephPos === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Sub) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ((0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C | (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Post | (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD))) newRephPos++;\n          found = newRephPos < end;\n        }\n      }\n      //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n        while (newRephPos < base && !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;\n        if (newRephPos < base && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && $7826f90f6f0cecc9$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n          found = true;\n        }\n      }\n      // 6. Otherwise, reorder reph to the end of the syllable.\n      if (!found) {\n        newRephPos = end - 1;\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) newRephPos--;\n        // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n        if ($7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          for (let i = base + 1; i < newRephPos; i++) if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) newRephPos--;\n        }\n      }\n      let reph = glyphs[start];\n      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n      glyphs[newRephPos] = reph;\n      if (start < base && base <= newRephPos) base--;\n    }\n    // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n    if (tryPref && base + 1 < end) {\n      for (let i = base + 1; i < end; i++) if (glyphs[i].features.pref) {\n        // 1. Only reorder a glyph produced by substitution during application\n        //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n        //    the feature generally but block it in certain contexts.)\n        // Note: We just check that something got substituted.  We don't check that\n        // the <pref> feature actually did it...\n        //\n        // Reorder pref only if it ligated.\n        if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n          // 2. Try to find a target position the same way as for pre-base matra.\n          //    If it is found, reorder pre-base consonant glyph.\n          //\n          // 3. If position is not found, reorder immediately before main\n          //    consonant.\n          let newPos = base;\n          // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n          // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n          // We want to position matra after them.\n          if (plan.unicodeScript !== \"Malayalam\" && plan.unicodeScript !== \"Tamil\") {\n            while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc)))) newPos--;\n            // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n            // split matra, it should be reordered to *before* the left part of such matra.\n            if (newPos > start && glyphs[newPos - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n              let oldPos = i;\n              for (let j = base + 1; j < oldPos; j++) if (glyphs[j].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n                newPos--;\n                break;\n              }\n            }\n          }\n          if (newPos > start && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newPos - 1]))\n            // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n            {\n              if (newPos < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[newPos])) newPos++;\n            }\n          let oldPos = i;\n          let tmp = glyphs[oldPos];\n          glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n          glyphs[newPos] = tmp;\n          if (newPos <= base && base < oldPos) base++;\n        }\n        break;\n      }\n    }\n    // Apply 'init' to the Left Matra if it's a word start.\n    if (glyphs[start].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M && (!start || !/Cf|Mn/.test((0, $6uUbQ$getCategory)(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;\n  }\n}\nfunction $7826f90f6f0cecc9$var$nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\nconst {\n  categories: $7ab494fe977143c6$var$categories,\n  decompositions: $7ab494fe977143c6$var$decompositions\n} = (0, ( /*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports)));\nconst $7ab494fe977143c6$var$trie = new (0, $6uUbQ$unicodetrie)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"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\"));\nconst $7ab494fe977143c6$var$stateMachine = new (0, $6uUbQ$dfa)((0, ( /*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports))));\nclass $7ab494fe977143c6$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n  static planFeatures(plan) {\n    plan.addStage($7ab494fe977143c6$var$setupSyllables);\n    // Default glyph pre-processing group\n    plan.addStage([\"locl\", \"ccmp\", \"nukt\", \"akhn\"]);\n    // Reordering group\n    plan.addStage($7ab494fe977143c6$var$clearSubstitutionFlags);\n    plan.addStage([\"rphf\"], false);\n    plan.addStage($7ab494fe977143c6$var$recordRphf);\n    plan.addStage($7ab494fe977143c6$var$clearSubstitutionFlags);\n    plan.addStage([\"pref\"]);\n    plan.addStage($7ab494fe977143c6$var$recordPref);\n    // Orthographic unit shaping group\n    plan.addStage([\"rkrf\", \"abvf\", \"blwf\", \"half\", \"pstf\", \"vatu\", \"cjct\"]);\n    plan.addStage($7ab494fe977143c6$var$reorder);\n    // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n    // Standard topographic presentation and positional feature application\n    plan.addStage([\"abvs\", \"blws\", \"pres\", \"psts\", \"dist\", \"abvm\", \"blwm\"]);\n  }\n  static assignFeatures(plan, glyphs) {\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      if ($7ab494fe977143c6$var$decompositions[codepoint]) {\n        let decomposed = $7ab494fe977143c6$var$decompositions[codepoint].map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\n(0, $6uUbQ$swchelperssrc_define_propertymjs)($7ab494fe977143c6$export$2e2bcd8739ae039, \"zeroMarkWidths\", \"BEFORE_GPOS\");\nfunction $7ab494fe977143c6$var$useCategory(glyph) {\n  return $7ab494fe977143c6$var$trie.get(glyph.codePoints[0]);\n}\nclass $7ab494fe977143c6$var$USEInfo {\n  constructor(category, syllableType, syllable) {\n    this.category = category;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\nfunction $7ab494fe977143c6$var$setupSyllables(font, glyphs) {\n  let syllable = 0;\n  for (let [start, end, tags] of $7ab494fe977143c6$var$stateMachine.match(glyphs.map($7ab494fe977143c6$var$useCategory))) {\n    ++syllable;\n    // Create shaper info\n    for (let i = start; i <= end; i++) glyphs[i].shaperInfo = new $7ab494fe977143c6$var$USEInfo($7ab494fe977143c6$var$categories[$7ab494fe977143c6$var$useCategory(glyphs[i])], tags[0], syllable);\n    // Assign rphf feature\n    let limit = glyphs[start].shaperInfo.category === \"R\" ? 1 : Math.min(3, end - start);\n    for (let i1 = start; i1 < start + limit; i1++) glyphs[i1].features.rphf = true;\n  }\n}\nfunction $7ab494fe977143c6$var$clearSubstitutionFlags(font, glyphs) {\n  for (let glyph of glyphs) glyph.substituted = false;\n}\nfunction $7ab494fe977143c6$var$recordRphf(font, glyphs) {\n  for (let glyph of glyphs) if (glyph.substituted && glyph.features.rphf)\n    // Mark a substituted repha.\n    glyph.shaperInfo.category = \"R\";\n}\nfunction $7ab494fe977143c6$var$recordPref(font, glyphs) {\n  for (let glyph of glyphs) if (glyph.substituted)\n    // Mark a substituted pref as VPre, as they behave the same way.\n    glyph.shaperInfo.category = \"VPre\";\n}\nfunction $7ab494fe977143c6$var$reorder(font, glyphs) {\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  for (let start = 0, end = $7ab494fe977143c6$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7ab494fe977143c6$var$nextSyllable(glyphs, start)) {\n    let i, j;\n    let info = glyphs[start].shaperInfo;\n    let type = info.syllableType;\n    // Only a few syllable types need reordering.\n    if (type !== \"virama_terminated_cluster\" && type !== \"standard_cluster\" && type !== \"broken_cluster\") continue;\n    // Insert a dotted circle glyph in broken clusters.\n    if (type === \"broken_cluster\" && dottedCircle) {\n      let g = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info;\n      // Insert after possible Repha.\n      for (i = start; i < end && glyphs[i].shaperInfo.category === \"R\"; i++);\n      glyphs.splice(++i, 0, g);\n      end++;\n    }\n    // Move things forward.\n    if (info.category === \"R\" && end - start > 1)\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n        if ($7ab494fe977143c6$var$isBase(info) || $7ab494fe977143c6$var$isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if ($7ab494fe977143c6$var$isHalant(glyphs[i])) i--;\n          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n          break;\n        }\n      }\n    // Move things back.\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if ($7ab494fe977143c6$var$isBase(info) || $7ab494fe977143c6$var$isHalant(glyphs[i]))\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = $7ab494fe977143c6$var$isHalant(glyphs[i]) ? i + 1 : i;else if ((info.category === \"VPre\" || info.category === \"VMPre\") && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n    }\n  }\n}\nfunction $7ab494fe977143c6$var$nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\nfunction $7ab494fe977143c6$var$isHalant(glyph) {\n  return glyph.shaperInfo.category === \"H\" && !glyph.isLigated;\n}\nfunction $7ab494fe977143c6$var$isBase(info) {\n  return info.category === \"B\" || info.category === \"GB\";\n}\nconst $102b6fe50f1d50b4$var$SHAPERS = {\n  arab: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  mong: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  syrc: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  \"nko \": (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  phag: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  mand: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  mani: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  phlp: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  hang: (0, $e1c6bbc8cb416f8c$export$2e2bcd8739ae039),\n  bng2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  beng: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  dev2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  deva: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  gjr2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  gujr: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  guru: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  gur2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  knda: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  knd2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  mlm2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  mlym: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  ory2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  orya: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  taml: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  tml2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  telu: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  tel2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  khmr: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  bali: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  batk: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  brah: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  bugi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  buhd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  cakm: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  cham: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  dupl: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  egyp: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  gran: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  hano: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  java: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  kthi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  kali: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  khar: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  khoj: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  sind: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  lepc: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  limb: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  mahj: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  modi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  saur: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  shrd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  sidd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  sinh: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  sund: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  sylo: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tglg: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tagb: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tale: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  lana: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tavt: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  takr: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tibt: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tfng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tirh: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  latn: (0, $649970d87335b30f$export$2e2bcd8739ae039),\n  DFLT: (0, $649970d87335b30f$export$2e2bcd8739ae039 // Default\n  )\n};\nfunction $102b6fe50f1d50b4$export$7877a478dd30fd3d(script) {\n  if (!Array.isArray(script)) script = [script];\n  for (let s of script) {\n    let shaper = $102b6fe50f1d50b4$var$SHAPERS[s];\n    if (shaper) return shaper;\n  }\n  return 0, $649970d87335b30f$export$2e2bcd8739ae039;\n}\nclass $0a876c45f1f7c41c$export$2e2bcd8739ae039 extends (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039) {\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          let glyph = this.glyphIterator.cur;\n          switch (table.version) {\n            case 1:\n              glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n              break;\n            case 2:\n              glyph.id = table.substitute.get(index);\n              break;\n          }\n          return true;\n        }\n      case 2:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index !== -1) {\n            let sequence = table.sequences.get(index);\n            if (sequence.length === 0) {\n              // If the sequence length is zero, delete the glyph.\n              // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n              this.glyphs.splice(this.glyphIterator.index, 1);\n              return true;\n            }\n            this.glyphIterator.cur.id = sequence[0];\n            this.glyphIterator.cur.ligatureComponent = 0;\n            let features = this.glyphIterator.cur.features;\n            let curGlyph = this.glyphIterator.cur;\n            let replacement = sequence.slice(1).map((gid, i) => {\n              let glyph = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, gid, undefined, features);\n              glyph.shaperInfo = curGlyph.shaperInfo;\n              glyph.isLigated = curGlyph.isLigated;\n              glyph.ligatureComponent = i + 1;\n              glyph.substituted = true;\n              glyph.isMultiplied = true;\n              return glyph;\n            });\n            this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n            return true;\n          }\n          return false;\n        }\n      case 3:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index !== -1) {\n            let USER_INDEX = 0; // TODO\n            this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n            return true;\n          }\n          return false;\n        }\n      case 4:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          for (let ligature of table.ligatureSets.get(index)) {\n            let matched = this.sequenceMatchIndices(1, ligature.components);\n            if (!matched) continue;\n            let curGlyph = this.glyphIterator.cur;\n            // Concatenate all of the characters the new ligature will represent\n            let characters = curGlyph.codePoints.slice();\n            for (let index of matched) characters.push(...this.glyphs[index].codePoints);\n            // Create the replacement ligature glyph\n            let ligatureGlyph = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, ligature.glyph, characters, curGlyph.features);\n            ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n            ligatureGlyph.isLigated = true;\n            ligatureGlyph.substituted = true;\n            // From Harfbuzz:\n            // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n            //   the ligature to keep its old ligature id.  This will allow it to attach to\n            //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n            //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n            //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n            //   later, we don't want them to lose their ligature id/component, otherwise\n            //   GPOS will fail to correctly position the mark ligature on top of the\n            //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n            //\n            // - If a ligature is formed of components that some of which are also ligatures\n            //   themselves, and those ligature components had marks attached to *their*\n            //   components, we have to attach the marks to the new ligature component\n            //   positions!  Now *that*'s tricky!  And these marks may be following the\n            //   last component of the whole sequence, so we should loop forward looking\n            //   for them and update them.\n            //\n            //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n            //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n            //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n            //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n            //   the new ligature with a component value of 2.\n            //\n            //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n            let isMarkLigature = curGlyph.isMark;\n            for (let i = 0; i < matched.length && isMarkLigature; i++) isMarkLigature = this.glyphs[matched[i]].isMark;\n            ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n            let lastLigID = curGlyph.ligatureID;\n            let lastNumComps = curGlyph.codePoints.length;\n            let curComps = lastNumComps;\n            let idx = this.glyphIterator.index + 1;\n            // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n            // This allows GPOS to attach marks to the correct ligature components.\n            for (let matchIndex of matched) {\n              // Don't assign new ligature components for mark ligatures (see above)\n              if (isMarkLigature) idx = matchIndex;else while (idx < matchIndex) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                idx++;\n              }\n              lastLigID = this.glyphs[idx].ligatureID;\n              lastNumComps = this.glyphs[idx].codePoints.length;\n              curComps += lastNumComps;\n              idx++; // skip base glyph\n            }\n            // Adjust ligature components for any marks following\n            if (lastLigID && !isMarkLigature) for (let i1 = idx; i1 < this.glyphs.length; i1++) {\n              if (this.glyphs[i1].ligatureID === lastLigID) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i1].ligatureComponent || 1, lastNumComps);\n                this.glyphs[i1].ligatureComponent = ligatureComponent;\n              } else break;\n            }\n            // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n            for (let i2 = matched.length - 1; i2 >= 0; i2--) this.glyphs.splice(matched[i2], 1);\n            this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n            return true;\n          }\n          return false;\n        }\n      case 5:\n        return this.applyContext(table);\n      case 6:\n        return this.applyChainingContext(table);\n      case 7:\n        return this.applyLookup(table.lookupType, table.extension);\n      default:\n        throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n    }\n  }\n}\nclass $c96c93587d49c14d$export$2e2bcd8739ae039 extends (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039) {\n  applyPositionValue(sequenceIndex, value) {\n    let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) position.xAdvance += value.xAdvance;\n    if (value.yAdvance != null) position.yAdvance += value.yAdvance;\n    if (value.xPlacement != null) position.xOffset += value.xPlacement;\n    if (value.yPlacement != null) position.yOffset += value.yPlacement;\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n    }\n    // TODO: device tables\n  }\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          switch (table.version) {\n            case 1:\n              this.applyPositionValue(0, table.value);\n              break;\n            case 2:\n              this.applyPositionValue(0, table.values.get(index));\n              break;\n          }\n          return true;\n        }\n      case 2:\n        {\n          let nextGlyph = this.glyphIterator.peek();\n          if (!nextGlyph) return false;\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          switch (table.version) {\n            case 1:\n              let set = table.pairSets.get(index);\n              for (let pair of set) if (pair.secondGlyph === nextGlyph.id) {\n                this.applyPositionValue(0, pair.value1);\n                this.applyPositionValue(1, pair.value2);\n                return true;\n              }\n              return false;\n            case 2:\n              let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n              let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n              if (class1 === -1 || class2 === -1) return false;\n              var pair1 = table.classRecords.get(class1).get(class2);\n              this.applyPositionValue(0, pair1.value1);\n              this.applyPositionValue(1, pair1.value2);\n              return true;\n          }\n        }\n      case 3:\n        {\n          let nextIndex = this.glyphIterator.peekIndex();\n          let nextGlyph = this.glyphs[nextIndex];\n          if (!nextGlyph) return false;\n          let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n          if (!curRecord || !curRecord.exitAnchor) return false;\n          let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n          if (!nextRecord || !nextRecord.entryAnchor) return false;\n          let entry = this.getAnchor(nextRecord.entryAnchor);\n          let exit = this.getAnchor(curRecord.exitAnchor);\n          let cur = this.positions[this.glyphIterator.index];\n          let next = this.positions[nextIndex];\n          let d;\n          switch (this.direction) {\n            case \"ltr\":\n              cur.xAdvance = exit.x + cur.xOffset;\n              d = entry.x + next.xOffset;\n              next.xAdvance -= d;\n              next.xOffset -= d;\n              break;\n            case \"rtl\":\n              d = exit.x + cur.xOffset;\n              cur.xAdvance -= d;\n              cur.xOffset -= d;\n              next.xAdvance = entry.x + next.xOffset;\n              break;\n          }\n          if (this.glyphIterator.flags.rightToLeft) {\n            this.glyphIterator.cur.cursiveAttachment = nextIndex;\n            cur.yOffset = entry.y - exit.y;\n          } else {\n            nextGlyph.cursiveAttachment = this.glyphIterator.index;\n            cur.yOffset = exit.y - entry.y;\n          }\n          return true;\n        }\n      case 4:\n        {\n          let markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) return false;\n          // search backward for a base glyph\n          let baseGlyphIndex = this.glyphIterator.index;\n          while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n          if (baseGlyphIndex < 0) return false;\n          let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n          if (baseIndex === -1) return false;\n          let markRecord = table.markArray[markIndex];\n          let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n      case 5:\n        {\n          let markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) return false;\n          // search backward for a base glyph\n          let baseGlyphIndex = this.glyphIterator.index;\n          while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n          if (baseGlyphIndex < 0) return false;\n          let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n          if (ligIndex === -1) return false;\n          let ligAttach = table.ligatureArray[ligIndex];\n          let markGlyph = this.glyphIterator.cur;\n          let ligGlyph = this.glyphs[baseGlyphIndex];\n          let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n          let markRecord = table.markArray[markIndex];\n          let baseAnchor = ligAttach[compIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n      case 6:\n        {\n          let mark1Index = this.coverageIndex(table.mark1Coverage);\n          if (mark1Index === -1) return false;\n          // get the previous mark to attach to\n          let prevIndex = this.glyphIterator.peekIndex(-1);\n          let prev = this.glyphs[prevIndex];\n          if (!prev || !prev.isMark) return false;\n          let cur = this.glyphIterator.cur;\n          // The following logic was borrowed from Harfbuzz\n          let good = false;\n          if (cur.ligatureID === prev.ligatureID) {\n            if (!cur.ligatureID) good = true;else if (cur.ligatureComponent === prev.ligatureComponent) good = true;\n          } else\n            // If ligature ids don't match, it may be the case that one of the marks\n            // itself is a ligature, in which case match.\n            if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;\n          if (!good) return false;\n          let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n          if (mark2Index === -1) return false;\n          let markRecord = table.mark1Array[mark1Index];\n          let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, prevIndex);\n          return true;\n        }\n      case 7:\n        return this.applyContext(table);\n      case 8:\n        return this.applyChainingContext(table);\n      case 9:\n        return this.applyLookup(table.lookupType, table.extension);\n      default:\n        throw new Error(`Unsupported GPOS table: ${lookupType}`);\n    }\n  }\n  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    let baseCoords = this.getAnchor(baseAnchor);\n    let markCoords = this.getAnchor(markRecord.markAnchor);\n    let basePos = this.positions[baseGlyphIndex];\n    let markPos = this.positions[this.glyphIterator.index];\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  }\n  getAnchor(anchor) {\n    // TODO: contour point, device tables\n    let x = anchor.xCoordinate;\n    let y = anchor.yCoordinate;\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n    }\n    return {\n      x: x,\n      y: y\n    };\n  }\n  applyFeatures(userFeatures, glyphs, advances) {\n    super.applyFeatures(userFeatures, glyphs, advances);\n    for (var i = 0; i < this.glyphs.length; i++) this.fixCursiveAttachment(i);\n    this.fixMarkAttachment();\n  }\n  fixCursiveAttachment(i) {\n    let glyph = this.glyphs[i];\n    if (glyph.cursiveAttachment != null) {\n      let j = glyph.cursiveAttachment;\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  }\n  fixMarkAttachment() {\n    for (let i = 0; i < this.glyphs.length; i++) {\n      let glyph = this.glyphs[i];\n      if (glyph.markAttachment != null) {\n        let j = glyph.markAttachment;\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n        if (this.direction === \"ltr\") for (let k = j; k < i; k++) {\n          this.positions[i].xOffset -= this.positions[k].xAdvance;\n          this.positions[i].yOffset -= this.positions[k].yAdvance;\n        } else for (let k1 = j + 1; k1 < i + 1; k1++) {\n          this.positions[i].xOffset += this.positions[k1].xAdvance;\n          this.positions[i].yOffset += this.positions[k1].yAdvance;\n        }\n      }\n    }\n  }\n}\nclass $a62492810de27e3d$export$2e2bcd8739ae039 {\n  setup(glyphRun) {\n    // Map glyphs to GlyphInfo objects so data can be passed between\n    // GSUB and GPOS without mutating the real (shared) Glyph objects.\n    this.glyphInfos = glyphRun.glyphs.map(glyph => new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, glyph.id, [...glyph.codePoints]));\n    // Select a script based on what is available in GSUB/GPOS.\n    let script = null;\n    if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n    this.shaper = $102b6fe50f1d50b4$export$7877a478dd30fd3d(script);\n    this.plan = new (0, $94d7a73bd2edfc9a$export$2e2bcd8739ae039)(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n    // Assign chosen features to output glyph run\n    for (let key in this.plan.allFeatures) glyphRun.features[key] = true;\n  }\n  substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, this.glyphInfos);\n      // Map glyph infos back to normal Glyph objects\n      glyphRun.glyphs = this.glyphInfos.map(glyphInfo => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n    }\n  }\n  position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === \"BEFORE_GPOS\") this.zeroMarkAdvances(glyphRun.positions);\n    if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n    if (this.shaper.zeroMarkWidths === \"AFTER_GPOS\") this.zeroMarkAdvances(glyphRun.positions);\n    // Reverse the glyphs and positions if the script is right-to-left\n    if (glyphRun.direction === \"rtl\") {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  }\n  zeroMarkAdvances(positions) {\n    for (let i = 0; i < this.glyphInfos.length; i++) if (this.glyphInfos[i].isMark) {\n      positions[i].xAdvance = 0;\n      positions[i].yAdvance = 0;\n    }\n  }\n  cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  }\n  getAvailableFeatures(script, language) {\n    let features = [];\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GSUBProcessor.features));\n    }\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GPOSProcessor.features));\n    }\n    return features;\n  }\n  constructor(font) {\n    this.font = font;\n    this.glyphInfos = null;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n    if (font.GSUB) this.GSUBProcessor = new (0, $0a876c45f1f7c41c$export$2e2bcd8739ae039)(font, font.GSUB);\n    if (font.GPOS) this.GPOSProcessor = new (0, $c96c93587d49c14d$export$2e2bcd8739ae039)(font, font.GPOS);\n  }\n}\nclass $4c0a7fa5df7a9ab1$export$2e2bcd8739ae039 {\n  layout(string, features, script, language, direction) {\n    // Make the features parameter optional\n    if (typeof features === \"string\") {\n      direction = language;\n      language = script;\n      script = features;\n      features = [];\n    }\n    // Map string to glyphs if needed\n    if (typeof string === \"string\") {\n      // Attempt to detect the script from the string if not provided.\n      if (script == null) script = $130d1a642ebcd2b7$export$e5cb25e204fb8450(string);\n      var glyphs = this.font.glyphsForString(string);\n    } else {\n      // Attempt to detect the script from the glyph code points if not provided.\n      if (script == null) {\n        let codePoints = [];\n        for (let glyph of string) codePoints.push(...glyph.codePoints);\n        script = $130d1a642ebcd2b7$export$16fab0757cfc223d(codePoints);\n      }\n      var glyphs = string;\n    }\n    let glyphRun = new (0, $be07b3e97a42687a$export$2e2bcd8739ae039)(glyphs, features, script, language, direction);\n    // Return early if there are no glyphs\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    }\n    // Setup the advanced layout engine\n    if (this.engine && this.engine.setup) this.engine.setup(glyphRun);\n    // Substitute and position the glyphs\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n    // Let the layout engine clean up any state it might have\n    if (this.engine && this.engine.cleanup) this.engine.cleanup();\n    return glyphRun;\n  }\n  substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);\n  }\n  position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(glyph => new (0, $1ac75d9a55b67f01$export$2e2bcd8739ae039)(glyph.advanceWidth));\n    let positioned = null;\n    // Call the advanced layout engine. Returns the features applied.\n    if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);\n    // if there is no GPOS table, use unicode properties to position marks.\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new (0, $0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039)(this.font);\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    }\n    // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) this.kernProcessor = new (0, $0bba3a9db57637f3$export$2e2bcd8739ae039)(this.font);\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  }\n  hideDefaultIgnorables(glyphs, positions) {\n    let space = this.font.glyphForCodePoint(0x20);\n    for (let i = 0; i < glyphs.length; i++) if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n      glyphs[i] = space;\n      positions[i].xAdvance = 0;\n      positions[i].yAdvance = 0;\n    }\n  }\n  isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    let plane = ch >> 16;\n    if (plane === 0)\n      // BMP\n      switch (ch >> 8) {\n        case 0x00:\n          return ch === 0x00AD;\n        case 0x03:\n          return ch === 0x034F;\n        case 0x06:\n          return ch === 0x061C;\n        case 0x17:\n          return 0x17B4 <= ch && ch <= 0x17B5;\n        case 0x18:\n          return 0x180B <= ch && ch <= 0x180E;\n        case 0x20:\n          return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;\n        case 0xFE:\n          return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;\n        case 0xFF:\n          return 0xFFF0 <= ch && ch <= 0xFFF8;\n        default:\n          return false;\n      } else\n      // Other planes\n      switch (plane) {\n        case 0x01:\n          return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;\n        case 0x0E:\n          return 0xE0000 <= ch && ch <= 0xE0FFF;\n        default:\n          return false;\n      }\n  }\n  getAvailableFeatures(script, language) {\n    let features = [];\n    if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));\n    if (this.font.kern && features.indexOf(\"kern\") === -1) features.push(\"kern\");\n    return features;\n  }\n  stringsForGlyph(gid) {\n    let result = new Set();\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n    for (let codePoint of codePoints) result.add(String.fromCodePoint(codePoint));\n    if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid)) result.add(string);\n    return Array.from(result);\n  }\n  constructor(font) {\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null;\n    // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n    if (this.font.morx) this.engine = new (0, $ba6dd74203be8728$export$2e2bcd8739ae039)(this.font);else if (this.font.GSUB || this.font.GPOS) this.engine = new (0, $a62492810de27e3d$export$2e2bcd8739ae039)(this.font);\n  }\n}\nconst $f43aec954cdfdf21$var$SVG_COMMANDS = {\n  moveTo: \"M\",\n  lineTo: \"L\",\n  quadraticCurveTo: \"Q\",\n  bezierCurveTo: \"C\",\n  closePath: \"Z\"\n};\nclass $f43aec954cdfdf21$export$2e2bcd8739ae039 {\n  /**\n  * Compiles the path to a JavaScript function that can be applied with\n  * a graphics context in order to render the path.\n  * @return {string}\n  */\n  toFunction() {\n    return ctx => {\n      this.commands.forEach(c => {\n        return ctx[c.command].apply(ctx, c.args);\n      });\n    };\n  }\n  /**\n  * Converts the path to an SVG path data string\n  * @return {string}\n  */\n  toSVG() {\n    let cmds = this.commands.map(c => {\n      let args = c.args.map(arg => Math.round(arg * 100) / 100);\n      return `${$f43aec954cdfdf21$var$SVG_COMMANDS[c.command]}${args.join(\" \")}`;\n    });\n    return cmds.join(\"\");\n  }\n  /**\n  * Gets the \"control box\" of a path.\n  * This is like the bounding box, but it includes all points including\n  * control points of bezier segments and is much faster to compute than\n  * the real bounding box.\n  * @type {BBox}\n  */\n  get cbox() {\n    if (!this._cbox) {\n      let cbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)();\n      for (let command1 of this.commands) for (let i = 0; i < command1.args.length; i += 2) cbox.addPoint(command1.args[i], command1.args[i + 1]);\n      this._cbox = Object.freeze(cbox);\n    }\n    return this._cbox;\n  }\n  /**\n  * Gets the exact bounding box of the path by evaluating curve segments.\n  * Slower to compute than the control box, but more accurate.\n  * @type {BBox}\n  */\n  get bbox() {\n    if (this._bbox) return this._bbox;\n    let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)();\n    let cx = 0,\n      cy = 0;\n    let f = t => Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n    for (let c of this.commands) switch (c.command) {\n      case \"moveTo\":\n      case \"lineTo\":\n        let [x, y] = c.args;\n        bbox.addPoint(x, y);\n        cx = x;\n        cy = y;\n        break;\n      case \"quadraticCurveTo\":\n      case \"bezierCurveTo\":\n        if (c.command === \"quadraticCurveTo\") {\n          // http://fontforge.org/bezier.html\n          var [qp1x, qp1y, p3x, p3y] = c.args;\n          var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n          var cp1y = cy + 2 / 3 * (qp1y - cy);\n          var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n          var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n        } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n        // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n        bbox.addPoint(p3x, p3y);\n        var p0 = [cx, cy];\n        var p1 = [cp1x, cp1y];\n        var p2 = [cp2x, cp2y];\n        var p3 = [p3x, p3y];\n        for (var i = 0; i <= 1; i++) {\n          let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n          let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n          c = 3 * p1[i] - 3 * p0[i];\n          if (a === 0) {\n            if (b === 0) continue;\n            let t = -c / b;\n            if (0 < t && t < 1) {\n              if (i === 0) bbox.addPoint(f(t), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t));\n            }\n            continue;\n          }\n          let b2ac = Math.pow(b, 2) - 4 * c * a;\n          if (b2ac < 0) continue;\n          let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n          if (0 < t1 && t1 < 1) {\n            if (i === 0) bbox.addPoint(f(t1), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));\n          }\n          let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n          if (0 < t2 && t2 < 1) {\n            if (i === 0) bbox.addPoint(f(t2), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));\n          }\n        }\n        cx = p3x;\n        cy = p3y;\n        break;\n    }\n    return this._bbox = Object.freeze(bbox);\n  }\n  /**\n  * Applies a mapping function to each point in the path.\n  * @param {function} fn\n  * @return {Path}\n  */\n  mapPoints(fn) {\n    let path = new $f43aec954cdfdf21$export$2e2bcd8739ae039();\n    for (let c of this.commands) {\n      let args = [];\n      for (let i = 0; i < c.args.length; i += 2) {\n        let [x, y] = fn(c.args[i], c.args[i + 1]);\n        args.push(x, y);\n      }\n      path[c.command](...args);\n    }\n    return path;\n  }\n  /**\n  * Transforms the path by the given matrix.\n  */\n  transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints((x, y) => {\n      const tx = m0 * x + m2 * y + m4;\n      const ty = m1 * x + m3 * y + m5;\n      return [tx, ty];\n    });\n  }\n  /**\n  * Translates the path by the given offset.\n  */\n  translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  }\n  /**\n  * Rotates the path by the given angle (in radians).\n  */\n  rotate(angle) {\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  }\n  /**\n  * Scales the path.\n  */\n  scale(scaleX, scaleY = scaleX) {\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  }\n  constructor() {\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n}\nfor (let command of [\"moveTo\", \"lineTo\", \"quadraticCurveTo\", \"bezierCurveTo\", \"closePath\"]) $f43aec954cdfdf21$export$2e2bcd8739ae039.prototype[command] = function (...args) {\n  this._bbox = this._cbox = null;\n  this.commands.push({\n    command: command,\n    args: args\n  });\n  return this;\n};\nvar $7713b9b7b438dff8$export$2e2bcd8739ae039 = [\".notdef\", \".null\", \"nonmarkingreturn\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"nonbreakingspace\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"Lslash\", \"lslash\", \"Scaron\", \"scaron\", \"Zcaron\", \"zcaron\", \"brokenbar\", \"Eth\", \"eth\", \"Yacute\", \"yacute\", \"Thorn\", \"thorn\", \"minus\", \"multiply\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"onehalf\", \"onequarter\", \"threequarters\", \"franc\", \"Gbreve\", \"gbreve\", \"Idotaccent\", \"Scedilla\", \"scedilla\", \"Cacute\", \"cacute\", \"Ccaron\", \"ccaron\", \"dcroat\"];\nclass $f92906be28e61769$export$2e2bcd8739ae039 {\n  _getPath() {\n    return new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039)();\n  }\n  _getCBox() {\n    return this.path.cbox;\n  }\n  _getBBox() {\n    return this.path.bbox;\n  }\n  _getTableMetrics(table) {\n    if (this.id < table.metrics.length) return table.metrics.get(this.id);\n    let metric = table.metrics.get(table.metrics.length - 1);\n    let res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n    return res;\n  }\n  _getMetrics(cbox) {\n    if (this._metrics) return this._metrics;\n    let {\n      advance: advanceWidth,\n      bearing: leftBearing\n    } = this._getTableMetrics(this._font.hmtx);\n    // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n    if (this._font.vmtx) var {\n      advance: advanceHeight,\n      bearing: topBearing\n    } = this._getTableMetrics(this._font.vmtx);else {\n      let os2;\n      if (typeof cbox === \"undefined\" || cbox === null) ({\n        cbox: cbox\n      } = this);\n      if ((os2 = this._font[\"OS/2\"]) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n      } else {\n        let {\n          hhea: hhea\n        } = this._font;\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n    if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    return this._metrics = {\n      advanceWidth: advanceWidth,\n      advanceHeight: advanceHeight,\n      leftBearing: leftBearing,\n      topBearing: topBearing\n    };\n  }\n  /**\n  * The glyph’s control box.\n  * This is often the same as the bounding box, but is faster to compute.\n  * Because of the way bezier curves are defined, some of the control points\n  * can be outside of the bounding box. Where `bbox` takes this into account,\n  * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n  * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n  * for a more detailed description.\n  *\n  * @type {BBox}\n  */\n  get cbox() {\n    return this._getCBox();\n  }\n  /**\n  * The glyph’s bounding box, i.e. the rectangle that encloses the\n  * glyph outline as tightly as possible.\n  * @type {BBox}\n  */\n  get bbox() {\n    return this._getBBox();\n  }\n  /**\n  * A vector Path object representing the glyph outline.\n  * @type {Path}\n  */\n  get path() {\n    // Cache the path so we only decode it once\n    // Decoding is actually performed by subclasses\n    return this._getPath();\n  }\n  /**\n  * Returns a path scaled to the given font size.\n  * @param {number} size\n  * @return {Path}\n  */\n  getScaledPath(size) {\n    let scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  }\n  /**\n  * The glyph's advance width.\n  * @type {number}\n  */\n  get advanceWidth() {\n    return this._getMetrics().advanceWidth;\n  }\n  /**\n  * The glyph's advance height.\n  * @type {number}\n  */\n  get advanceHeight() {\n    return this._getMetrics().advanceHeight;\n  }\n  get ligatureCaretPositions() {}\n  _getName() {\n    let {\n      post: post\n    } = this._font;\n    if (!post) return null;\n    switch (post.version) {\n      case 1:\n        return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[this.id];\n      case 2:\n        let id = post.glyphNameIndex[this.id];\n        if (id < (0, $7713b9b7b438dff8$export$2e2bcd8739ae039).length) return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[id];\n        return post.names[id - (0, $7713b9b7b438dff8$export$2e2bcd8739ae039).length];\n      case 2.5:\n        return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[this.id + post.offsets[this.id]];\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  }\n  /**\n  * The glyph's name\n  * @type {string}\n  */\n  get name() {\n    return this._getName();\n  }\n  /**\n  * Renders the glyph to the given graphics context, at the specified font size.\n  * @param {CanvasRenderingContext2d} ctx\n  * @param {number} size\n  */\n  render(ctx, size) {\n    ctx.save();\n    let scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n    let fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n    ctx.restore();\n  }\n  constructor(id, codePoints, font) {\n    /**\n    * The glyph id in the font\n    * @type {number}\n    */\n    this.id = id;\n    /**\n    * An array of unicode code points that are represented by this glyph.\n    * There can be multiple code points in the case of ligatures and other glyphs\n    * that represent multiple visual characters.\n    * @type {number[]}\n    */\n    this.codePoints = codePoints;\n    this._font = font;\n    // TODO: get this info from GDEF if available\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, $6uUbQ$isMark));\n    this.isLigature = this.codePoints.length > 1;\n  }\n}\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"cbox\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"bbox\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"path\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"advanceWidth\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"advanceHeight\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"name\", null);\n\n// The header for both simple and composite glyphs\nlet $69aac16029968692$var$GlyfHeader = new $6uUbQ$Struct({\n  numberOfContours: $6uUbQ$int16,\n  xMin: $6uUbQ$int16,\n  yMin: $6uUbQ$int16,\n  xMax: $6uUbQ$int16,\n  yMax: $6uUbQ$int16\n});\n// Flags for simple glyphs\nconst $69aac16029968692$var$ON_CURVE = 1;\nconst $69aac16029968692$var$X_SHORT_VECTOR = 2;\nconst $69aac16029968692$var$Y_SHORT_VECTOR = 4;\nconst $69aac16029968692$var$REPEAT = 8;\nconst $69aac16029968692$var$SAME_X = 16;\nconst $69aac16029968692$var$SAME_Y = 32;\n// Flags for composite glyphs\nconst $69aac16029968692$var$ARG_1_AND_2_ARE_WORDS = 1;\nconst $69aac16029968692$var$ARGS_ARE_XY_VALUES = 2;\nconst $69aac16029968692$var$ROUND_XY_TO_GRID = 4;\nconst $69aac16029968692$var$WE_HAVE_A_SCALE = 8;\nconst $69aac16029968692$var$MORE_COMPONENTS = 32;\nconst $69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;\nconst $69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO = 128;\nconst $69aac16029968692$var$WE_HAVE_INSTRUCTIONS = 256;\nconst $69aac16029968692$var$USE_MY_METRICS = 512;\nconst $69aac16029968692$var$OVERLAP_COMPOUND = 1024;\nconst $69aac16029968692$var$SCALED_COMPONENT_OFFSET = 2048;\nconst $69aac16029968692$var$UNSCALED_COMPONENT_OFFSET = 4096;\nclass $69aac16029968692$export$baf26146a414f24a {\n  copy() {\n    return new $69aac16029968692$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);\n  }\n  constructor(onCurve, endContour, x = 0, y = 0) {\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n}\n// Represents a component in a composite glyph\nclass $69aac16029968692$var$Component {\n  constructor(glyphID, dx, dy) {\n    this.glyphID = glyphID;\n    this.dx = dx;\n    this.dy = dy;\n    this.pos = 0;\n    this.scaleX = this.scaleY = 1;\n    this.scale01 = this.scale10 = 0;\n  }\n}\nclass $69aac16029968692$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n  // Parses just the glyph header and returns the bounding box\n  _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) return this.path.cbox;\n    let stream = this._font._getTableStream(\"glyf\");\n    stream.pos += this._font.loca.offsets[this.id];\n    let glyph = $69aac16029968692$var$GlyfHeader.decode(stream);\n    let cbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  }\n  // Parses a single glyph coordinate\n  _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) val = -val;\n      val += prev;\n    } else if (same) var val = prev;else var val = prev + stream.readInt16BE();\n    return val;\n  }\n  // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n  _decode() {\n    let glyfPos = this._font.loca.offsets[this.id];\n    let nextPos = this._font.loca.offsets[this.id + 1];\n    // Nothing to do if there is no data for this glyph\n    if (glyfPos === nextPos) return null;\n    let stream = this._font._getTableStream(\"glyf\");\n    stream.pos += glyfPos;\n    let startPos = stream.pos;\n    let glyph = $69aac16029968692$var$GlyfHeader.decode(stream);\n    if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);\n    return glyph;\n  }\n  _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n    let endPtsOfContours = new $6uUbQ$Array($6uUbQ$uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new $6uUbQ$Array($6uUbQ$uint8, $6uUbQ$uint16).decode(stream);\n    let flags = [];\n    let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag);\n      // check for repeat flag\n      if (flag & $69aac16029968692$var$REPEAT) {\n        let count = stream.readUInt8();\n        for (let j = 0; j < count; j++) flags.push(flag);\n      }\n    }\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      let point = new $69aac16029968692$export$baf26146a414f24a(!!(flag & $69aac16029968692$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n    let px = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & $69aac16029968692$var$X_SHORT_VECTOR, flag & $69aac16029968692$var$SAME_X);\n    }\n    let py = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & $69aac16029968692$var$Y_SHORT_VECTOR, flag & $69aac16029968692$var$SAME_Y);\n    }\n    if (this._font._variationProcessor) {\n      let points = glyph.points.slice();\n      points.push(...this._getPhantomPoints(glyph));\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.slice(-4);\n    }\n    return;\n  }\n  _decodeComposite(glyph, stream, offset = 0) {\n    // this is a composite glyph\n    glyph.components = [];\n    let haveInstructions = false;\n    let flags = $69aac16029968692$var$MORE_COMPONENTS;\n    while (flags & $69aac16029968692$var$MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      let gPos = stream.pos - offset;\n      let glyphID = stream.readUInt16BE();\n      if (!haveInstructions) haveInstructions = (flags & $69aac16029968692$var$WE_HAVE_INSTRUCTIONS) !== 0;\n      if (flags & $69aac16029968692$var$ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n      var component = new $69aac16029968692$var$Component(glyphID, dx, dy);\n      component.pos = gPos;\n      if (flags & $69aac16029968692$var$WE_HAVE_A_SCALE)\n        // fixed number with 14 bits of fraction\n        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;else if (flags & $69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & $69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      }\n      glyph.components.push(component);\n    }\n    if (this._font._variationProcessor) {\n      let points = [];\n      for (let j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new $69aac16029968692$export$baf26146a414f24a(true, true, component.dx, component.dy));\n      }\n      points.push(...this._getPhantomPoints(glyph));\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.splice(-4, 4);\n      for (let i = 0; i < points.length; i++) {\n        let point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n    return haveInstructions;\n  }\n  _getPhantomPoints(glyph) {\n    let cbox = this._getCBox(true);\n    if (this._metrics == null) this._metrics = (0, $f92906be28e61769$export$2e2bcd8739ae039).prototype._getMetrics.call(this, cbox);\n    let {\n      advanceWidth: advanceWidth,\n      advanceHeight: advanceHeight,\n      leftBearing: leftBearing,\n      topBearing: topBearing\n    } = this._metrics;\n    return [new $69aac16029968692$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0), new $69aac16029968692$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new $69aac16029968692$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing), new $69aac16029968692$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)];\n  }\n  // Decodes font data, resolves composite glyphs, and returns an array of contours\n  _getContours() {\n    let glyph = this._decode();\n    if (!glyph) return [];\n    let points = [];\n    if (glyph.numberOfContours < 0)\n      // resolve composite glyphs\n      for (let component of glyph.components) {\n        let contours = this._font.getGlyph(component.glyphID)._getContours();\n        for (let i = 0; i < contours.length; i++) {\n          let contour = contours[i];\n          for (let j = 0; j < contour.length; j++) {\n            let point = contour[j];\n            let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n            let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n            points.push(new $69aac16029968692$export$baf26146a414f24a(point.onCurve, point.endContour, x, y));\n          }\n        }\n      } else points = glyph.points || [];\n    // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n    let contours = [];\n    let cur = [];\n    for (let k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n    return contours;\n  }\n  _getMetrics() {\n    if (this._metrics) return this._metrics;\n    let cbox = this._getCBox(true);\n    super._getMetrics(cbox);\n    if (this._font._variationProcessor && !this._font.HVAR)\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    return this._metrics;\n  }\n  // Converts contours to a Path object that can be rendered\n  _getPath() {\n    let contours = this._getContours();\n    let path = new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039)();\n    for (let i = 0; i < contours.length; i++) {\n      let contour = contours[i];\n      let firstPt = contour[0];\n      let lastPt = contour[contour.length - 1];\n      let start = 0;\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve)\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;else\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new $69aac16029968692$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        var curvePt = firstPt;\n      }\n      path.moveTo(firstPt.x, firstPt.y);\n      for (let j = start; j < contour.length; j++) {\n        let pt = contour[j];\n        let prevPt = j === 0 ? firstPt : contour[j - 1];\n        if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;else if (!prevPt.onCurve && !pt.onCurve) {\n          let midX = (prevPt.x + pt.x) / 2;\n          let midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n        } else throw new Error(\"Unknown TTF path state\");\n      }\n      // Connect the first and last points\n      if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      path.closePath();\n    }\n    return path;\n  }\n  constructor(...args) {\n    super(...args);\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"TTF\");\n  }\n}\nclass $62cc5109c6101893$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n  _getName() {\n    if (this._font.CFF2) return super._getName();\n    return this._font[\"CFF \"].getGlyphName(this.id);\n  }\n  bias(s) {\n    if (s.length < 1240) return 107;else if (s.length < 33900) return 1131;else return 32768;\n  }\n  _getPath() {\n    let cff = this._font.CFF2 || this._font[\"CFF \"];\n    let {\n      stream: stream\n    } = cff;\n    let str = cff.topDict.CharStrings[this.id];\n    let end = str.offset + str.length;\n    stream.pos = str.offset;\n    let path = new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039)();\n    let stack = [];\n    let trans = [];\n    let width = null;\n    let nStems = 0;\n    let x1 = 0,\n      y1 = 0;\n    let usedGsubrs;\n    let usedSubrs;\n    let open = false;\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n    let gsubrs = cff.globalSubrIndex || [];\n    let gsubrsBias = this.bias(gsubrs);\n    let privateDict = cff.privateDictForGlyph(this.id) || {};\n    let subrs = privateDict.Subrs || [];\n    let subrsBias = this.bias(subrs);\n    let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    let vsindex = privateDict.vsindex;\n    let variationProcessor = this._font._variationProcessor;\n    function checkWidth() {\n      if (width == null) width = stack.shift() + privateDict.nominalWidthX;\n    }\n    function parseStems() {\n      if (stack.length % 2 !== 0) checkWidth();\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n    function moveTo(x, y) {\n      if (open) path.closePath();\n      path.moveTo(x, y);\n      open = true;\n    }\n    let parse = function () {\n      while (stream.pos < end) {\n        let op = stream.readUInt8();\n        if (op < 32) {\n          let index, subr, phase;\n          switch (op) {\n            case 1:\n            case 3:\n            case 18:\n            case 23:\n              parseStems();\n              break;\n            case 4:\n              if (stack.length > 1) checkWidth();\n              y1 += stack.shift();\n              moveTo(x1, y1);\n              break;\n            case 5:\n              while (stack.length >= 2) {\n                x1 += stack.shift();\n                y1 += stack.shift();\n                path.lineTo(x1, y1);\n              }\n              break;\n            case 6:\n            case 7:\n              phase = op === 6;\n              while (stack.length >= 1) {\n                if (phase) x1 += stack.shift();else y1 += stack.shift();\n                path.lineTo(x1, y1);\n                phase = !phase;\n              }\n              break;\n            case 8:\n              while (stack.length > 0) {\n                var c1x = x1 + stack.shift();\n                var c1y = y1 + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x1 = c2x + stack.shift();\n                y1 = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              }\n              break;\n            case 10:\n              index = stack.pop() + subrsBias;\n              subr = subrs[index];\n              if (subr) {\n                usedSubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n            case 11:\n              if (cff.version >= 2) break;\n              return;\n            case 14:\n              if (cff.version >= 2) break;\n              if (stack.length > 0) checkWidth();\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n              break;\n            case 15:\n              if (cff.version < 2) throw new Error(\"vsindex operator not supported in CFF v1\");\n              vsindex = stack.pop();\n              break;\n            case 16:\n              {\n                if (cff.version < 2) throw new Error(\"blend operator not supported in CFF v1\");\n                if (!variationProcessor) throw new Error(\"blend operator in non-variation font\");\n                let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                let numBlends = stack.pop();\n                let numOperands = numBlends * blendVector.length;\n                let delta = stack.length - numOperands;\n                let base = delta - numBlends;\n                for (let i = 0; i < numBlends; i++) {\n                  let sum = stack[base + i];\n                  for (let j = 0; j < blendVector.length; j++) sum += blendVector[j] * stack[delta++];\n                  stack[base + i] = sum;\n                }\n                while (numOperands--) stack.pop();\n                break;\n              }\n            case 19:\n            case 20:\n              parseStems();\n              stream.pos += nStems + 7 >> 3;\n              break;\n            case 21:\n              if (stack.length > 2) checkWidth();\n              x1 += stack.shift();\n              y1 += stack.shift();\n              moveTo(x1, y1);\n              break;\n            case 22:\n              if (stack.length > 1) checkWidth();\n              x1 += stack.shift();\n              moveTo(x1, y1);\n              break;\n            case 24:\n              while (stack.length >= 8) {\n                var c1x = x1 + stack.shift();\n                var c1y = y1 + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x1 = c2x + stack.shift();\n                y1 = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              }\n              x1 += stack.shift();\n              y1 += stack.shift();\n              path.lineTo(x1, y1);\n              break;\n            case 25:\n              while (stack.length >= 8) {\n                x1 += stack.shift();\n                y1 += stack.shift();\n                path.lineTo(x1, y1);\n              }\n              var c1x = x1 + stack.shift();\n              var c1y = y1 + stack.shift();\n              var c2x = c1x + stack.shift();\n              var c2y = c1y + stack.shift();\n              x1 = c2x + stack.shift();\n              y1 = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              break;\n            case 26:\n              if (stack.length % 2) x1 += stack.shift();\n              while (stack.length >= 4) {\n                c1x = x1;\n                c1y = y1 + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x1 = c2x;\n                y1 = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              }\n              break;\n            case 27:\n              if (stack.length % 2) y1 += stack.shift();\n              while (stack.length >= 4) {\n                c1x = x1 + stack.shift();\n                c1y = y1;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x1 = c2x + stack.shift();\n                y1 = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              }\n              break;\n            case 28:\n              stack.push(stream.readInt16BE());\n              break;\n            case 29:\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n              if (subr) {\n                usedGsubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n            case 30:\n            case 31:\n              phase = op === 31;\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x1 + stack.shift();\n                  c1y = y1;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y1 = c2y + stack.shift();\n                  x1 = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x1;\n                  c1y = y1 + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x1 = c2x + stack.shift();\n                  y1 = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                phase = !phase;\n              }\n              break;\n            case 12:\n              op = stream.readUInt8();\n              switch (op) {\n                case 3:\n                  let a = stack.pop();\n                  let b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n                case 4:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n                case 5:\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n                case 9:\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n                case 10:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n                case 11:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n                case 12:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n                case 14:\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n                case 15:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n                case 18:\n                  stack.pop();\n                  break;\n                case 20:\n                  let val = stack.pop();\n                  let idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n                case 21:\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n                case 22:\n                  let s1 = stack.pop();\n                  let s2 = stack.pop();\n                  let v1 = stack.pop();\n                  let v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n                case 23:\n                  stack.push(Math.random());\n                  break;\n                case 24:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n                case 26:\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n                case 27:\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n                case 28:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n                case 29:\n                  idx = stack.pop();\n                  if (idx < 0) idx = 0;else if (idx > stack.length - 1) idx = stack.length - 1;\n                  stack.push(stack[idx]);\n                  break;\n                case 30:\n                  let n = stack.pop();\n                  let j = stack.pop();\n                  if (j >= 0) while (j > 0) {\n                    var t = stack[n - 1];\n                    for (let i = n - 2; i >= 0; i--) stack[i + 1] = stack[i];\n                    stack[0] = t;\n                    j--;\n                  } else while (j < 0) {\n                    var t = stack[0];\n                    for (let i = 0; i <= n; i++) stack[i] = stack[i + 1];\n                    stack[n - 1] = t;\n                    j++;\n                  }\n                  break;\n                case 34:\n                  c1x = x1 + stack.shift();\n                  c1y = y1;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  let c3x = c2x + stack.shift();\n                  let c3y = c2y;\n                  let c4x = c3x + stack.shift();\n                  let c4y = c3y;\n                  let c5x = c4x + stack.shift();\n                  let c5y = c4y;\n                  let c6x = c5x + stack.shift();\n                  let c6y = c5y;\n                  x1 = c6x;\n                  y1 = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n                case 35:\n                  let pts = [];\n                  for (let i = 0; i <= 5; i++) {\n                    x1 += stack.shift();\n                    y1 += stack.shift();\n                    pts.push(x1, y1);\n                  }\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  stack.shift(); // fd\n                  break;\n                case 36:\n                  c1x = x1 + stack.shift();\n                  c1y = y1 + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x1 = c6x;\n                  y1 = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n                case 37:\n                  let startx = x1;\n                  let starty = y1;\n                  pts = [];\n                  for (let i1 = 0; i1 <= 4; i1++) {\n                    x1 += stack.shift();\n                    y1 += stack.shift();\n                    pts.push(x1, y1);\n                  }\n                  if (Math.abs(x1 - startx) > Math.abs(y1 - starty)) {\n                    x1 += stack.shift();\n                    y1 = starty;\n                  } else {\n                    x1 = startx;\n                    y1 += stack.shift();\n                  }\n                  pts.push(x1, y1);\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  break;\n                default:\n                  throw new Error(`Unknown op: 12 ${op}`);\n              }\n              break;\n            default:\n              throw new Error(`Unknown op: ${op}`);\n          }\n        } else if (op < 247) stack.push(op - 139);else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else stack.push(stream.readInt32BE() / 65536);\n      }\n    };\n    parse();\n    if (open) path.closePath();\n    return path;\n  }\n  constructor(...args) {\n    super(...args);\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"CFF\");\n  }\n}\nlet $25d8f049c222084c$var$SBIXImage = new $6uUbQ$Struct({\n  originX: $6uUbQ$uint16,\n  originY: $6uUbQ$uint16,\n  type: new $6uUbQ$String(4),\n  data: new $6uUbQ$Buffer(t => t.parent.buflen - t._currentOffset)\n});\nclass $25d8f049c222084c$export$2e2bcd8739ae039 extends (0, $69aac16029968692$export$2e2bcd8739ae039) {\n  /**\n  * Returns an object representing a glyph image at the given point size.\n  * The object has a data property with a Buffer containing the actual image data,\n  * along with the image type, and origin.\n  *\n  * @param {number} size\n  * @return {object}\n  */\n  getImageForSize(size) {\n    for (let i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) break;\n    }\n    let offsets = table.imageOffsets;\n    let start = offsets[this.id];\n    let end = offsets[this.id + 1];\n    if (start === end) return null;\n    this._font.stream.pos = start;\n    return $25d8f049c222084c$var$SBIXImage.decode(this._font.stream, {\n      buflen: end - start\n    });\n  }\n  render(ctx, size) {\n    let img = this.getImageForSize(size);\n    if (img != null) {\n      let scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, {\n        height: size,\n        x: img.originX,\n        y: (this.bbox.minY - img.originY) * scale\n      });\n    }\n    if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);\n  }\n  constructor(...args) {\n    super(...args);\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"SBIX\");\n  }\n}\nclass $0d411f0165859681$var$COLRLayer {\n  constructor(glyph, color) {\n    this.glyph = glyph;\n    this.color = color;\n  }\n}\nclass $0d411f0165859681$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n  _getBBox() {\n    let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)();\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      let b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n    return bbox;\n  }\n  /**\n  * Returns an array of objects containing the glyph and color for\n  * each layer in the composite color glyph.\n  * @type {object[]}\n  */\n  get layers() {\n    let cpal = this._font.CPAL;\n    let colr = this._font.COLR;\n    let low = 0;\n    let high = colr.baseGlyphRecord.length - 1;\n    while (low <= high) {\n      let mid = low + high >> 1;\n      var rec = colr.baseGlyphRecord[mid];\n      if (this.id < rec.gid) high = mid - 1;else if (this.id > rec.gid) low = mid + 1;else {\n        var baseLayer = rec;\n        break;\n      }\n    }\n    // if base glyph not found in COLR table,\n    // default to normal glyph from glyf or CFF\n    if (baseLayer == null) {\n      var g = this._font._getBaseGlyph(this.id);\n      var color = {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 255\n      };\n      return [new $0d411f0165859681$var$COLRLayer(g, color)];\n    }\n    // otherwise, return an array of all the layers\n    let layers = [];\n    for (let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n      var rec = colr.layerRecords[i];\n      var color = cpal.colorRecords[rec.paletteIndex];\n      var g = this._font._getBaseGlyph(rec.gid);\n      layers.push(new $0d411f0165859681$var$COLRLayer(g, color));\n    }\n    return layers;\n  }\n  render(ctx, size) {\n    for (let {\n      glyph: glyph,\n      color: color\n    } of this.layers) {\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n    return;\n  }\n  constructor(...args) {\n    super(...args);\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"COLR\");\n  }\n}\nconst $0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst $0bb840cac04e911b$var$TUPLE_COUNT_MASK = 0x0fff;\nconst $0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD = 0x8000;\nconst $0bb840cac04e911b$var$INTERMEDIATE_TUPLE = 0x4000;\nconst $0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS = 0x2000;\nconst $0bb840cac04e911b$var$TUPLE_INDEX_MASK = 0x0fff;\nconst $0bb840cac04e911b$var$POINTS_ARE_WORDS = 0x80;\nconst $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK = 0x7f;\nconst $0bb840cac04e911b$var$DELTAS_ARE_ZERO = 0x80;\nconst $0bb840cac04e911b$var$DELTAS_ARE_WORDS = 0x40;\nconst $0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK = 0x3f;\nclass $0bb840cac04e911b$export$2e2bcd8739ae039 {\n  normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    let normalized = [];\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      let axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n    }\n    // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n    if (this.font.avar) for (var i = 0; i < this.font.avar.segment.length; i++) {\n      let segment = this.font.avar.segment[i];\n      for (let j = 0; j < segment.correspondence.length; j++) {\n        let pair = segment.correspondence[j];\n        if (j >= 1 && normalized[i] < pair.fromCoord) {\n          let prev = segment.correspondence[j - 1];\n          normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n          break;\n        }\n      }\n    }\n    return normalized;\n  }\n  transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) return;\n    let {\n      gvar: gvar\n    } = this.font;\n    if (gid >= gvar.glyphCount) return;\n    let offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) return;\n    // Read the gvar data for this glyph\n    let {\n      stream: stream\n    } = this.font;\n    stream.pos = offset;\n    if (stream.pos >= stream.length) return;\n    let tupleCount = stream.readUInt16BE();\n    let offsetToData = offset + stream.readUInt16BE();\n    if (tupleCount & $0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n    let origPoints = glyphPoints.map(pt => pt.copy());\n    tupleCount &= $0bb840cac04e911b$var$TUPLE_COUNT_MASK;\n    for (let i = 0; i < tupleCount; i++) {\n      let tupleDataSize = stream.readUInt16BE();\n      let tupleIndex = stream.readUInt16BE();\n      if (tupleIndex & $0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) tupleCoords.push(stream.readInt16BE() / 16384);\n      } else {\n        if ((tupleIndex & $0bb840cac04e911b$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error(\"Invalid gvar table\");\n        var tupleCoords = gvar.globalCoords[tupleIndex & $0bb840cac04e911b$var$TUPLE_INDEX_MASK];\n      }\n      if (tupleIndex & $0bb840cac04e911b$var$INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) startCoords.push(stream.readInt16BE() / 16384);\n        var endCoords = [];\n        for (let a1 = 0; a1 < gvar.axisCount; a1++) endCoords.push(stream.readInt16BE() / 16384);\n      }\n      // Get the factor at which to apply this tuple\n      let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      if (tupleIndex & $0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();else var points = sharedPoints;\n      // points.length = 0 means there are deltas for all points\n      let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      let xDeltas = this.decodeDeltas(nPoints);\n      let yDeltas = this.decodeDeltas(nPoints);\n      if (points.length === 0) for (let i = 0; i < glyphPoints.length; i++) {\n        var point = glyphPoints[i];\n        point.x += Math.round(xDeltas[i] * factor);\n        point.y += Math.round(yDeltas[i] * factor);\n      } else {\n        let outPoints = origPoints.map(pt => pt.copy());\n        let hasDelta = glyphPoints.map(() => false);\n        for (let i = 0; i < points.length; i++) {\n          let idx = points[i];\n          if (idx < glyphPoints.length) {\n            let point = outPoints[idx];\n            hasDelta[idx] = true;\n            point.x += Math.round(xDeltas[i] * factor);\n            point.y += Math.round(yDeltas[i] * factor);\n          }\n        }\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n        for (let i1 = 0; i1 < glyphPoints.length; i1++) {\n          let deltaX = outPoints[i1].x - origPoints[i1].x;\n          let deltaY = outPoints[i1].y - origPoints[i1].y;\n          glyphPoints[i1].x += deltaX;\n          glyphPoints[i1].y += deltaY;\n        }\n      }\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  }\n  decodePoints() {\n    let stream = this.font.stream;\n    let count = stream.readUInt8();\n    if (count & $0bb840cac04e911b$var$POINTS_ARE_WORDS) count = (count & $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    let points = new Uint16Array(count);\n    let i = 0;\n    let point = 0;\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK) + 1;\n      let fn = run & $0bb840cac04e911b$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n      for (let j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n    return points;\n  }\n  decodeDeltas(count) {\n    let stream = this.font.stream;\n    let i = 0;\n    let deltas = new Int16Array(count);\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & $0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK) + 1;\n      if (run & $0bb840cac04e911b$var$DELTAS_ARE_ZERO) i += runCount;else {\n        let fn = run & $0bb840cac04e911b$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n        for (let j = 0; j < runCount && i < count; j++) deltas[i++] = fn.call(stream);\n      }\n    }\n    return deltas;\n  }\n  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    let normalized = this.normalizedCoords;\n    let {\n      gvar: gvar\n    } = this.font;\n    let factor = 1;\n    for (let i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) continue;\n      if (normalized[i] === 0) return 0;\n      if ((tupleIndex & $0bb840cac04e911b$var$INTERMEDIATE_TUPLE) === 0) {\n        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n      }\n    }\n    return factor;\n  }\n  // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n  interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) return;\n    let point = 0;\n    while (point < points.length) {\n      let firstPoint = point;\n      // find the end point of the contour\n      let endPoint = point;\n      let pt = points[endPoint];\n      while (!pt.endContour) pt = points[++endPoint];\n      // find the first point that has a delta\n      while (point <= endPoint && !hasDelta[point]) point++;\n      if (point > endPoint) continue;\n      let firstDelta = point;\n      let curDelta = point;\n      point++;\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n        point++;\n      }\n      // shift contour if we only have a single delta\n      if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n        if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n      }\n      point = endPoint + 1;\n    }\n  }\n  deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) return;\n    let iterable = [\"x\", \"y\"];\n    for (let i = 0; i < iterable.length; i++) {\n      let k = iterable[i];\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n      let in1 = inPoints[ref1][k];\n      let in2 = inPoints[ref2][k];\n      let out1 = outPoints[ref1][k];\n      let out2 = outPoints[ref2][k];\n      // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n      if (in1 !== in2 || out1 === out2) {\n        let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n        for (let p = p1; p <= p2; p++) {\n          let out = inPoints[p][k];\n          if (out <= in1) out += out1 - in1;else if (out >= in2) out += out2 - in2;else out = out1 + (out - in1) * scale;\n          outPoints[p][k] = out;\n        }\n      }\n    }\n  }\n  deltaShift(p1, p2, ref, inPoints, outPoints) {\n    let deltaX = outPoints[ref].x - inPoints[ref].x;\n    let deltaY = outPoints[ref].y - inPoints[ref].y;\n    if (deltaX === 0 && deltaY === 0) return;\n    for (let p = p1; p <= p2; p++) if (p !== ref) {\n      outPoints[p].x += deltaX;\n      outPoints[p].y += deltaY;\n    }\n  }\n  getAdvanceAdjustment(gid, table) {\n    let outerIndex, innerIndex;\n    if (table.advanceWidthMapping) {\n      let idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;\n      let entryFormat = table.advanceWidthMapping.entryFormat;\n      ({\n        outerIndex: outerIndex,\n        innerIndex: innerIndex\n      } = table.advanceWidthMapping.mapData[idx]);\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  }\n  // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n  getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) return 0;\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) return 0;\n    let deltaSet = varData.deltaSets[innerIndex];\n    let blendVector = this.getBlendVector(itemStore, outerIndex);\n    let netAdjustment = 0;\n    for (let master = 0; master < varData.regionIndexCount; master++) netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    return netAdjustment;\n  }\n  getBlendVector(itemStore, outerIndex) {\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);\n    let normalizedCoords = this.normalizedCoords;\n    let blendVector = [];\n    // outer loop steps through master designs to be blended\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      let scalar = 1;\n      let regionIndex = varData.regionIndexes[master];\n      let axes = itemStore.variationRegionList.variationRegions[regionIndex];\n      // inner loop steps through axes in this region\n      for (let j = 0; j < axes.length; j++) {\n        let axis = axes[j];\n        let axisScalar;\n        // compute the scalar contribution of this axis\n        // ignore invalid ranges\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;else if (axis.peakCoord === 0) axisScalar = 1;else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;else {\n          if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n        }\n        // take product of all the axis scalars\n        scalar *= axisScalar;\n      }\n      blendVector[master] = scalar;\n    }\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  }\n  constructor(font, coords) {\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map();\n  }\n}\nconst $5cc7476da92df375$var$resolved = Promise.resolve();\nclass $5cc7476da92df375$export$2e2bcd8739ae039 {\n  includeGlyph(glyph) {\n    if (typeof glyph === \"object\") glyph = glyph.id;\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n    return this.mapping[glyph];\n  }\n  constructor(font) {\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {};\n    // always include the missing glyph\n    this.includeGlyph(0);\n  }\n}\n\n// Flags for simple glyphs\nconst $807e58506be70005$var$ON_CURVE = 1;\nconst $807e58506be70005$var$X_SHORT_VECTOR = 2;\nconst $807e58506be70005$var$Y_SHORT_VECTOR = 4;\nconst $807e58506be70005$var$REPEAT = 8;\nconst $807e58506be70005$var$SAME_X = 16;\nconst $807e58506be70005$var$SAME_Y = 32;\nclass $807e58506be70005$var$Point {\n  static size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  }\n  static encode(stream, value) {\n    if (value >= 0 && value <= 255) stream.writeUInt8(value);else stream.writeInt16BE(value);\n  }\n}\nlet $807e58506be70005$var$Glyf = new $6uUbQ$Struct({\n  numberOfContours: $6uUbQ$int16,\n  xMin: $6uUbQ$int16,\n  yMin: $6uUbQ$int16,\n  xMax: $6uUbQ$int16,\n  yMax: $6uUbQ$int16,\n  endPtsOfContours: new $6uUbQ$Array($6uUbQ$uint16, \"numberOfContours\"),\n  instructions: new $6uUbQ$Array($6uUbQ$uint8, $6uUbQ$uint16),\n  flags: new $6uUbQ$Array($6uUbQ$uint8, 0),\n  xPoints: new $6uUbQ$Array($807e58506be70005$var$Point, 0),\n  yPoints: new $6uUbQ$Array($807e58506be70005$var$Point, 0)\n});\nclass $807e58506be70005$export$2e2bcd8739ae039 {\n  encodeSimple(path, instructions = []) {\n    let endPtsOfContours = [];\n    let xPoints = [];\n    let yPoints = [];\n    let flags = [];\n    let same = 0;\n    let lastX = 0,\n      lastY = 0,\n      lastFlag = 0;\n    let pointCount = 0;\n    for (let i = 0; i < path.commands.length; i++) {\n      let c = path.commands[i];\n      for (let j = 0; j < c.args.length; j += 2) {\n        let x = c.args[j];\n        let y = c.args[j + 1];\n        let flag = 0;\n        // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n        if (c.command === \"quadraticCurveTo\" && j === 2) {\n          let next = path.commands[i + 1];\n          if (next && next.command === \"quadraticCurveTo\") {\n            let midX = (lastX + next.args[0]) / 2;\n            let midY = (lastY + next.args[1]) / 2;\n            if (x === midX && y === midY) continue;\n          }\n        }\n        // All points except control points are on curve.\n        if (!(c.command === \"quadraticCurveTo\" && j === 0)) flag |= $807e58506be70005$var$ON_CURVE;\n        flag = this._encodePoint(x, lastX, xPoints, flag, $807e58506be70005$var$X_SHORT_VECTOR, $807e58506be70005$var$SAME_X);\n        flag = this._encodePoint(y, lastY, yPoints, flag, $807e58506be70005$var$Y_SHORT_VECTOR, $807e58506be70005$var$SAME_Y);\n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= $807e58506be70005$var$REPEAT;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n          flags.push(flag);\n          lastFlag = flag;\n        }\n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n      if (c.command === \"closePath\") endPtsOfContours.push(pointCount - 1);\n    }\n    // Close the path if the last command didn't already\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== \"closePath\") endPtsOfContours.push(pointCount - 1);\n    let bbox = path.bbox;\n    let glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n    let size = $807e58506be70005$var$Glyf.size(glyf);\n    let tail = 4 - size % 4;\n    let stream = new $6uUbQ$EncodeStream(size + tail);\n    $807e58506be70005$var$Glyf.encode(stream, glyf);\n    // Align to 4-byte length\n    if (tail !== 0) stream.fill(0, tail);\n    return stream.buffer;\n  }\n  _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    let diff = value - last;\n    if (value === last) flag |= sameFlag;else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) diff = -diff;else flag |= sameFlag;\n      }\n      points.push(diff);\n    }\n    return flag;\n  }\n}\nclass $4abbb6a5dbdc441a$export$2e2bcd8739ae039 extends (0, $5cc7476da92df375$export$2e2bcd8739ae039) {\n  _addGlyph(gid) {\n    let glyph = this.font.getGlyph(gid);\n    let glyf = glyph._decode();\n    // get the offset to the glyph from the loca table\n    let curOffset = this.font.loca.offsets[gid];\n    let nextOffset = this.font.loca.offsets[gid + 1];\n    let stream = this.font._getTableStream(\"glyf\");\n    stream.pos += curOffset;\n    let buffer = stream.readBuffer(nextOffset - curOffset);\n    // if it is a compound glyph, include its components\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = new Uint8Array(buffer);\n      let view = new DataView(buffer.buffer);\n      for (let component of glyf.components) {\n        gid = this.includeGlyph(component.glyphID);\n        view.setUint16(component.pos, gid);\n      }\n    } else if (glyf && this.font._variationProcessor)\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  }\n  encode() {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: [],\n      version: this.font.loca.version\n    };\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    };\n    // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n    let i = 0;\n    while (i < this.glyphs.length) this._addGlyph(this.glyphs[i++]);\n    let maxp = (0, $6uUbQ$clone)(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n    this.loca.offsets.push(this.offset);\n    let head = (0, $6uUbQ$clone)(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n    let hhea = (0, $6uUbQ$clone)(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length;\n    // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n    // TODO: subset prep, cvt, fpgm?\n    return (0, $816c07a04b6dba87$export$2e2bcd8739ae039).toBuffer({\n      tables: {\n        head: head,\n        hhea: hhea,\n        loca: this.loca,\n        maxp: maxp,\n        \"cvt \": this.font[\"cvt \"],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n      }\n    });\n  }\n  constructor(font) {\n    super(font);\n    this.glyphEncoder = new (0, $807e58506be70005$export$2e2bcd8739ae039)();\n  }\n}\nclass $001d739428a71d5a$export$2e2bcd8739ae039 extends (0, $5cc7476da92df375$export$2e2bcd8739ae039) {\n  subsetCharstrings() {\n    this.charstrings = [];\n    let gsubrs = {};\n    for (let gid of this.glyphs) {\n      this.charstrings.push(this.cff.getCharString(gid));\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedGsubrs) gsubrs[subr] = true;\n    }\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  }\n  subsetSubrs(subrs, used) {\n    let res = [];\n    for (let i = 0; i < subrs.length; i++) {\n      let subr = subrs[i];\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else res.push(new Uint8Array([11])); // return\n    }\n    return res;\n  }\n  subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n    let used_fds = {};\n    let used_subrs = [];\n    let fd_select = {};\n    for (let gid of this.glyphs) {\n      let fd = this.cff.fdForGlyph(gid);\n      if (fd == null) continue;\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n        fd_select[fd] = topDict.FDArray.length - 1;\n      }\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(fd_select[fd]);\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedSubrs) used_subrs[fd_select[fd]][subr] = true;\n    }\n    for (let i = 0; i < topDict.FDArray.length; i++) {\n      let dict = topDict.FDArray[i];\n      delete dict.FontName;\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n    return;\n  }\n  createCIDFontdict(topDict) {\n    let used_subrs = {};\n    for (let gid of this.glyphs) {\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedSubrs) used_subrs[subr] = true;\n    }\n    let privateDict = Object.assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    topDict.FDArray = [{\n      Private: privateDict\n    }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{\n        first: 0,\n        fd: 0\n      }],\n      sentinel: this.charstrings.length\n    };\n  }\n  addString(string) {\n    if (!string) return null;\n    if (!this.strings) this.strings = [];\n    this.strings.push(string);\n    return (0, $229224aec43783c5$export$2e2bcd8739ae039).length + this.strings.length - 1;\n  }\n  encode() {\n    this.subsetCharstrings();\n    let charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{\n        first: 1,\n        nLeft: this.charstrings.length - 2\n      }]\n    };\n    let topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n    for (let key of [\"version\", \"Notice\", \"Copyright\", \"FullName\", \"FamilyName\", \"Weight\", \"PostScript\", \"BaseFontName\", \"FontName\"]) topDict[key] = this.addString(this.cff.string(topDict[key]));\n    topDict.ROS = [this.addString(\"Adobe\"), this.addString(\"Identity\"), 0];\n    topDict.CIDCount = this.charstrings.length;\n    if (this.cff.isCIDFont) this.subsetFontdict(topDict);else this.createCIDFontdict(topDict);\n    let top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: 4,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n    return (0, $b84fd3dd9d8eddb2$export$2e2bcd8739ae039).toBuffer(top);\n  }\n  constructor(font) {\n    super(font);\n    this.cff = this.font[\"CFF \"];\n    if (!this.cff) throw new Error(\"Not a CFF Font\");\n  }\n}\nclass $4c1709dee528ea76$export$2e2bcd8739ae039 {\n  static probe(buffer) {\n    let format = (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4));\n    return format === \"true\" || format === \"OTTO\" || format === String.fromCharCode(0, 1, 0, 0);\n  }\n  setDefaultLanguage(lang = null) {\n    this.defaultLanguage = lang;\n  }\n  _getTable(table) {\n    if (!(table.tag in this._tables)) try {\n      this._tables[table.tag] = this._decodeTable(table);\n    } catch (e) {\n      if ($d636bc798e7178db$export$bd5c5d8b8dcafd78) {\n        console.error(`Error decoding table ${table.tag}`);\n        console.error(e.stack);\n      }\n    }\n    return this._tables[table.tag];\n  }\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n    return null;\n  }\n  _decodeDirectory() {\n    return this.directory = (0, $816c07a04b6dba87$export$2e2bcd8739ae039).decode(this.stream, {\n      _startOffset: 0\n    });\n  }\n  _decodeTable(table) {\n    let pos = this.stream.pos;\n    let stream = this._getTableStream(table.tag);\n    let result = (0, $c3395722bea751e2$export$2e2bcd8739ae039)[table.tag].decode(stream, this, table.length);\n    this.stream.pos = pos;\n    return result;\n  }\n  /**\n  * Gets a string from the font's `name` table\n  * `lang` is a BCP-47 language code.\n  * @return {string}\n  */\n  getName(key, lang = this.defaultLanguage || $d636bc798e7178db$export$42940898df819940) {\n    let record = this.name && this.name.records[key];\n    if (record)\n      // Attempt to retrieve the entry, depending on which translation is available:\n      return record[lang] || record[this.defaultLanguage] || record[$d636bc798e7178db$export$42940898df819940] || record[\"en\"] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n      || null;\n    return null;\n  }\n  /**\n  * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n  * @type {string}\n  */\n  get postscriptName() {\n    return this.getName(\"postscriptName\");\n  }\n  /**\n  * The font's full name, e.g. \"Helvetica Bold\"\n  * @type {string}\n  */\n  get fullName() {\n    return this.getName(\"fullName\");\n  }\n  /**\n  * The font's family name, e.g. \"Helvetica\"\n  * @type {string}\n  */\n  get familyName() {\n    return this.getName(\"fontFamily\");\n  }\n  /**\n  * The font's sub-family, e.g. \"Bold\".\n  * @type {string}\n  */\n  get subfamilyName() {\n    return this.getName(\"fontSubfamily\");\n  }\n  /**\n  * The font's copyright information\n  * @type {string}\n  */\n  get copyright() {\n    return this.getName(\"copyright\");\n  }\n  /**\n  * The font's version number\n  * @type {string}\n  */\n  get version() {\n    return this.getName(\"version\");\n  }\n  /**\n  * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n  * @type {number}\n  */\n  get ascent() {\n    return this.hhea.ascent;\n  }\n  /**\n  * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n  * @type {number}\n  */\n  get descent() {\n    return this.hhea.descent;\n  }\n  /**\n  * The amount of space that should be included between lines\n  * @type {number}\n  */\n  get lineGap() {\n    return this.hhea.lineGap;\n  }\n  /**\n  * The offset from the normal underline position that should be used\n  * @type {number}\n  */\n  get underlinePosition() {\n    return this.post.underlinePosition;\n  }\n  /**\n  * The weight of the underline that should be used\n  * @type {number}\n  */\n  get underlineThickness() {\n    return this.post.underlineThickness;\n  }\n  /**\n  * If this is an italic font, the angle the cursor should be drawn at to match the font design\n  * @type {number}\n  */\n  get italicAngle() {\n    return this.post.italicAngle;\n  }\n  /**\n  * The height of capital letters above the baseline.\n  * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n  * @type {number}\n  */\n  get capHeight() {\n    let os2 = this[\"OS/2\"];\n    return os2 ? os2.capHeight : this.ascent;\n  }\n  /**\n  * The height of lower case letters in the font.\n  * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n  * @type {number}\n  */\n  get xHeight() {\n    let os2 = this[\"OS/2\"];\n    return os2 ? os2.xHeight : 0;\n  }\n  /**\n  * The number of glyphs in the font.\n  * @type {number}\n  */\n  get numGlyphs() {\n    return this.maxp.numGlyphs;\n  }\n  /**\n  * The size of the font’s internal coordinate grid\n  * @type {number}\n  */\n  get unitsPerEm() {\n    return this.head.unitsPerEm;\n  }\n  /**\n  * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n  * @type {BBox}\n  */\n  get bbox() {\n    return Object.freeze(new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n  }\n  get _cmapProcessor() {\n    return new (0, $f08dd41ef10b694c$export$2e2bcd8739ae039)(this.cmap);\n  }\n  /**\n  * An array of all of the unicode code points supported by the font.\n  * @type {number[]}\n  */\n  get characterSet() {\n    return this._cmapProcessor.getCharacterSet();\n  }\n  /**\n  * Returns whether there is glyph in the font for the given unicode code point.\n  *\n  * @param {number} codePoint\n  * @return {boolean}\n  */\n  hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  }\n  /**\n  * Maps a single unicode code point to a Glyph object.\n  * Does not perform any advanced substitutions (there is no context to do so).\n  *\n  * @param {number} codePoint\n  * @return {Glyph}\n  */\n  glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  }\n  /**\n  * Returns an array of Glyph objects for the given string.\n  * This is only a one-to-one mapping from characters to glyphs.\n  * For most uses, you should use font.layout (described below), which\n  * provides a much more advanced mapping supporting AAT and OpenType shaping.\n  *\n  * @param {string} string\n  * @return {Glyph[]}\n  */\n  glyphsForString(string) {\n    let glyphs = [];\n    let len = string.length;\n    let idx = 0;\n    let last = -1;\n    let state = -1;\n    while (idx <= len) {\n      let code = 0;\n      let nextState = 0;\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          let next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else idx++;\n      if (state === 0 && nextState === 1)\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));else if (state === 0 && nextState === 0)\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      last = code;\n      state = nextState;\n    }\n    return glyphs;\n  }\n  get _layoutEngine() {\n    return new (0, $4c0a7fa5df7a9ab1$export$2e2bcd8739ae039)(this);\n  }\n  /**\n  * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n  *\n  * @param {string} string\n  * @param {string[]} [userFeatures]\n  * @param {string} [script]\n  * @param {string} [language]\n  * @param {string} [direction]\n  * @return {GlyphRun}\n  */\n  layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  }\n  /**\n  * Returns an array of strings that map to the given glyph id.\n  * @param {number} gid - glyph id\n  */\n  stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  }\n  /**\n  * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n  * (or mapped AAT tags) supported by the font.\n  * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n  * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n  *\n  * @type {string[]}\n  */\n  get availableFeatures() {\n    return this._layoutEngine.getAvailableFeatures();\n  }\n  getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  }\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) this._glyphs[glyph] = new (0, $69aac16029968692$export$2e2bcd8739ae039)(glyph, characters, this);else if (this.directory.tables[\"CFF \"] || this.directory.tables.CFF2) this._glyphs[glyph] = new (0, $62cc5109c6101893$export$2e2bcd8739ae039)(glyph, characters, this);\n    }\n    return this._glyphs[glyph] || null;\n  }\n  /**\n  * Returns a glyph object for the given glyph id.\n  * You can pass the array of code points this glyph represents for\n  * your use later, and it will be stored in the glyph object.\n  *\n  * @param {number} glyph\n  * @param {number[]} characters\n  * @return {Glyph}\n  */\n  getGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) this._glyphs[glyph] = new (0, $25d8f049c222084c$export$2e2bcd8739ae039)(glyph, characters, this);else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new (0, $0d411f0165859681$export$2e2bcd8739ae039)(glyph, characters, this);else this._getBaseGlyph(glyph, characters);\n    }\n    return this._glyphs[glyph] || null;\n  }\n  /**\n  * Returns a Subset for this font.\n  * @return {Subset}\n  */\n  createSubset() {\n    if (this.directory.tables[\"CFF \"]) return new (0, $001d739428a71d5a$export$2e2bcd8739ae039)(this);\n    return new (0, $4abbb6a5dbdc441a$export$2e2bcd8739ae039)(this);\n  }\n  /**\n  * Returns an object describing the available variation axes\n  * that this font supports. Keys are setting tags, and values\n  * contain the axis name, range, and default value.\n  *\n  * @type {object}\n  */\n  get variationAxes() {\n    let res = {};\n    if (!this.fvar) return res;\n    for (let axis of this.fvar.axis) res[axis.axisTag.trim()] = {\n      name: axis.name.en,\n      min: axis.minValue,\n      default: axis.defaultValue,\n      max: axis.maxValue\n    };\n    return res;\n  }\n  /**\n  * Returns an object describing the named variation instances\n  * that the font designer has specified. Keys are variation names\n  * and values are the variation settings for this instance.\n  *\n  * @type {object}\n  */\n  get namedVariations() {\n    let res = {};\n    if (!this.fvar) return res;\n    for (let instance of this.fvar.instance) {\n      let settings = {};\n      for (let i = 0; i < this.fvar.axis.length; i++) {\n        let axis = this.fvar.axis[i];\n        settings[axis.axisTag.trim()] = instance.coord[i];\n      }\n      res[instance.name.en] = settings;\n    }\n    return res;\n  }\n  /**\n  * Returns a new font with the given variation settings applied.\n  * Settings can either be an instance name, or an object containing\n  * variation tags as specified by the `variationAxes` property.\n  *\n  * @param {object} settings\n  * @return {TTFFont}\n  */\n  getVariation(settings) {\n    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error(\"Variations require a font with the fvar, gvar and glyf, or CFF2 tables.\");\n    if (typeof settings === \"string\") settings = this.namedVariations[settings];\n    if (typeof settings !== \"object\") throw new Error(\"Variation settings must be either a variation name or settings object.\");\n    // normalize the coordinates\n    let coords = this.fvar.axis.map((axis, i) => {\n      let axisTag = axis.axisTag.trim();\n      if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));else return axis.defaultValue;\n    });\n    let stream = new $6uUbQ$DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n    let font = new $4c1709dee528ea76$export$2e2bcd8739ae039(stream, coords);\n    font._tables = this._tables;\n    return font;\n  }\n  get _variationProcessor() {\n    if (!this.fvar) return null;\n    let variationCoords = this.variationCoords;\n    // Ignore if no variation coords and not CFF2\n    if (!variationCoords && !this.CFF2) return null;\n    if (!variationCoords) variationCoords = this.fvar.axis.map(axis => axis.defaultValue);\n    return new (0, $0bb840cac04e911b$export$2e2bcd8739ae039)(this, variationCoords);\n  }\n  // Standardized format plugin API\n  getFont(name) {\n    return this.getVariation(name);\n  }\n  constructor(stream, variationCoords = null) {\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"TTF\");\n    this.defaultLanguage = null;\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n    this._decodeDirectory();\n    // define properties for each table to lazily parse\n    for (let tag in this.directory.tables) {\n      let table = this.directory.tables[tag];\n      if ((0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag] && table.length > 0) Object.defineProperty(this, tag, {\n        get: this._getTable.bind(this, table)\n      });\n    }\n  }\n}\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"bbox\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_cmapProcessor\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"characterSet\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_layoutEngine\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"variationAxes\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"namedVariations\", null);\n(0, $6uUbQ$swchelperssrc_ts_decoratemjs)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_variationProcessor\", null);\nlet $c1726355ecc5b889$var$WOFFDirectoryEntry = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  offset: new $6uUbQ$Pointer($6uUbQ$uint32, \"void\", {\n    type: \"global\"\n  }),\n  compLength: $6uUbQ$uint32,\n  length: $6uUbQ$uint32,\n  origChecksum: $6uUbQ$uint32\n});\nlet $c1726355ecc5b889$var$WOFFDirectory = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  flavor: $6uUbQ$uint32,\n  length: $6uUbQ$uint32,\n  numTables: $6uUbQ$uint16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n  totalSfntSize: $6uUbQ$uint32,\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  metaOffset: $6uUbQ$uint32,\n  metaLength: $6uUbQ$uint32,\n  metaOrigLength: $6uUbQ$uint32,\n  privOffset: $6uUbQ$uint32,\n  privLength: $6uUbQ$uint32,\n  tables: new $6uUbQ$Array($c1726355ecc5b889$var$WOFFDirectoryEntry, \"numTables\")\n});\n$c1726355ecc5b889$var$WOFFDirectory.process = function () {\n  let tables1 = {};\n  for (let table of this.tables) tables1[table.tag] = table;\n  this.tables = tables1;\n};\nvar $c1726355ecc5b889$export$2e2bcd8739ae039 = $c1726355ecc5b889$var$WOFFDirectory;\nclass $760785214b9fc52c$export$2e2bcd8739ae039 extends (0, $4c1709dee528ea76$export$2e2bcd8739ae039) {\n  static probe(buffer) {\n    return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === \"wOFF\";\n  }\n  _decodeDirectory() {\n    this.directory = (0, $c1726355ecc5b889$export$2e2bcd8739ae039).decode(this.stream, {\n      _startOffset: 0\n    });\n  }\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n        let outBuffer = new Uint8Array(table.length);\n        let buf = (0, $6uUbQ$tinyinflate)(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new $6uUbQ$DecodeStream(buf);\n      } else return this.stream;\n    }\n    return null;\n  }\n  constructor(...args) {\n    super(...args);\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"WOFF\");\n  }\n}\nclass $8046190c9f1ad19e$export$2e2bcd8739ae039 extends (0, $69aac16029968692$export$2e2bcd8739ae039) {\n  _decode() {\n    // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n    return this._font._transformedGlyphs[this.id];\n  }\n  _getCBox() {\n    return this.path.bbox;\n  }\n  constructor(...args) {\n    super(...args);\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"WOFF2\");\n  }\n}\nconst $c28ec7bbb3b8de3a$var$Base128 = {\n  decode(stream) {\n    let result = 0;\n    let iterable = [0, 1, 2, 3, 4];\n    for (let j = 0; j < iterable.length; j++) {\n      let i = iterable[j];\n      let code = stream.readUInt8();\n      // If any of the top seven bits are set then we're about to overflow.\n      if (result & 0xe0000000) throw new Error(\"Overflow\");\n      result = result << 7 | code & 0x7f;\n      if ((code & 0x80) === 0) return result;\n    }\n    throw new Error(\"Bad base 128 number\");\n  }\n};\nlet $c28ec7bbb3b8de3a$var$knownTags = [\"cmap\", \"head\", \"hhea\", \"hmtx\", \"maxp\", \"name\", \"OS/2\", \"post\", \"cvt \", \"fpgm\", \"glyf\", \"loca\", \"prep\", \"CFF \", \"VORG\", \"EBDT\", \"EBLC\", \"gasp\", \"hdmx\", \"kern\", \"LTSH\", \"PCLT\", \"VDMX\", \"vhea\", \"vmtx\", \"BASE\", \"GDEF\", \"GPOS\", \"GSUB\", \"EBSC\", \"JSTF\", \"MATH\", \"CBDT\", \"CBLC\", \"COLR\", \"CPAL\", \"SVG \", \"sbix\", \"acnt\", \"avar\", \"bdat\", \"bloc\", \"bsln\", \"cvar\", \"fdsc\", \"feat\", \"fmtx\", \"fvar\", \"gvar\", \"hsty\", \"just\", \"lcar\", \"mort\", \"morx\", \"opbd\", \"prop\", \"trak\", \"Zapf\", \"Silf\", \"Glat\", \"Gloc\", \"Feat\", \"Sill\"];\nlet $c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry = new $6uUbQ$Struct({\n  flags: $6uUbQ$uint8,\n  customTag: new $6uUbQ$Optional(new $6uUbQ$String(4), t => (t.flags & 0x3f) === 0x3f),\n  tag: t => t.customTag || $c28ec7bbb3b8de3a$var$knownTags[t.flags & 0x3f],\n  length: $c28ec7bbb3b8de3a$var$Base128,\n  transformVersion: t => t.flags >>> 6 & 0x03,\n  transformed: t => t.tag === \"glyf\" || t.tag === \"loca\" ? t.transformVersion === 0 : t.transformVersion !== 0,\n  transformLength: new $6uUbQ$Optional($c28ec7bbb3b8de3a$var$Base128, t => t.transformed)\n});\nlet $c28ec7bbb3b8de3a$var$WOFF2Directory = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  flavor: $6uUbQ$uint32,\n  length: $6uUbQ$uint32,\n  numTables: $6uUbQ$uint16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n  totalSfntSize: $6uUbQ$uint32,\n  totalCompressedSize: $6uUbQ$uint32,\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  metaOffset: $6uUbQ$uint32,\n  metaLength: $6uUbQ$uint32,\n  metaOrigLength: $6uUbQ$uint32,\n  privOffset: $6uUbQ$uint32,\n  privLength: $6uUbQ$uint32,\n  tables: new $6uUbQ$Array($c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry, \"numTables\")\n});\n$c28ec7bbb3b8de3a$var$WOFF2Directory.process = function () {\n  let tables = {};\n  for (let i = 0; i < this.tables.length; i++) {\n    let table = this.tables[i];\n    tables[table.tag] = table;\n  }\n  return this.tables = tables;\n};\nvar $c28ec7bbb3b8de3a$export$2e2bcd8739ae039 = $c28ec7bbb3b8de3a$var$WOFF2Directory;\nclass $21ee218f84ac7f32$export$2e2bcd8739ae039 extends (0, $4c1709dee528ea76$export$2e2bcd8739ae039) {\n  static probe(buffer) {\n    return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === \"wOF2\";\n  }\n  _decodeDirectory() {\n    this.directory = (0, $c28ec7bbb3b8de3a$export$2e2bcd8739ae039).decode(this.stream);\n    this._dataPos = this.stream.pos;\n  }\n  _decompress() {\n    // decompress data and setup table offsets if we haven't already\n    if (!this._decompressed) {\n      this.stream.pos = this._dataPos;\n      let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n      let decompressedSize = 0;\n      for (let tag in this.directory.tables) {\n        let entry = this.directory.tables[tag];\n        entry.offset = decompressedSize;\n        decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;\n      }\n      let decompressed = (0, $6uUbQ$brotlidecompressjs)(buffer, decompressedSize);\n      if (!decompressed) throw new Error(\"Error decoding compressed data in WOFF2\");\n      this.stream = new $6uUbQ$DecodeStream(decompressed);\n      this._decompressed = true;\n    }\n  }\n  _decodeTable(table) {\n    this._decompress();\n    return super._decodeTable(table);\n  }\n  // Override this method to get a glyph and return our\n  // custom subclass if there is a glyf table.\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n        if (!this._transformedGlyphs) this._transformGlyfTable();\n        return this._glyphs[glyph] = new (0, $8046190c9f1ad19e$export$2e2bcd8739ae039)(glyph, characters, this);\n      } else return super._getBaseGlyph(glyph, characters);\n    }\n  }\n  _transformGlyfTable() {\n    this._decompress();\n    this.stream.pos = this.directory.tables.glyf.offset;\n    let table = $21ee218f84ac7f32$var$GlyfTable.decode(this.stream);\n    let glyphs = [];\n    for (let index = 0; index < table.numGlyphs; index++) {\n      let glyph = {};\n      let nContours = table.nContours.readInt16BE();\n      glyph.numberOfContours = nContours;\n      if (nContours > 0) {\n        let nPoints = [];\n        let totalPoints = 0;\n        for (let i = 0; i < nContours; i++) {\n          let r1 = $21ee218f84ac7f32$var$read255UInt16(table.nPoints);\n          totalPoints += r1;\n          nPoints.push(totalPoints);\n        }\n        glyph.points = $21ee218f84ac7f32$var$decodeTriplet(table.flags, table.glyphs, totalPoints);\n        for (let i1 = 0; i1 < nContours; i1++) glyph.points[nPoints[i1] - 1].endContour = true;\n        var instructionSize = $21ee218f84ac7f32$var$read255UInt16(table.glyphs);\n      } else if (nContours < 0) {\n        let haveInstructions = (0, $69aac16029968692$export$2e2bcd8739ae039).prototype._decodeComposite.call({\n          _font: this\n        }, glyph, table.composites);\n        if (haveInstructions) var instructionSize = $21ee218f84ac7f32$var$read255UInt16(table.glyphs);\n      }\n      glyphs.push(glyph);\n    }\n    this._transformedGlyphs = glyphs;\n  }\n  constructor(...args) {\n    super(...args);\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"WOFF2\");\n  }\n}\n// Special class that accepts a length and returns a sub-stream for that data\nclass $21ee218f84ac7f32$var$Substream {\n  decode(stream, parent) {\n    return new $6uUbQ$DecodeStream(this._buf.decode(stream, parent));\n  }\n  constructor(length) {\n    this.length = length;\n    this._buf = new $6uUbQ$Buffer(length);\n  }\n}\n// This struct represents the entire glyf table\nlet $21ee218f84ac7f32$var$GlyfTable = new $6uUbQ$Struct({\n  version: $6uUbQ$uint32,\n  numGlyphs: $6uUbQ$uint16,\n  indexFormat: $6uUbQ$uint16,\n  nContourStreamSize: $6uUbQ$uint32,\n  nPointsStreamSize: $6uUbQ$uint32,\n  flagStreamSize: $6uUbQ$uint32,\n  glyphStreamSize: $6uUbQ$uint32,\n  compositeStreamSize: $6uUbQ$uint32,\n  bboxStreamSize: $6uUbQ$uint32,\n  instructionStreamSize: $6uUbQ$uint32,\n  nContours: new $21ee218f84ac7f32$var$Substream(\"nContourStreamSize\"),\n  nPoints: new $21ee218f84ac7f32$var$Substream(\"nPointsStreamSize\"),\n  flags: new $21ee218f84ac7f32$var$Substream(\"flagStreamSize\"),\n  glyphs: new $21ee218f84ac7f32$var$Substream(\"glyphStreamSize\"),\n  composites: new $21ee218f84ac7f32$var$Substream(\"compositeStreamSize\"),\n  bboxes: new $21ee218f84ac7f32$var$Substream(\"bboxStreamSize\"),\n  instructions: new $21ee218f84ac7f32$var$Substream(\"instructionStreamSize\")\n});\nconst $21ee218f84ac7f32$var$WORD_CODE = 253;\nconst $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2 = 254;\nconst $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1 = 255;\nconst $21ee218f84ac7f32$var$LOWEST_U_CODE = 253;\nfunction $21ee218f84ac7f32$var$read255UInt16(stream) {\n  let code = stream.readUInt8();\n  if (code === $21ee218f84ac7f32$var$WORD_CODE) return stream.readUInt16BE();\n  if (code === $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $21ee218f84ac7f32$var$LOWEST_U_CODE;\n  if (code === $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $21ee218f84ac7f32$var$LOWEST_U_CODE * 2;\n  return code;\n}\nfunction $21ee218f84ac7f32$var$withSign(flag, baseval) {\n  return flag & 1 ? baseval : -baseval;\n}\nfunction $21ee218f84ac7f32$var$decodeTriplet(flags, glyphs, nPoints) {\n  let y;\n  let x = y = 0;\n  let res = [];\n  for (let i = 0; i < nPoints; i++) {\n    let dx = 0,\n      dy = 0;\n    let flag = flags.readUInt8();\n    let onCurve = !(flag >> 7);\n    flag &= 0x7f;\n    if (flag < 10) {\n      dx = 0;\n      dy = $21ee218f84ac7f32$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n    } else if (flag < 20) {\n      dx = $21ee218f84ac7f32$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());\n      dy = 0;\n    } else if (flag < 84) {\n      var b0 = flag - 20;\n      var b1 = glyphs.readUInt8();\n      dx = $21ee218f84ac7f32$var$withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n      dy = $21ee218f84ac7f32$var$withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n    } else if (flag < 120) {\n      var b0 = flag - 84;\n      dx = $21ee218f84ac7f32$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());\n      dy = $21ee218f84ac7f32$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());\n    } else if (flag < 124) {\n      var b1 = glyphs.readUInt8();\n      let b2 = glyphs.readUInt8();\n      dx = $21ee218f84ac7f32$var$withSign(flag, (b1 << 4) + (b2 >> 4));\n      dy = $21ee218f84ac7f32$var$withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n    } else {\n      dx = $21ee218f84ac7f32$var$withSign(flag, glyphs.readUInt16BE());\n      dy = $21ee218f84ac7f32$var$withSign(flag >> 1, glyphs.readUInt16BE());\n    }\n    x += dx;\n    y += dy;\n    res.push(new (0, $69aac16029968692$export$baf26146a414f24a)(onCurve, false, x, y));\n  }\n  return res;\n}\nlet $cd5853a56c68fec7$var$TTCHeader = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  0x00010000: {\n    numFonts: $6uUbQ$uint32,\n    offsets: new $6uUbQ$Array($6uUbQ$uint32, \"numFonts\")\n  },\n  0x00020000: {\n    numFonts: $6uUbQ$uint32,\n    offsets: new $6uUbQ$Array($6uUbQ$uint32, \"numFonts\"),\n    dsigTag: $6uUbQ$uint32,\n    dsigLength: $6uUbQ$uint32,\n    dsigOffset: $6uUbQ$uint32\n  }\n});\nclass $cd5853a56c68fec7$export$2e2bcd8739ae039 {\n  static probe(buffer) {\n    return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === \"ttcf\";\n  }\n  getFont(name) {\n    for (let offset of this.header.offsets) {\n      let stream = new $6uUbQ$DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      let font = new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream);\n      if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i) => name[i] === v)) return font;\n    }\n    return null;\n  }\n  get fonts() {\n    let fonts = [];\n    for (let offset of this.header.offsets) {\n      let stream = new $6uUbQ$DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      fonts.push(new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream));\n    }\n    return fonts;\n  }\n  constructor(stream) {\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"TTC\");\n    this.stream = stream;\n    if (stream.readString(4) !== \"ttcf\") throw new Error(\"Not a TrueType collection\");\n    this.header = $cd5853a56c68fec7$var$TTCHeader.decode(stream);\n  }\n}\nlet $05f49f930186144e$var$DFontName = new $6uUbQ$String($6uUbQ$uint8);\nlet $05f49f930186144e$var$DFontData = new $6uUbQ$Struct({\n  len: $6uUbQ$uint32,\n  buf: new $6uUbQ$Buffer(\"len\")\n});\nlet $05f49f930186144e$var$Ref = new $6uUbQ$Struct({\n  id: $6uUbQ$uint16,\n  nameOffset: $6uUbQ$int16,\n  attr: $6uUbQ$uint8,\n  dataOffset: $6uUbQ$uint24,\n  handle: $6uUbQ$uint32\n});\nlet $05f49f930186144e$var$Type = new $6uUbQ$Struct({\n  name: new $6uUbQ$String(4),\n  maxTypeIndex: $6uUbQ$uint16,\n  refList: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$Array($05f49f930186144e$var$Ref, t => t.maxTypeIndex + 1), {\n    type: \"parent\"\n  })\n});\nlet $05f49f930186144e$var$TypeList = new $6uUbQ$Struct({\n  length: $6uUbQ$uint16,\n  types: new $6uUbQ$Array($05f49f930186144e$var$Type, t => t.length + 1)\n});\nlet $05f49f930186144e$var$DFontMap = new $6uUbQ$Struct({\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint8, 24),\n  typeList: new $6uUbQ$Pointer($6uUbQ$uint16, $05f49f930186144e$var$TypeList),\n  nameListOffset: new $6uUbQ$Pointer($6uUbQ$uint16, \"void\")\n});\nlet $05f49f930186144e$var$DFontHeader = new $6uUbQ$Struct({\n  dataOffset: $6uUbQ$uint32,\n  map: new $6uUbQ$Pointer($6uUbQ$uint32, $05f49f930186144e$var$DFontMap),\n  dataLength: $6uUbQ$uint32,\n  mapLength: $6uUbQ$uint32\n});\nclass $05f49f930186144e$export$2e2bcd8739ae039 {\n  static probe(buffer) {\n    let stream = new $6uUbQ$DecodeStream(buffer);\n    try {\n      var header = $05f49f930186144e$var$DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n    for (let type of header.map.typeList.types) {\n      if (type.name === \"sfnt\") return true;\n    }\n    return false;\n  }\n  getFont(name) {\n    if (!this.sfnt) return null;\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new $6uUbQ$DecodeStream(this.stream.buffer.slice(pos));\n      let font = new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream);\n      if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i) => name[i] === v)) return font;\n    }\n    return null;\n  }\n  get fonts() {\n    let fonts = [];\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new $6uUbQ$DecodeStream(this.stream.buffer.slice(pos));\n      fonts.push(new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream));\n    }\n    return fonts;\n  }\n  constructor(stream) {\n    (0, $6uUbQ$swchelperssrc_define_propertymjs)(this, \"type\", \"DFont\");\n    this.stream = stream;\n    this.header = $05f49f930186144e$var$DFontHeader.decode(this.stream);\n    for (let type of this.header.map.typeList.types) {\n      for (let ref of type.refList) if (ref.nameOffset >= 0) {\n        this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n        ref.name = $05f49f930186144e$var$DFontName.decode(this.stream);\n      } else ref.name = null;\n      if (type.name === \"sfnt\") this.sfnt = type;\n    }\n  }\n}\n\n// Register font formats\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $4c1709dee528ea76$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $760785214b9fc52c$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $21ee218f84ac7f32$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $cd5853a56c68fec7$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $05f49f930186144e$export$2e2bcd8739ae039));\nexport { $d636bc798e7178db$export$bd5c5d8b8dcafd78 as logErrors, $d636bc798e7178db$export$36b2f24e97d43be as registerFormat, $d636bc798e7178db$export$185802fd694ee1f5 as create, $d636bc798e7178db$export$42940898df819940 as defaultLanguage, $d636bc798e7178db$export$5157e7780d44cc36 as setDefaultLanguage };","map":{"version":3,"names":["$d636bc798e7178db$export$bd5c5d8b8dcafd78","$d636bc798e7178db$var$formats","$d636bc798e7178db$export$36b2f24e97d43be","format","push","$d636bc798e7178db$export$185802fd694ee1f5","buffer","postscriptName","i","length","probe","font","$6uUbQ$DecodeStream","getFont","Error","$d636bc798e7178db$export$42940898df819940","$d636bc798e7178db$export$5157e7780d44cc36","lang","$e71565f2ce09cb6b$export$69a3209f1a06c04d","target","key1","descriptor","get","value","call","Object","defineProperty","fn","cache1","Map","memoized","args","key","has","result","apply","set","$26a62205ad06574e$var$SubHeader","$6uUbQ$Struct","firstCode","$6uUbQ$uint16","entryCount","idDelta","$6uUbQ$int16","idRangeOffset","$26a62205ad06574e$var$CmapGroup","startCharCode","$6uUbQ$uint32","endCharCode","glyphID","$26a62205ad06574e$var$UnicodeValueRange","startUnicodeValue","$6uUbQ$uint24","additionalCount","$6uUbQ$uint8","$26a62205ad06574e$var$UVSMapping","unicodeValue","$26a62205ad06574e$var$DefaultUVS","$6uUbQ$Array","$26a62205ad06574e$var$NonDefaultUVS","$26a62205ad06574e$var$VarSelectorRecord","varSelector","defaultUVS","$6uUbQ$Pointer","type","nonDefaultUVS","$26a62205ad06574e$var$CmapSubtable","$6uUbQ$VersionedStruct","language","codeMap","$6uUbQ$LazyArray","subHeaderKeys","subHeaderCount","t","Math","max","subHeaders","glyphIndexArray","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCode","reservedPad","$6uUbQ$Reserved","startCode","_currentOffset","glyphIndices","reserved","is32","nGroups","groups","numRecords","varSelectors","$26a62205ad06574e$var$CmapEntry","platformID","encodingID","table","lazy","$26a62205ad06574e$export$2e2bcd8739ae039","version","numSubtables","tables","$f2612a29f92ac062$export$2e2bcd8739ae039","$6uUbQ$int32","revision","checkSumAdjustment","magicNumber","flags","unitsPerEm","created","modified","xMin","yMin","xMax","yMax","macStyle","$6uUbQ$Bitfield","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","$2c179dd593583073$export$2e2bcd8739ae039","ascent","descent","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfMetrics","$bdc9060542264b85$var$HmtxEntry","advance","bearing","$bdc9060542264b85$export$2e2bcd8739ae039","metrics","parent","hhea","bearings","maxp","numGlyphs","$dbf51cb3d3fe409d$export$2e2bcd8739ae039","maxPoints","maxContours","maxComponentPoints","maxComponentContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","$e449ad78d50845fe$export$badc544e0651b6b1","languageID","$e449ad78d50845fe$export$479e671907f486d1","$e449ad78d50845fe$export$6fef87b7618bdf0b","$e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS","Set","$e449ad78d50845fe$var$MAC_ENCODINGS","$e449ad78d50845fe$var$encodingCache","$e449ad78d50845fe$export$1dceb3c14ed68bee","encoding","cached","mapping","res","charCodeAt","decoder","TextDecoder","Uint8Array","s","decode","i1","$e449ad78d50845fe$export$2092376fd002e13","$2bcf221753ec8e32$var$NameRecord","nameID","string","$6uUbQ$String","relativeTo","ctx","stringOffset","allowNull","$2bcf221753ec8e32$var$LangTagRecord","tag","$2bcf221753ec8e32$var$NameTable","count","records","langTagCount","langTags","$2bcf221753ec8e32$export$2e2bcd8739ae039","$2bcf221753ec8e32$var$NAMES","process","stream","record","obj","preEncode","Array","isArray","val","indexOf","en","size","$84b272aa31b70606$var$OS2","header","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulCharRange","vendorID","fsSelection","usFirstCharIndex","usLastCharIndex","typoAscender","typoDescender","typoLineGap","winAscent","winDescent","codePageRange","xHeight","capHeight","defaultChar","breakChar","maxContent","usLowerOpticalPointSize","usUpperOpticalPointSize","$84b272aa31b70606$var$versions","versions","$84b272aa31b70606$export$2e2bcd8739ae039","$32d9e2eb9565d93c$export$2e2bcd8739ae039","$6uUbQ$fixed32","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minMemType42","maxMemType42","minMemType1","maxMemType1","numberOfGlyphs","glyphNameIndex","names","offsets","map","$5202bd9d9ad8eaac$export$2e2bcd8739ae039","controlValues","$5c0f37ca5ffb1850$export$2e2bcd8739ae039","instructions","$2b2b260902b1c57e$var$loca","_processed","$2b2b260902b1c57e$export$2e2bcd8739ae039","$7afb878c7bea4f66$export$2e2bcd8739ae039","controlValueProgram","$6c92b6371bce8bd9$export$2e2bcd8739ae039","$6uUbQ$Buffer","$43e9821ef3717eec$export$2e2bcd8739ae039","getCFFVersion","hdrSize","readUInt32BE","readUInt16BE","offSize","readUInt8","offsetType","pos","ret","startPos","start","end","offset","arr","item","encode","writeUInt16BE","sizes","writeUInt8","item1","constructor","$c2d28e92708f99da$var$FLOAT_EOF","$c2d28e92708f99da$var$FLOAT_LOOKUP","$c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP","$c2d28e92708f99da$export$2e2bcd8739ae039","readInt16BE","readInt32BE","str","b","n1","n2","parseFloat","forceLarge","ceil","Number","writeInt32BE","c1","c2","writeInt16BE","$61aa549f16d58b9b$export$2e2bcd8739ae039","decodeOperands","operands","op","encodeOperands","defineProperties","_startOffset","fields","field","$6uUbQ$PropertyDescriptor","dict","includePointers","pointerSize","startOffset","len","k","$6uUbQ$fastdeepequal","pointers","pointerOffset","ops","op1","ptr","$0e34a43d05bde82c$export$2e2bcd8739ae039","$0e34a43d05bde82c$var$Ptr","options","valueOf","$6d59db2e29cc77b3$var$CFFBlendOp","numBlends","pop","$6d59db2e29cc77b3$export$2e2bcd8739ae039","$229224aec43783c5$export$2e2bcd8739ae039","$bc0433d9b7e41f5f$export$dee0027060fa13bd","$bc0433d9b7e41f5f$export$4f58f497e14a53c3","$ef658f5c9a1488b2$export$c33b50336c234f16","$ef658f5c9a1488b2$export$3ed0f9e1fee8d489","$ef658f5c9a1488b2$export$dc28be11139d4120","$7cbbe4e24ef3cb75$var$LangSysTable","reqFeatureIndex","featureCount","featureIndexes","$7cbbe4e24ef3cb75$var$LangSysRecord","langSys","$7cbbe4e24ef3cb75$var$Script","defaultLangSys","langSysRecords","$7cbbe4e24ef3cb75$var$ScriptRecord","script","$7cbbe4e24ef3cb75$export$3e15fc05ce864229","$7cbbe4e24ef3cb75$var$FeatureParams","$7cbbe4e24ef3cb75$export$6e91cf7616333d5","featureParams","lookupCount","lookupListIndexes","$7cbbe4e24ef3cb75$var$FeatureRecord","feature","$7cbbe4e24ef3cb75$export$aa18130def4b6cb4","$7cbbe4e24ef3cb75$var$LookupFlags","markAttachmentType","$7cbbe4e24ef3cb75$export$df0008c6ff2da22a","SubTable","Lookup","lookupType","subTableCount","subTables","markFilteringSet","$6uUbQ$Optional","useMarkFilteringSet","$7cbbe4e24ef3cb75$var$RangeRecord","startCoverageIndex","$7cbbe4e24ef3cb75$export$17608c3f81a6111","glyphCount","glyphs","rangeCount","rangeRecords","$7cbbe4e24ef3cb75$var$ClassRangeRecord","class","$7cbbe4e24ef3cb75$export$843d551fbbafef71","startGlyph","classValueArray","classRangeCount","classRangeRecord","$7cbbe4e24ef3cb75$export$8215d14a63d9fb10","a","deltaFormat","$7cbbe4e24ef3cb75$var$LookupRecord","sequenceIndex","lookupListIndex","$7cbbe4e24ef3cb75$var$Rule","input","lookupRecords","$7cbbe4e24ef3cb75$var$RuleSet","$7cbbe4e24ef3cb75$var$ClassRule","classes","$7cbbe4e24ef3cb75$var$ClassSet","$7cbbe4e24ef3cb75$export$841858b892ce1f4c","coverage","ruleSetCount","ruleSets","classDef","classSetCnt","classSet","coverages","$7cbbe4e24ef3cb75$var$ChainRule","backtrackGlyphCount","backtrack","inputGlyphCount","lookaheadGlyphCount","lookahead","$7cbbe4e24ef3cb75$var$ChainRuleSet","$7cbbe4e24ef3cb75$export$5e6d09e6861162f6","chainCount","chainRuleSets","backtrackClassDef","inputClassDef","lookaheadClassDef","chainClassSet","backtrackCoverage","inputCoverage","lookaheadCoverage","$1a47b0c45c1c22fe$var$F2DOT14","$6uUbQ$Fixed","$1a47b0c45c1c22fe$var$RegionAxisCoordinates","startCoord","peakCoord","endCoord","$1a47b0c45c1c22fe$var$VariationRegionList","axisCount","regionCount","variationRegions","$1a47b0c45c1c22fe$var$DeltaSet","shortDeltas","shortDeltaCount","regionDeltas","$6uUbQ$int8","regionIndexCount","deltas","concat","$1a47b0c45c1c22fe$var$ItemVariationData","itemCount","regionIndexes","deltaSets","$1a47b0c45c1c22fe$export$fe1b122a2710f241","variationRegionList","variationDataCount","itemVariationData","$1a47b0c45c1c22fe$var$ConditionTable","axisIndex","filterRangeMinValue","filterRangeMaxValue","$1a47b0c45c1c22fe$var$ConditionSet","conditionCount","conditionTable","$1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord","featureIndex","alternateFeatureTable","$1a47b0c45c1c22fe$var$FeatureTableSubstitution","substitutionCount","substitutions","$1a47b0c45c1c22fe$var$FeatureVariationRecord","conditionSet","featureTableSubstitution","$1a47b0c45c1c22fe$export$441b70b7971dd419","majorVersion","minorVersion","featureVariationRecordCount","featureVariationRecords","$b84fd3dd9d8eddb2$var$PredefinedOp","predefinedOps","index","$b84fd3dd9d8eddb2$var$CFFEncodingVersion","$6uUbQ$Number","$b84fd3dd9d8eddb2$var$Range1","first","nLeft","$b84fd3dd9d8eddb2$var$Range2","$b84fd3dd9d8eddb2$var$CFFCustomEncoding","nCodes","codes","nRanges","ranges","$b84fd3dd9d8eddb2$var$CFFEncoding","$b84fd3dd9d8eddb2$var$RangeArray","$6uUbQ$resolveLength","range","$b84fd3dd9d8eddb2$var$CFFCustomCharset","CharStrings","$b84fd3dd9d8eddb2$var$CFFCharset","$b84fd3dd9d8eddb2$var$FDRange3","fd","$b84fd3dd9d8eddb2$var$FDRange4","$b84fd3dd9d8eddb2$var$FDSelect","fds","sentinel","$b84fd3dd9d8eddb2$var$ptr","$b84fd3dd9d8eddb2$var$CFFPrivateOp","$b84fd3dd9d8eddb2$var$FontDict","$b84fd3dd9d8eddb2$var$CFFTopDict","$b84fd3dd9d8eddb2$var$VariationStore","itemVariationStore","$b84fd3dd9d8eddb2$var$CFF2TopDict","$b84fd3dd9d8eddb2$var$CFFTop","$6uUbQ$fixed16","nameIndex","topDictIndex","stringIndex","globalSubrIndex","topDict","$b84fd3dd9d8eddb2$export$2e2bcd8739ae039","$822ac0d589e4e237$var$CFFFont","top","isCIDFont","ROS","sid","fullName","FullName","familyName","FamilyName","getCharString","glyph","readBuffer","getGlyphName","gid","charset","fdForGlyph","FDSelect","low","high","mid","privateDictForGlyph","FDArray","Private","$822ac0d589e4e237$export$2e2bcd8739ae039","$2bbf2bc1ce37cd8f$var$VerticalOrigin","glyphIndex","vertOriginY","$2bbf2bc1ce37cd8f$export$2e2bcd8739ae039","defaultVertOriginY","numVertOriginYMetrics","$0941618dc22a946d$export$16b227cb15d716a0","height","width","horiBearingX","horiBearingY","horiAdvance","vertBearingX","vertBearingY","vertAdvance","$0941618dc22a946d$export$62c53e75f69bfe12","bearingX","bearingY","$0941618dc22a946d$var$EBDTComponent","xOffset","yOffset","$0941618dc22a946d$var$ByteAligned","$0941618dc22a946d$var$BitAligned","$0941618dc22a946d$export$f1f5ddeb20d14f","data","pad","numComponents","components","dataLen","$9911c4c7201c13de$var$SBitLineMetrics","ascender","descender","widthMax","caretSlopeNumerator","caretSlopeDenominator","minOriginSB","minAdvanceSB","maxBeforeBL","minAfterBL","$9911c4c7201c13de$var$CodeOffsetPair","glyphCode","$9911c4c7201c13de$var$IndexSubtable","imageFormat","imageDataOffset","offsetArray","lastGlyphIndex","firstGlyphIndex","imageSize","bigMetrics","glyphArray","glyphCodeArray","$9911c4c7201c13de$var$IndexSubtableArray","subtable","$9911c4c7201c13de$var$BitmapSizeTable","indexSubTableArray","indexTablesSize","numberOfIndexSubTables","colorRef","hori","vert","startGlyphIndex","endGlyphIndex","ppemX","ppemY","bitDepth","$9911c4c7201c13de$export$2e2bcd8739ae039","numSizes","$abb847051efd51b1$var$ImageTable","ppem","resolution","imageOffsets","$abb847051efd51b1$export$2e2bcd8739ae039","numImgTables","imageTables","$eb629188f3dfefdd$var$LayerRecord","paletteIndex","$eb629188f3dfefdd$var$BaseGlyphRecord","firstLayerIndex","numLayers","$eb629188f3dfefdd$export$2e2bcd8739ae039","numBaseGlyphRecords","baseGlyphRecord","layerRecords","numLayerRecords","$08734b8e7dc64587$var$ColorRecord","blue","green","red","alpha","$08734b8e7dc64587$export$2e2bcd8739ae039","numPaletteEntries","numPalettes","numColorRecords","colorRecords","colorRecordIndices","offsetPaletteTypeArray","offsetPaletteLabelArray","offsetPaletteEntryLabelArray","$497cef411d884e34$var$BaseCoord","coordinate","referenceGlyph","baseCoordPoint","deviceTable","$497cef411d884e34$var$BaseValues","defaultIndex","baseCoordCount","baseCoords","$497cef411d884e34$var$FeatMinMaxRecord","minCoord","maxCoord","$497cef411d884e34$var$MinMax","featMinMaxCount","featMinMaxRecords","$497cef411d884e34$var$BaseLangSysRecord","minMax","$497cef411d884e34$var$BaseScript","baseValues","defaultMinMax","baseLangSysCount","baseLangSysRecords","$497cef411d884e34$var$BaseScriptRecord","$497cef411d884e34$var$BaseScriptList","$497cef411d884e34$var$BaseTagList","$497cef411d884e34$var$Axis","baseTagList","baseScriptList","$497cef411d884e34$export$2e2bcd8739ae039","horizAxis","vertAxis","$cf5f33c63ef209e6$var$AttachPoint","$cf5f33c63ef209e6$var$AttachList","attachPoints","$cf5f33c63ef209e6$var$CaretValue","caretValuePoint","$cf5f33c63ef209e6$var$LigGlyph","$cf5f33c63ef209e6$var$LigCaretList","ligGlyphCount","ligGlyphs","$cf5f33c63ef209e6$var$MarkGlyphSetsDef","markSetTableFormat","markSetCount","$cf5f33c63ef209e6$export$2e2bcd8739ae039","glyphClassDef","attachList","ligCaretList","markAttachClassDef","markGlyphSetsDef","$47e0e8ef515d9903$var$ValueFormat","$47e0e8ef515d9903$var$types","xPlacement","yPlacement","xAdvance","yAdvance","xPlaDevice","rel","yPlaDevice","xAdvDevice","yAdvDevice","$47e0e8ef515d9903$var$ValueRecord","buildStruct","struct","$47e0e8ef515d9903$var$PairValueRecord","secondGlyph","value1","value2","$47e0e8ef515d9903$var$PairSet","$47e0e8ef515d9903$var$Class2Record","$47e0e8ef515d9903$var$Anchor","xCoordinate","yCoordinate","anchorPoint","xDeviceTable","yDeviceTable","$47e0e8ef515d9903$var$EntryExitRecord","entryAnchor","exitAnchor","$47e0e8ef515d9903$var$MarkRecord","markAnchor","$47e0e8ef515d9903$var$MarkArray","$47e0e8ef515d9903$var$BaseRecord","classCount","$47e0e8ef515d9903$var$BaseArray","$47e0e8ef515d9903$var$ComponentRecord","$47e0e8ef515d9903$var$LigatureAttach","$47e0e8ef515d9903$var$LigatureArray","$47e0e8ef515d9903$export$73a8cfb19cd43a0f","valueFormat","valueCount","values","valueFormat1","valueFormat2","pairSetCount","pairSets","classDef1","classDef2","class1Count","class2Count","classRecords","entryExitCount","entryExitRecords","markCoverage","baseCoverage","markArray","baseArray","ligatureCoverage","ligatureArray","mark1Coverage","mark2Coverage","mark1Array","mark2Array","posFormat","extension","$47e0e8ef515d9903$export$2e2bcd8739ae039","scriptList","featureList","lookupList","featureVariations","$d3f442064af66e06$var$Sequence","$d3f442064af66e06$var$AlternateSet","$d3f442064af66e06$var$Ligature","compCount","$d3f442064af66e06$var$LigatureSet","$d3f442064af66e06$var$GSUBLookup","deltaGlyphID","substitute","substFormat","sequences","alternateSet","ligatureSets","substitutes","$d3f442064af66e06$export$2e2bcd8739ae039","$71cfb3c4767fbd0c$var$JstfGSUBModList","$71cfb3c4767fbd0c$var$JstfPriority","shrinkageEnableGSUB","shrinkageDisableGSUB","shrinkageEnableGPOS","shrinkageDisableGPOS","shrinkageJstfMax","extensionEnableGSUB","extensionDisableGSUB","extensionEnableGPOS","extensionDisableGPOS","extensionJstfMax","$71cfb3c4767fbd0c$var$JstfLangSys","$71cfb3c4767fbd0c$var$JstfLangSysRecord","jstfLangSys","$71cfb3c4767fbd0c$var$JstfScript","extenderGlyphs","langSysCount","$71cfb3c4767fbd0c$var$JstfScriptRecord","$71cfb3c4767fbd0c$export$2e2bcd8739ae039","scriptCount","$d059a6bd2d3b5b63$var$VariableSizeNumber","readUInt24BE","_size","$d059a6bd2d3b5b63$var$MapDataEntry","entry","entryFormat","outerIndex","innerIndex","$d059a6bd2d3b5b63$var$DeltaSetIndexMap","mapCount","mapData","$d059a6bd2d3b5b63$export$2e2bcd8739ae039","advanceWidthMapping","LSBMapping","RSBMapping","$dceeca3e1977ce30$var$Signature","$dceeca3e1977ce30$var$SignatureBlock","cbSignature","signature","$dceeca3e1977ce30$export$2e2bcd8739ae039","ulVersion","usNumSigs","usFlag","signatures","signatureBlocks","$8acd740a9435aad0$var$GaspRange","rangeMaxPPEM","rangeGaspBehavior","$8acd740a9435aad0$export$2e2bcd8739ae039","numRanges","gaspRanges","$b5f380243c34d6a0$var$DeviceRecord","pixelSize","maximumWidth","widths","$b5f380243c34d6a0$export$2e2bcd8739ae039","sizeDeviceRecord","$ca2df1256966e313$var$KernPair","left","right","$ca2df1256966e313$var$ClassTable","firstGlyph","nGlyphs","$ca2df1256966e313$var$Kern2Array","off","leftTable","rowWidth","$ca2df1256966e313$var$KernSubtable","nPairs","pairs","rightTable","array","kernValueCount","leftClassCount","rightClassCount","kernValue","leftClass","rightClass","kernIndex","$ca2df1256966e313$var$KernTable","subVersion","padding","tupleIndex","$ca2df1256966e313$export$2e2bcd8739ae039","nTables","$7a9f92b0c46ebe33$export$2e2bcd8739ae039","yPels","$2b2ccc419d152631$export$2e2bcd8739ae039","fontNumber","pitch","style","typeFamily","symbolSet","typeface","characterComplement","fileName","strokeWeight","widthType","serifStyle","$ca5b40b9bcda9c9b$var$Ratio","bCharSet","xRatio","yStartRatio","yEndRatio","$ca5b40b9bcda9c9b$var$vTable","yPelHeight","$ca5b40b9bcda9c9b$var$VdmxGroup","recs","startsz","endsz","entries","$ca5b40b9bcda9c9b$export$2e2bcd8739ae039","numRecs","numRatios","ratioRanges","$69530a3c40755af0$export$2e2bcd8739ae039","advanceHeightMax","minTopSideBearing","minBottomSideBearing","yMaxExtent","$344073dd270f0e62$var$VmtxEntry","$344073dd270f0e62$export$2e2bcd8739ae039","vhea","$3793b781918cfced$var$shortFrac","$3793b781918cfced$var$Correspondence","fromCoord","toCoord","$3793b781918cfced$var$Segment","pairCount","correspondence","$3793b781918cfced$export$2e2bcd8739ae039","segment","$6cb7dd5f47d82580$var$UnboundedArrayAccessor","getItem","_items","base","inspect","name","$6cb7dd5f47d82580$export$c5af1eebc882e39a","$6cb7dd5f47d82580$export$8351f8c2ae2f103c","ValueType","Shadow","BinarySearchHeader","unitSize","nUnits","LookupSegmentSingle","lastGlyph","LookupSegmentArray","LookupSingle","binarySearchHeader","segments","$6cb7dd5f47d82580$export$79f7d93d790934ba","entryData","assign","newState","Entry","StateArray","nClasses","StateHeader","classTable","stateArray","entryTable","$6cb7dd5f47d82580$export$105027425199cc51","ClassLookupTable","newStateOffset","StateHeader1","$6a3746e8c708f5a3$var$BslnSubtable","mappingData","standardGlyph","controlPoints","$6a3746e8c708f5a3$export$2e2bcd8739ae039","defaultBaseline","$d0c76fac617b308a$var$Setting","setting","fontFeatures","$d0c76fac617b308a$var$FeatureName","nSettings","settingTable","featureFlags","defaultSetting","$d0c76fac617b308a$export$2e2bcd8739ae039","featureNameCount","reserved1","reserved2","featureNames","$e83fd065f00fcd01$var$Axis","axisTag","minValue","defaultValue","maxValue","$e83fd065f00fcd01$var$Instance","coord","postscriptNameID","instanceSize","$e83fd065f00fcd01$export$2e2bcd8739ae039","offsetToData","countSizePairs","axisSize","instanceCount","axis","instance","$dbe33c8d3a7f131c$var$shortFrac","$dbe33c8d3a7f131c$var$Offset","$dbe33c8d3a7f131c$var$gvar","globalCoordCount","globalCoords","$dbe33c8d3a7f131c$export$2e2bcd8739ae039","$05b01887df96c4ee$var$ClassTable","subFeatureFlags","stateTable","$05b01887df96c4ee$var$WidthDeltaRecord","justClass","beforeGrowLimit","beforeShrinkLimit","afterGrowLimit","afterShrinkLimit","growFlags","shrinkFlags","$05b01887df96c4ee$var$WidthDeltaCluster","$05b01887df96c4ee$var$ActionData","lowerLimit","upperLimit","order","addGlyph","substThreshold","substGlyph","variationAxis","minimumLimit","noStretchValue","maximumLimit","$05b01887df96c4ee$var$Action","actionClass","actionType","actionLength","actionData","$05b01887df96c4ee$var$PostcompensationAction","$05b01887df96c4ee$var$PostCompensationTable","lookupTable","$05b01887df96c4ee$var$JustificationTable","wdcOffset","postCompensationTable","widthDeltaClusters","$05b01887df96c4ee$export$2e2bcd8739ae039","horizontal","vertical","$03ee6ebd54db1053$var$LigatureData","action","$03ee6ebd54db1053$var$ContextualData","markIndex","currentIndex","$03ee6ebd54db1053$var$InsertionData","currentInsertIndex","markedInsertIndex","$03ee6ebd54db1053$var$SubstitutionTable","items","$03ee6ebd54db1053$var$SubtableData","substitutionTable","ligatureActions","ligatureList","insertionActions","$03ee6ebd54db1053$var$Subtable","$03ee6ebd54db1053$var$FeatureEntry","featureType","featureSetting","enableFlags","disableFlags","$03ee6ebd54db1053$var$MorxChain","defaultFlags","chainLength","nFeatureEntries","nSubtables","features","subtables","$03ee6ebd54db1053$export$2e2bcd8739ae039","unused","nChains","chains","$b7492a80b0d1a056$var$OpticalBounds","bottom","$b7492a80b0d1a056$export$2e2bcd8739ae039","$c3395722bea751e2$var$tables","$c3395722bea751e2$export$2e2bcd8739ae039","cmap","head","hmtx","post","fpgm","loca","prep","glyf","VORG","EBLC","CBLC","sbix","COLR","CPAL","BASE","GDEF","GPOS","GSUB","JSTF","HVAR","DSIG","gasp","hdmx","kern","LTSH","PCLT","VDMX","vmtx","avar","bsln","feat","fvar","gvar","just","morx","opbd","$816c07a04b6dba87$var$TableEntry","checkSum","$816c07a04b6dba87$var$Directory","numTables","$6uUbQ$VoidPointer","maxExponentFor2","floor","log","LN2","maxPowerOf2","pow","$816c07a04b6dba87$export$2e2bcd8739ae039","$12727730ddfc8bfe$export$2e0ae67339d5f1ac","cmp","min","$12727730ddfc8bfe$export$d02631cccf789723","range1","$12727730ddfc8bfe$export$3d28c1996ced1f14","$12727730ddfc8bfe$var$CHARS","$12727730ddfc8bfe$var$LOOKUP","$12727730ddfc8bfe$export$94fdf11bafc8de6b","base64","bufferLength","bytes","p","encoded1","encoded2","encoded3","encoded4","$f08dd41ef10b694c$export$2e2bcd8739ae039","findSubtable","cmapTable","lookup","codepoint","variationSelector","getVariationSelector","rangeOffset","group","uvs","selectors","toArray","x","sel","getCharacterSet","endCodes","tail","codePointsForGlyph","delta","c","g","prototype","$0bba3a9db57637f3$export$2e2bcd8739ae039","positions","id","getKerning","crossStream","variation","pairIdx","pair","leftOffset","rightOffset","override","$0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039","positionGlyphs","clusterStart","clusterEnd","isMark","positionCluster","baseBox","cbox","copy","codePoints","minX","yGap","mark","markBox","position","combiningClass","getCombiningClass","maxX","minY","maxY","codePoint","$6uUbQ$getCombiningClass","$f34600ab9d7f70d8$export$2e2bcd8739ae039","addPoint","y","abs","Infinity","$130d1a642ebcd2b7$var$UNICODE_SCRIPTS","Caucasian_Albanian","Arabic","Imperial_Aramaic","Armenian","Avestan","Balinese","Bamum","Bassa_Vah","Batak","Bengali","Bopomofo","Brahmi","Braille","Buginese","Buhid","Chakma","Canadian_Aboriginal","Carian","Cham","Cherokee","Coptic","Cypriot","Cyrillic","Devanagari","Deseret","Duployan","Egyptian_Hieroglyphs","Elbasan","Ethiopic","Georgian","Glagolitic","Gothic","Grantha","Greek","Gujarati","Gurmukhi","Hangul","Han","Hanunoo","Hebrew","Hiragana","Pahawh_Hmong","Katakana_Or_Hiragana","Old_Italic","Javanese","Kayah_Li","Katakana","Kharoshthi","Khmer","Khojki","Kannada","Kaithi","Tai_Tham","Lao","Latin","Lepcha","Limbu","Linear_A","Linear_B","Lisu","Lycian","Lydian","Mahajani","Mandaic","Manichaean","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Malayalam","Modi","Mongolian","Mro","Meetei_Mayek","Myanmar","Old_North_Arabian","Nabataean","Nko","Ogham","Ol_Chiki","Old_Turkic","Oriya","Osmanya","Palmyrene","Pau_Cin_Hau","Old_Permic","Phags_Pa","Inscriptional_Pahlavi","Psalter_Pahlavi","Phoenician","Miao","Inscriptional_Parthian","Rejang","Runic","Samaritan","Old_South_Arabian","Saurashtra","Shavian","Sharada","Siddham","Khudawadi","Sinhala","Sora_Sompeng","Sundanese","Syloti_Nagri","Syriac","Tagbanwa","Takri","Tai_Le","New_Tai_Lue","Tamil","Tai_Viet","Telugu","Tifinagh","Tagalog","Thaana","Thai","Tibetan","Tirhuta","Ugaritic","Vai","Warang_Citi","Old_Persian","Cuneiform","Yi","Inherited","Common","Unknown","$130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS","$130d1a642ebcd2b7$export$b32f0b5f69d65e51","script1","$130d1a642ebcd2b7$export$ce50e82f12a827a4","$130d1a642ebcd2b7$export$e5cb25e204fb8450","idx","code","next","script2","$6uUbQ$getScript","$130d1a642ebcd2b7$export$16fab0757cfc223d","script3","$130d1a642ebcd2b7$var$RTL","arab","hebr","syrc","thaa","cprt","khar","phnx","lydi","avst","armi","phli","prti","sarb","orkh","samr","mand","merc","mero","mani","mend","nbat","narb","palm","phlp","$130d1a642ebcd2b7$export$9fddb9d0dd7d8a54","script4","$be07b3e97a42687a$export$2e2bcd8739ae039","advanceWidth","advanceHeight","bbox","direction","$1ac75d9a55b67f01$export$2e2bcd8739ae039","$3b6302b64eccc32c$var$features","allTypographicFeatures","exclusive","allTypeFeatures","ligatures","requiredLigatures","commonLigatures","rareLigatures","rebusPictures","diphthongLigatures","squaredLigatures","abbrevSquaredLigatures","symbolLigatures","contextualLigatures","historicalLigatures","cursiveConnection","unconnected","partiallyConnected","cursive","letterCase","verticalSubstitution","substituteVerticalForms","linguisticRearrangement","numberSpacing","monospacedNumbers","proportionalNumbers","thirdWidthNumbers","quarterWidthNumbers","smartSwash","wordInitialSwashes","wordFinalSwashes","nonFinalSwashes","diacritics","showDiacritics","hideDiacritics","decomposeDiacritics","verticalPosition","normalPosition","superiors","inferiors","ordinals","scientificInferiors","fractions","noFractions","verticalFractions","diagonalFractions","overlappingCharacters","preventOverlap","typographicExtras","slashedZero","mathematicalExtras","mathematicalGreek","ornamentSets","noOrnaments","dingbats","piCharacters","fleurons","decorativeBorders","internationalSymbols","mathSymbols","characterAlternatives","noAlternates","designComplexity","designLevel1","designLevel2","designLevel3","designLevel4","designLevel5","styleOptions","noStyleOptions","displayText","engravedText","illuminatedCaps","titlingCaps","tallCaps","characterShape","traditionalCharacters","simplifiedCharacters","JIS1978Characters","JIS1983Characters","JIS1990Characters","traditionalAltOne","traditionalAltTwo","traditionalAltThree","traditionalAltFour","traditionalAltFive","expertCharacters","JIS2004Characters","hojoCharacters","NLCCharacters","traditionalNamesCharacters","numberCase","lowerCaseNumbers","upperCaseNumbers","textSpacing","proportionalText","monospacedText","halfWidthText","thirdWidthText","quarterWidthText","altProportionalText","altHalfWidthText","transliteration","noTransliteration","annotation","noAnnotation","boxAnnotation","roundedBoxAnnotation","circleAnnotation","invertedCircleAnnotation","parenthesisAnnotation","periodAnnotation","romanNumeralAnnotation","diamondAnnotation","invertedBoxAnnotation","invertedRoundedBoxAnnotation","kanaSpacing","fullWidthKana","proportionalKana","ideographicSpacing","fullWidthIdeographs","proportionalIdeographs","halfWidthIdeographs","unicodeDecomposition","canonicalComposition","compatibilityComposition","transcodingComposition","rubyKana","CJKSymbolAlternatives","noCJKSymbolAlternatives","CJKSymbolAltOne","CJKSymbolAltTwo","CJKSymbolAltThree","CJKSymbolAltFour","CJKSymbolAltFive","ideographicAlternatives","noIdeographicAlternatives","ideographicAltOne","ideographicAltTwo","ideographicAltThree","ideographicAltFour","ideographicAltFive","CJKVerticalRomanPlacement","CJKVerticalRomanCentered","CJKVerticalRomanHBaseline","italicCJKRoman","CJKItalicRoman","caseSensitiveLayout","caseSensitiveSpacing","alternateKana","alternateHorizKana","alternateVertKana","stylisticAlternatives","noStylisticAlternates","stylisticAltOne","stylisticAltTwo","stylisticAltThree","stylisticAltFour","stylisticAltFive","stylisticAltSix","stylisticAltSeven","stylisticAltEight","stylisticAltNine","stylisticAltTen","stylisticAltEleven","stylisticAltTwelve","stylisticAltThirteen","stylisticAltFourteen","stylisticAltFifteen","stylisticAltSixteen","stylisticAltSeventeen","stylisticAltEighteen","stylisticAltNineteen","stylisticAltTwenty","contextualAlternates","swashAlternates","contextualSwashAlternates","lowerCase","defaultLowerCase","lowerCaseSmallCaps","lowerCasePetiteCaps","upperCase","defaultUpperCase","upperCaseSmallCaps","upperCasePetiteCaps","languageTag","CJKRomanSpacing","halfWidthCJKRoman","proportionalCJKRoman","defaultCJKRoman","fullWidthCJKRoman","$3b6302b64eccc32c$var$feature","selector","$3b6302b64eccc32c$var$OTMapping","rlig","clig","dlig","hlig","liga","hist","smcp","pcap","frac","dnom","numr","afrc","case","ccmp","cpct","valt","swsh","cswh","curs","c2pc","c2sc","init","fin2","medi","med2","fin3","fina","pkna","half","halt","hkna","vkna","ital","lnum","onum","mgrk","calt","vrt2","tnum","pnum","sups","subs","ordn","pwid","hwid","qwid","twid","fwid","palt","trad","smpl","jp78","jp83","jp90","jp04","expt","hojo","nlck","tnam","ruby","titl","zero","ss01","ss02","ss03","ss04","ss05","ss06","ss07","ss08","ss09","ss10","ss11","ss12","ss13","ss14","ss15","ss16","ss17","ss18","ss19","ss20","slice","$3b6302b64eccc32c$var$AATMapping","ot","aat","$3b6302b64eccc32c$export$b813f7d2a1677c16","features1","r","$3b6302b64eccc32c$var$mapFeatureStrings","f","isNaN","typeCode","settingCode","$3b6302b64eccc32c$export$bd6df347a4f391c4","features2","feature1","keys","$ff5ce077dae0f144$export$2e2bcd8739ae039","seg","glyphsForValue","classValue","segment1","$50c7aac9316f2948$var$START_OF_TEXT_STATE","$50c7aac9316f2948$var$START_OF_LINE_STATE","$50c7aac9316f2948$var$END_OF_TEXT_CLASS","$50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS","$50c7aac9316f2948$var$DELETED_GLYPH_CLASS","$50c7aac9316f2948$var$END_OF_LINE_CLASS","$50c7aac9316f2948$var$DONT_ADVANCE","$50c7aac9316f2948$export$2e2bcd8739ae039","reverse","processEntry","currentState","dir","classCode","shouldAdvance","row","entryIndex","traverse","opts","state","visited","add","enter","exit","$55f71433a605c87d$var$MARK_FIRST","$55f71433a605c87d$var$MARK_LAST","$55f71433a605c87d$var$VERB","$55f71433a605c87d$var$SET_MARK","$55f71433a605c87d$var$SET_COMPONENT","$55f71433a605c87d$var$PERFORM_ACTION","$55f71433a605c87d$var$LAST_MASK","$55f71433a605c87d$var$STORE_MASK","$55f71433a605c87d$var$OFFSET_MASK","$55f71433a605c87d$var$VERTICAL_ONLY","$55f71433a605c87d$var$REVERSE_DIRECTION","$55f71433a605c87d$var$HORIZONTAL_AND_VERTICAL","$55f71433a605c87d$var$CURRENT_IS_KASHIDA_LIKE","$55f71433a605c87d$var$MARKED_IS_KASHIDA_LIKE","$55f71433a605c87d$var$CURRENT_INSERT_BEFORE","$55f71433a605c87d$var$MARKED_INSERT_BEFORE","$55f71433a605c87d$var$CURRENT_INSERT_COUNT","$55f71433a605c87d$var$MARKED_INSERT_COUNT","$55f71433a605c87d$export$2e2bcd8739ae039","chain","processSubtable","splice","processNoncontextualSubstitutions","ligatureStack","markedGlyph","markedIndex","stateMachine","getStateMachine","getProcessor","processIndicRearragement","processContextualSubstitution","processLigature","processGlyphInsertion","$55f71433a605c87d$var$reorderGlyphs","subsitutions","getGlyph","actions","actionIndex","last","ligatureIndex","ligatureGlyphs","componentGlyph","unshift","store","component","ligatureEntry","_insertGlyphs","insertionActionIndex","isBefore","insertions","getSupportedFeatures","generateInputs","inputCache","generateInputCache","generateInputsForSubtable","stack","g1","found","bind","$55f71433a605c87d$var$swap","rangeA","rangeB","reverseA","reverseB","verb","$ba6dd74203be8728$export$2e2bcd8739ae039","glyphRun","morxProcessor","getAvailableFeatures","stringsForGlyph","glyphStrings","_addStrings","strings","_cmapProcessor","String","fromCodePoint","fallbackPosition","$94d7a73bd2edfc9a$export$2e2bcd8739ae039","_addFeatures","global","stageIndex","stages","stage","allFeatures","globalFeatures","arg","local","addStage","setFeatureOverrides","assignGlobalFeatures","processor","applyFeatures","$649970d87335b30f$var$VARIATION_FEATURES","$649970d87335b30f$var$COMMON_FEATURES","$649970d87335b30f$var$FRACTIONAL_FEATURES","$649970d87335b30f$var$HORIZONTAL_FEATURES","$649970d87335b30f$var$VERTICAL_FEATURES","$649970d87335b30f$var$DIRECTIONAL_FEATURES","ltr","rtl","$649970d87335b30f$export$2e2bcd8739ae039","plan","planPreprocessing","planFeatures","planPostprocessing","assignFeatures","userFeatures","$6uUbQ$isDigit","$6uUbQ$swchelperssrc_define_propertymjs","$764eb544bbe1ccf0$var$trie","$6uUbQ$unicodetrie","$764eb544bbe1ccf0$var$FEATURES","$764eb544bbe1ccf0$var$ShapingClasses","Non_Joining","Left_Joining","Right_Joining","Dual_Joining","Join_Causing","ALAPH","Transparent","$764eb544bbe1ccf0$var$ISOL","$764eb544bbe1ccf0$var$FINA","$764eb544bbe1ccf0$var$FIN2","$764eb544bbe1ccf0$var$FIN3","$764eb544bbe1ccf0$var$MEDI","$764eb544bbe1ccf0$var$MED2","$764eb544bbe1ccf0$var$INIT","$764eb544bbe1ccf0$var$NONE","$764eb544bbe1ccf0$var$STATE_TABLE","$764eb544bbe1ccf0$export$2e2bcd8739ae039","prev","curAction","prevAction","$764eb544bbe1ccf0$var$getShapingClass","category","$6uUbQ$getCategory","$85d408632270248b$export$2e2bcd8739ae039","reset","cur","shouldIgnore","ignoreMarks","ignoreBaseGlyphs","isBase","ignoreLigatures","isLigature","move","peek","increment","peekIndex","$a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS","$a83b9c36aaa94fd3$export$2e2bcd8739ae039","findScript","selectScript","changed","scriptTag","repeat","substituteFeature","substituteFeatureForVariations","lookupsForFeatures","exclude","lookups","lookupIndex","sort","variationsIndex","substitution","findVariationsIndex","coords","variations","conditions","variationConditionsMatch","every","condition","advances","applyLookups","glyphIterator","currentFeature","applyLookup","applyLookupList","lookupRecord","coverageIndex","match","sequence","matched","sequenceMatches","sequenceMatchIndices","coverageSequenceMatches","getClassID","classSequenceMatches","classID","applyContext","rule","rule1","applyChainingContext","rules","rule2","_variationProcessor","normalizedCoords","ligatureID","$10e7b257e1a9a756$export$2e2bcd8739ae039","_id","substituted","_font","$6uUbQ$isMark","ligatureComponent","isLigated","cursiveAttachment","markAttachment","shaperInfo","isMultiplied","$e1c6bbc8cb416f8c$export$2e2bcd8739ae039","$e1c6bbc8cb416f8c$var$getType","$e1c6bbc8cb416f8c$var$STATE_TABLE","$e1c6bbc8cb416f8c$var$DECOMPOSE","hasGlyphForCodePoint","$e1c6bbc8cb416f8c$var$decompose","$e1c6bbc8cb416f8c$var$COMPOSE","$e1c6bbc8cb416f8c$var$compose","$e1c6bbc8cb416f8c$var$TONE_MARK","$e1c6bbc8cb416f8c$var$reorderToneMark","$e1c6bbc8cb416f8c$var$INVALID","$e1c6bbc8cb416f8c$var$insertDottedCircle","$e1c6bbc8cb416f8c$var$HANGUL_BASE","$e1c6bbc8cb416f8c$var$HANGUL_END","$e1c6bbc8cb416f8c$var$HANGUL_COUNT","$e1c6bbc8cb416f8c$var$L_BASE","$e1c6bbc8cb416f8c$var$V_BASE","$e1c6bbc8cb416f8c$var$T_BASE","$e1c6bbc8cb416f8c$var$L_COUNT","$e1c6bbc8cb416f8c$var$V_COUNT","$e1c6bbc8cb416f8c$var$T_COUNT","$e1c6bbc8cb416f8c$var$L_END","$e1c6bbc8cb416f8c$var$V_END","$e1c6bbc8cb416f8c$var$T_END","$e1c6bbc8cb416f8c$var$DOTTED_CIRCLE","$e1c6bbc8cb416f8c$var$isL","$e1c6bbc8cb416f8c$var$isV","$e1c6bbc8cb416f8c$var$isT","$e1c6bbc8cb416f8c$var$isTone","$e1c6bbc8cb416f8c$var$isLVT","$e1c6bbc8cb416f8c$var$isLV","$e1c6bbc8cb416f8c$var$isCombiningL","$e1c6bbc8cb416f8c$var$isCombiningV","$e1c6bbc8cb416f8c$var$isCombiningT","$e1c6bbc8cb416f8c$var$X","$e1c6bbc8cb416f8c$var$L","$e1c6bbc8cb416f8c$var$V","$e1c6bbc8cb416f8c$var$T","$e1c6bbc8cb416f8c$var$LV","$e1c6bbc8cb416f8c$var$LVT","$e1c6bbc8cb416f8c$var$M","$e1c6bbc8cb416f8c$var$NO_ACTION","$e1c6bbc8cb416f8c$var$getGlyph","glyphForCodePoint","l","v","ljmo","vjmo","insert","tjmo","prevType","lv","del","$e1c6bbc8cb416f8c$var$getLength","dottedCircle","$4b0735ca6c692ea5$exports","JSON","parse","$aa333a9607471296$exports","$90a9d3398ee54fe5$export$a513ea61a7bee91c","X","C","V","N","H","ZWNJ","ZWJ","M","SM","VD","A","Placeholder","Dotted_Circle","RS","Coeng","Repha","Ra","CM","Symbol","$90a9d3398ee54fe5$export$1a1f61c9c4dd9df0","Start","Ra_To_Become_Reph","Pre_M","Pre_C","Base_C","After_Main","Above_C","Before_Sub","Below_C","After_Sub","Before_Post","Post_C","After_Post","Final_C","SMVD","End","$90a9d3398ee54fe5$export$8519deaa7de2b07","$90a9d3398ee54fe5$export$bbcd928767338e0d","$90a9d3398ee54fe5$export$ca9599b2a300afc","$90a9d3398ee54fe5$export$e99d119da76a0fc5","Default","hasOldSpec","virama","basePos","rephPos","rephMode","blwfMode","$90a9d3398ee54fe5$export$f647c9cfdd77d95a","decompositions","$7826f90f6f0cecc9$var$decompositions","$parcel$interopDefault","$7826f90f6f0cecc9$var$trie","$7826f90f6f0cecc9$var$stateMachine","$6uUbQ$dfa","$7826f90f6f0cecc9$export$2e2bcd8739ae039","$7826f90f6f0cecc9$var$setupSyllables","$7826f90f6f0cecc9$var$initialReordering","$7826f90f6f0cecc9$var$finalReordering","unicodeScript","indicConfig","isOldSpec","d","decomposed","$7826f90f6f0cecc9$var$indicCategory","$7826f90f6f0cecc9$var$indicPosition","$7826f90f6f0cecc9$var$IndicInfo","syllableType","syllable","tags","$7826f90f6f0cecc9$var$isConsonant","$7826f90f6f0cecc9$var$isJoiner","$7826f90f6f0cecc9$var$isHalantOrCoeng","$7826f90f6f0cecc9$var$wouldSubstitute","_layoutEngine","engine","GSUBProcessor","$7826f90f6f0cecc9$var$consonantPosition","consonant","info","$7826f90f6f0cecc9$var$nextSyllable","limit","hasReph","rphf","seenBelow","i2","j","disallowDoubleHalants","lastPos","i3","i4","i5","i6","blwf","i7","i8","abvf","pstf","prefLen","pref","i9","cfar","i10","nonJoiner","tryPref","BASE_C","newPos","oldPos","tmp","newRephPos","reph","test","categories","$7ab494fe977143c6$var$categories","$7ab494fe977143c6$var$decompositions","$7ab494fe977143c6$var$trie","$7ab494fe977143c6$var$stateMachine","$7ab494fe977143c6$export$2e2bcd8739ae039","$7ab494fe977143c6$var$setupSyllables","$7ab494fe977143c6$var$clearSubstitutionFlags","$7ab494fe977143c6$var$recordRphf","$7ab494fe977143c6$var$recordPref","$7ab494fe977143c6$var$reorder","$7ab494fe977143c6$var$useCategory","$7ab494fe977143c6$var$USEInfo","$7ab494fe977143c6$var$nextSyllable","$7ab494fe977143c6$var$isBase","$7ab494fe977143c6$var$isHalant","$102b6fe50f1d50b4$var$SHAPERS","mong","phag","hang","bng2","beng","dev2","deva","gjr2","gujr","guru","gur2","knda","knd2","mlm2","mlym","ory2","orya","taml","tml2","telu","tel2","khmr","bali","batk","brah","bugi","buhd","cakm","cham","dupl","egyp","gran","hano","java","kthi","kali","khoj","sind","lepc","limb","mahj","mtei","modi","hmng","rjng","saur","shrd","sidd","sinh","sund","sylo","tglg","tagb","tale","lana","tavt","takr","tibt","tfng","tirh","latn","DFLT","$102b6fe50f1d50b4$export$7877a478dd30fd3d","shaper","$0a876c45f1f7c41c$export$2e2bcd8739ae039","curGlyph","replacement","undefined","USER_INDEX","ligature","characters","ligatureGlyph","isMarkLigature","lastLigID","lastNumComps","curComps","matchIndex","$c96c93587d49c14d$export$2e2bcd8739ae039","applyPositionValue","variationProcessor","variationStore","getDelta","nextGlyph","class1","class2","pair1","nextIndex","curRecord","nextRecord","getAnchor","rightToLeft","baseGlyphIndex","baseIndex","markRecord","baseAnchor","applyAnchor","ligIndex","ligAttach","markGlyph","ligGlyph","compIndex","mark1Index","prevIndex","good","mark2Index","markCoords","markPos","anchor","fixCursiveAttachment","fixMarkAttachment","k1","$a62492810de27e3d$export$2e2bcd8739ae039","setup","glyphInfos","GPOSProcessor","glyphInfo","zeroMarkWidths","zeroMarkAdvances","cleanup","$4c0a7fa5df7a9ab1$export$2e2bcd8739ae039","layout","glyphsForString","hideDefaultIgnorables","positioned","unicodeLayoutEngine","kernProcessor","space","isDefaultIgnorable","ch","plane","from","$f43aec954cdfdf21$var$SVG_COMMANDS","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","closePath","$f43aec954cdfdf21$export$2e2bcd8739ae039","toFunction","commands","forEach","command","toSVG","cmds","round","join","_cbox","command1","freeze","_bbox","cx","cy","p0","p1","p2","p3","qp1x","qp1y","p3x","p3y","cp1x","cp1y","cp2x","cp2y","b2ac","t1","sqrt","t2","mapPoints","path","transform","m0","m1","m2","m3","m4","m5","tx","ty","translate","rotate","angle","cos","sin","scale","scaleX","scaleY","$7713b9b7b438dff8$export$2e2bcd8739ae039","$f92906be28e61769$export$2e2bcd8739ae039","_getPath","_getCBox","_getBBox","_getTableMetrics","metric","_getMetrics","_metrics","leftBearing","topBearing","os2","getAdvanceAdjustment","getScaledPath","ligatureCaretPositions","_getName","fromCharCode","render","save","fill","restore","$69aac16029968692$var$GlyfHeader","numberOfContours","$69aac16029968692$var$ON_CURVE","$69aac16029968692$var$X_SHORT_VECTOR","$69aac16029968692$var$Y_SHORT_VECTOR","$69aac16029968692$var$REPEAT","$69aac16029968692$var$SAME_X","$69aac16029968692$var$SAME_Y","$69aac16029968692$var$ARG_1_AND_2_ARE_WORDS","$69aac16029968692$var$ARGS_ARE_XY_VALUES","$69aac16029968692$var$ROUND_XY_TO_GRID","$69aac16029968692$var$WE_HAVE_A_SCALE","$69aac16029968692$var$MORE_COMPONENTS","$69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE","$69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO","$69aac16029968692$var$WE_HAVE_INSTRUCTIONS","$69aac16029968692$var$USE_MY_METRICS","$69aac16029968692$var$OVERLAP_COMPOUND","$69aac16029968692$var$SCALED_COMPONENT_OFFSET","$69aac16029968692$var$UNSCALED_COMPONENT_OFFSET","$69aac16029968692$export$baf26146a414f24a","onCurve","endContour","$69aac16029968692$var$Component","dx","dy","scale01","scale10","$69aac16029968692$export$2e2bcd8739ae039","internal","_getTableStream","_parseGlyphCoord","short","same","_decode","glyfPos","nextPos","_decodeSimple","_decodeComposite","points","endPtsOfContours","numCoords","flag","point","px","py","_getPhantomPoints","transformPoints","phantomPoints","haveInstructions","gPos","readInt8","_getContours","contours","contour","directory","firstPt","lastPt","curvePt","pt","prevPt","midX","midY","$62cc5109c6101893$export$2e2bcd8739ae039","CFF2","bias","cff","trans","nStems","x1","y1","usedGsubrs","usedSubrs","open","_usedGsubrs","_usedSubrs","gsubrs","gsubrsBias","privateDict","subrs","Subrs","subrsBias","vstore","vsindex","checkWidth","shift","nominalWidthX","parseStems","subr","phase","c1x","c1y","c2x","c2y","e","blendVector","getBlendVector","numOperands","sum","s1","s2","v1","v2","random","n","c3x","c3y","c4x","c4y","c5x","c5y","c6x","c6y","pts","startx","starty","b1","$25d8f049c222084c$var$SBIXImage","originX","originY","buflen","$25d8f049c222084c$export$2e2bcd8739ae039","getImageForSize","img","image","renderOutlines","$0d411f0165859681$var$COLRLayer","color","$0d411f0165859681$export$2e2bcd8739ae039","layers","layer","cpal","colr","rec","baseLayer","_getBaseGlyph","fillColor","$0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS","$0bb840cac04e911b$var$TUPLE_COUNT_MASK","$0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD","$0bb840cac04e911b$var$INTERMEDIATE_TUPLE","$0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS","$0bb840cac04e911b$var$TUPLE_INDEX_MASK","$0bb840cac04e911b$var$POINTS_ARE_WORDS","$0bb840cac04e911b$var$POINT_RUN_COUNT_MASK","$0bb840cac04e911b$var$DELTAS_ARE_ZERO","$0bb840cac04e911b$var$DELTAS_ARE_WORDS","$0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK","$0bb840cac04e911b$export$2e2bcd8739ae039","normalizeCoords","normalized","EPSILON","glyphPoints","tupleCount","here","sharedPoints","decodePoints","origPoints","tupleDataSize","tupleCoords","startCoords","endCoords","a1","factor","tupleFactor","nPoints","xDeltas","decodeDeltas","yDeltas","outPoints","hasDelta","interpolateMissingDeltas","deltaX","deltaY","Uint16Array","run","runCount","readUInt16","Int16Array","inPoints","firstPoint","endPoint","firstDelta","curDelta","deltaInterpolate","deltaShift","ref1","ref2","iterable","in1","in2","out1","out2","out","ref","itemStore","varData","deltaSet","netAdjustment","master","blendVectors","scalar","regionIndex","axes","axisScalar","$5cc7476da92df375$var$resolved","Promise","resolve","$5cc7476da92df375$export$2e2bcd8739ae039","includeGlyph","$807e58506be70005$var$ON_CURVE","$807e58506be70005$var$X_SHORT_VECTOR","$807e58506be70005$var$Y_SHORT_VECTOR","$807e58506be70005$var$REPEAT","$807e58506be70005$var$SAME_X","$807e58506be70005$var$SAME_Y","$807e58506be70005$var$Point","$807e58506be70005$var$Glyf","xPoints","yPoints","$807e58506be70005$export$2e2bcd8739ae039","encodeSimple","lastX","lastY","lastFlag","pointCount","_encodePoint","$6uUbQ$EncodeStream","shortFlag","sameFlag","diff","$4abbb6a5dbdc441a$export$2e2bcd8739ae039","_addGlyph","curOffset","nextOffset","view","DataView","setUint16","glyphEncoder","$6uUbQ$clone","toBuffer","$001d739428a71d5a$export$2e2bcd8739ae039","subsetCharstrings","charstrings","subsetSubrs","used","subsetFontdict","used_fds","used_subrs","fd_select","FontName","createCIDFontdict","addString","Encoding","CIDCount","$4c1709dee528ea76$export$2e2bcd8739ae039","setDefaultLanguage","defaultLanguage","_getTable","_tables","_decodeTable","console","error","_decodeDirectory","getName","subfamilyName","copyright","characterSet","nextState","availableFeatures","_glyphs","createSubset","variationAxes","trim","default","namedVariations","settings","getVariation","_directoryPos","variationCoords","$c1726355ecc5b889$var$WOFFDirectoryEntry","compLength","origChecksum","$c1726355ecc5b889$var$WOFFDirectory","flavor","totalSfntSize","metaOffset","metaLength","metaOrigLength","privOffset","privLength","tables1","$c1726355ecc5b889$export$2e2bcd8739ae039","$760785214b9fc52c$export$2e2bcd8739ae039","outBuffer","buf","$6uUbQ$tinyinflate","$8046190c9f1ad19e$export$2e2bcd8739ae039","_transformedGlyphs","$c28ec7bbb3b8de3a$var$Base128","$c28ec7bbb3b8de3a$var$knownTags","$c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry","customTag","transformVersion","transformed","transformLength","$c28ec7bbb3b8de3a$var$WOFF2Directory","totalCompressedSize","$c28ec7bbb3b8de3a$export$2e2bcd8739ae039","$21ee218f84ac7f32$export$2e2bcd8739ae039","_dataPos","_decompress","_decompressed","decompressedSize","decompressed","$6uUbQ$brotlidecompressjs","_transformGlyfTable","$21ee218f84ac7f32$var$GlyfTable","nContours","totalPoints","r1","$21ee218f84ac7f32$var$read255UInt16","$21ee218f84ac7f32$var$decodeTriplet","instructionSize","composites","$21ee218f84ac7f32$var$Substream","_buf","indexFormat","nContourStreamSize","nPointsStreamSize","flagStreamSize","glyphStreamSize","compositeStreamSize","bboxStreamSize","instructionStreamSize","bboxes","$21ee218f84ac7f32$var$WORD_CODE","$21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2","$21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1","$21ee218f84ac7f32$var$LOWEST_U_CODE","$21ee218f84ac7f32$var$withSign","baseval","b0","b2","$cd5853a56c68fec7$var$TTCHeader","numFonts","dsigTag","dsigLength","dsigOffset","$cd5853a56c68fec7$export$2e2bcd8739ae039","fonts","readString","$05f49f930186144e$var$DFontName","$05f49f930186144e$var$DFontData","$05f49f930186144e$var$Ref","nameOffset","attr","dataOffset","handle","$05f49f930186144e$var$Type","maxTypeIndex","refList","$05f49f930186144e$var$TypeList","types","$05f49f930186144e$var$DFontMap","typeList","nameListOffset","$05f49f930186144e$var$DFontHeader","dataLength","mapLength","$05f49f930186144e$export$2e2bcd8739ae039","sfnt"],"sources":["E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\index.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\base.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\TTFFont.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\decorators.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\directory.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\index.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\cmap.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\head.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\hhea.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\hmtx.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\maxp.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\name.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\encodings.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\OS2.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\post.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\cvt.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\fpgm.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\loca.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\prep.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\glyf.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFFont.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFIndex.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFTop.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFDict.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFOperand.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFPointer.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFPrivateDict.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFStandardStrings.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFEncodings.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFCharsets.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\variations.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\opentype.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\VORG.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\EBLC.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\EBDT.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\sbix.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\COLR.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\CPAL.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\BASE.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\GDEF.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\GPOS.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\GSUB.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\JSTF.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\HVAR.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\DSIG.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\gasp.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\hdmx.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\kern.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\LTSH.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\PCLT.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\VDMX.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\vhea.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\vmtx.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\avar.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\bsln.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\aat.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\feat.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\fvar.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\gvar.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\just.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\morx.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\opbd.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\CmapProcessor.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\utils.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\LayoutEngine.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\KernProcessor.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\UnicodeLayoutEngine.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\GlyphRun.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\BBox.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\Script.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\GlyphPosition.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATLayoutEngine.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATFeatureMap.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATMorxProcessor.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATStateMachine.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATLookupTable.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\OTLayoutEngine.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\ShapingPlan.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\index.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\DefaultShaper.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\ArabicShaper.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\HangulShaper.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\GlyphInfo.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\OTProcessor.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\GlyphIterator.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\IndicShaper.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\indic.json","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\use.json","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\indic-data.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\UniversalShaper.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\GSUBProcessor.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\GPOSProcessor.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\TTFGlyph.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\Glyph.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\Path.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\StandardNames.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\CFFGlyph.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\SBIXGlyph.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\COLRGlyph.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\GlyphVariationProcessor.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\subset\\TTFSubset.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\subset\\Subset.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\TTFGlyphEncoder.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\subset\\CFFSubset.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\WOFFFont.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\WOFFDirectory.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\WOFF2Font.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\WOFF2Glyph.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\WOFF2Directory.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\TrueTypeCollection.js","E:\\SLIIT\\2nd Year\\Y2S2\\ITP\\Project\\MOH-Midwife-3\\MOH-Midwife-3\\midwife\\frontend\\node_modules\\fontkit\\dist\\src\\DFont.js"],"sourcesContent":["import { registerFormat, create, defaultLanguage, setDefaultLanguage } from './base';\nimport TTFFont from './TTFFont';\nimport WOFFFont from './WOFFFont';\nimport WOFF2Font from './WOFF2Font';\nimport TrueTypeCollection from './TrueTypeCollection';\nimport DFont from './DFont';\n\n// Register font formats\nregisterFormat(TTFFont);\nregisterFormat(WOFFFont);\nregisterFormat(WOFF2Font);\nregisterFormat(TrueTypeCollection);\nregisterFormat(DFont);\n\nexport * from './base';\n","import {DecodeStream} from 'restructure';\n\nexport let logErrors = false;\n\nlet formats = [];\nexport function registerFormat(format) {\n  formats.push(format);\n};\n\nexport function create(buffer, postscriptName) {\n  for (let i = 0; i < formats.length; i++) {\n    let format = formats[i];\n    if (format.probe(buffer)) {\n      let font = new format(new DecodeStream(buffer));\n      if (postscriptName) {\n        return font.getFont(postscriptName);\n      }\n\n      return font;\n    }\n  }\n\n  throw new Error('Unknown font format');\n};\n\nexport let defaultLanguage = 'en';\nexport function setDefaultLanguage(lang = 'en') {\n  defaultLanguage = lang;\n};\n","import * as r from 'restructure';\nimport { cache } from './decorators';\nimport * as fontkit from './base';\nimport Directory from './tables/directory';\nimport tables from './tables';\nimport CmapProcessor from './CmapProcessor';\nimport LayoutEngine from './layout/LayoutEngine';\nimport TTFGlyph from './glyph/TTFGlyph';\nimport CFFGlyph from './glyph/CFFGlyph';\nimport SBIXGlyph from './glyph/SBIXGlyph';\nimport COLRGlyph from './glyph/COLRGlyph';\nimport GlyphVariationProcessor from './glyph/GlyphVariationProcessor';\nimport TTFSubset from './subset/TTFSubset';\nimport CFFSubset from './subset/CFFSubset';\nimport BBox from './glyph/BBox';\nimport { asciiDecoder } from './utils';\n\n/**\n * This is the base class for all SFNT-based font formats in fontkit.\n * It supports TrueType, and PostScript glyphs, and several color glyph formats.\n */\nexport default class TTFFont {\n  type = 'TTF';\n\n  static probe(buffer) {\n    let format = asciiDecoder.decode(buffer.slice(0, 4));\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  }\n\n  constructor(stream, variationCoords = null) {\n    this.defaultLanguage = null;\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n    this._decodeDirectory();\n\n    // define properties for each table to lazily parse\n    for (let tag in this.directory.tables) {\n      let table = this.directory.tables[tag];\n      if (tables[tag] && table.length > 0) {\n        Object.defineProperty(this, tag, {\n          get: this._getTable.bind(this, table)\n        });\n      }\n    }\n  }\n\n  setDefaultLanguage(lang = null) {\n    this.defaultLanguage = lang;\n  }\n\n  _getTable(table) {\n    if (!(table.tag in this._tables)) {\n      try {\n        this._tables[table.tag] = this._decodeTable(table);\n      } catch (e) {\n        if (fontkit.logErrors) {\n          console.error(`Error decoding table ${table.tag}`);\n          console.error(e.stack);\n        }\n      }\n    }\n\n    return this._tables[table.tag];\n  }\n\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n\n    return null;\n  }\n\n  _decodeDirectory() {\n    return this.directory = Directory.decode(this.stream, {_startOffset: 0});\n  }\n\n  _decodeTable(table) {\n    let pos = this.stream.pos;\n\n    let stream = this._getTableStream(table.tag);\n    let result = tables[table.tag].decode(stream, this, table.length);\n\n    this.stream.pos = pos;\n    return result;\n  }\n\n  /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */\n  getName(key, lang = this.defaultLanguage || fontkit.defaultLanguage) {\n    let record = this.name && this.name.records[key];\n    if (record) {\n      // Attempt to retrieve the entry, depending on which translation is available:\n      return (\n          record[lang]\n          || record[this.defaultLanguage]\n          || record[fontkit.defaultLanguage]\n          || record['en']\n          || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n          || null\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n   * @type {string}\n   */\n  get postscriptName() {\n    return this.getName('postscriptName');\n  }\n\n  /**\n   * The font's full name, e.g. \"Helvetica Bold\"\n   * @type {string}\n   */\n  get fullName() {\n    return this.getName('fullName');\n  }\n\n  /**\n   * The font's family name, e.g. \"Helvetica\"\n   * @type {string}\n   */\n  get familyName() {\n    return this.getName('fontFamily');\n  }\n\n  /**\n   * The font's sub-family, e.g. \"Bold\".\n   * @type {string}\n   */\n  get subfamilyName() {\n    return this.getName('fontSubfamily');\n  }\n\n  /**\n   * The font's copyright information\n   * @type {string}\n   */\n  get copyright() {\n    return this.getName('copyright');\n  }\n\n  /**\n   * The font's version number\n   * @type {string}\n   */\n  get version() {\n    return this.getName('version');\n  }\n\n  /**\n   * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n   * @type {number}\n   */\n  get ascent() {\n    return this.hhea.ascent;\n  }\n\n  /**\n   * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n   * @type {number}\n   */\n  get descent() {\n    return this.hhea.descent;\n  }\n\n  /**\n   * The amount of space that should be included between lines\n   * @type {number}\n   */\n  get lineGap() {\n    return this.hhea.lineGap;\n  }\n\n  /**\n   * The offset from the normal underline position that should be used\n   * @type {number}\n   */\n  get underlinePosition() {\n    return this.post.underlinePosition;\n  }\n\n  /**\n   * The weight of the underline that should be used\n   * @type {number}\n   */\n  get underlineThickness() {\n    return this.post.underlineThickness;\n  }\n\n  /**\n   * If this is an italic font, the angle the cursor should be drawn at to match the font design\n   * @type {number}\n   */\n  get italicAngle() {\n    return this.post.italicAngle;\n  }\n\n  /**\n   * The height of capital letters above the baseline.\n   * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n   * @type {number}\n   */\n  get capHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.capHeight : this.ascent;\n  }\n\n  /**\n   * The height of lower case letters in the font.\n   * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n   * @type {number}\n   */\n  get xHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.xHeight : 0;\n  }\n\n  /**\n   * The number of glyphs in the font.\n   * @type {number}\n   */\n  get numGlyphs() {\n    return this.maxp.numGlyphs;\n  }\n\n  /**\n   * The size of the font’s internal coordinate grid\n   * @type {number}\n   */\n  get unitsPerEm() {\n    return this.head.unitsPerEm;\n  }\n\n  /**\n   * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n   * @type {BBox}\n   */\n  @cache\n  get bbox() {\n    return Object.freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n  }\n\n  @cache\n  get _cmapProcessor() {\n    return new CmapProcessor(this.cmap);\n  }\n\n  /**\n   * An array of all of the unicode code points supported by the font.\n   * @type {number[]}\n   */\n  @cache\n  get characterSet() {\n    return this._cmapProcessor.getCharacterSet();\n  }\n\n  /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */\n  hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  }\n\n  /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */\n  glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  }\n\n  /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */\n  glyphsForString(string) {\n    let glyphs = [];\n    let len = string.length;\n    let idx = 0;\n    let last = -1;\n    let state = -1;\n\n    while (idx <= len) {\n      let code = 0;\n      let nextState = 0;\n\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          let next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = ((0xfe00 <= code && code <= 0xfe0f) || (0xe0100 <= code && code <= 0xe01ef)) ? 1 : 0;\n      } else {\n        idx++;\n      }\n\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      }\n\n      last = code;\n      state = nextState;\n    }\n\n    return glyphs;\n  }\n\n  @cache\n  get _layoutEngine() {\n    return new LayoutEngine(this);\n  }\n\n  /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */\n  layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  }\n\n  /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */\n  stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  }\n\n  /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */\n  get availableFeatures() {\n    return this._layoutEngine.getAvailableFeatures();\n  }\n\n  getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  }\n\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) {\n        this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);\n\n      } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {\n        this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n\n  /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */\n  getGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) {\n        this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);\n\n      } else if ((this.directory.tables.COLR) && (this.directory.tables.CPAL)) {\n        this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);\n\n      } else {\n        this._getBaseGlyph(glyph, characters);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n\n  /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */\n  createSubset() {\n    if (this.directory.tables['CFF ']) {\n      return new CFFSubset(this);\n    }\n\n    return new TTFSubset(this);\n  }\n\n  /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */\n  @cache\n  get variationAxes() {\n    let res = {};\n    if (!this.fvar) {\n      return res;\n    }\n\n    for (let axis of this.fvar.axis) {\n      res[axis.axisTag.trim()] = {\n        name: axis.name.en,\n        min: axis.minValue,\n        default: axis.defaultValue,\n        max: axis.maxValue\n      };\n    }\n\n    return res;\n  }\n\n  /**\n   * Returns an object describing the named variation instances\n   * that the font designer has specified. Keys are variation names\n   * and values are the variation settings for this instance.\n   *\n   * @type {object}\n   */\n  @cache\n  get namedVariations() {\n    let res = {};\n    if (!this.fvar) {\n      return res;\n    }\n\n    for (let instance of this.fvar.instance) {\n      let settings = {};\n      for (let i = 0; i < this.fvar.axis.length; i++) {\n        let axis = this.fvar.axis[i];\n        settings[axis.axisTag.trim()] = instance.coord[i];\n      }\n\n      res[instance.name.en] = settings;\n    }\n\n    return res;\n  }\n\n  /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */\n  getVariation(settings) {\n    if (!(this.directory.tables.fvar && ((this.directory.tables.gvar && this.directory.tables.glyf) || this.directory.tables.CFF2))) {\n      throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    }\n\n    if (typeof settings === 'string') {\n      settings = this.namedVariations[settings];\n    }\n\n    if (typeof settings !== 'object') {\n      throw new Error('Variation settings must be either a variation name or settings object.');\n    }\n\n    // normalize the coordinates\n    let coords = this.fvar.axis.map((axis, i) => {\n      let axisTag = axis.axisTag.trim();\n      if (axisTag in settings) {\n        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n      } else {\n        return axis.defaultValue;\n      }\n    });\n\n    let stream = new r.DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n\n    let font = new TTFFont(stream, coords);\n    font._tables = this._tables;\n\n    return font;\n  }\n\n  @cache\n  get _variationProcessor() {\n    if (!this.fvar) {\n      return null;\n    }\n\n    let variationCoords = this.variationCoords;\n\n    // Ignore if no variation coords and not CFF2\n    if (!variationCoords && !this.CFF2) {\n      return null;\n    }\n\n    if (!variationCoords) {\n      variationCoords = this.fvar.axis.map(axis => axis.defaultValue);\n    }\n\n    return new GlyphVariationProcessor(this, variationCoords);\n  }\n\n  // Standardized format plugin API\n  getFont(name) {\n    return this.getVariation(name);\n  }\n}\n","/**\n * This decorator caches the results of a getter or method such that\n * the results are lazily computed once, and then cached.\n * @private\n */\nexport function cache(target, key, descriptor) {\n  if (descriptor.get) {\n    let get = descriptor.get;\n    descriptor.get = function() {\n      let value = get.call(this);\n      Object.defineProperty(this, key, { value });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    let fn = descriptor.value;\n\n    return {\n      get() {\n        let cache = new Map;\n        function memoized(...args) {\n          let key = args.length > 0 ? args[0] : 'value';\n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n\n          let result = fn.apply(this, args);\n          cache.set(key, result);\n          return result;\n        };\n\n        Object.defineProperty(this, key, {value: memoized});\n        return memoized;\n      }\n    };\n  }\n}\n","import * as r from 'restructure';\nimport Tables from './';\n\nlet TableEntry = new r.Struct({\n  tag:        new r.String(4),\n  checkSum:   r.uint32,\n  offset:     new r.Pointer(r.uint32, 'void', { type: 'global' }),\n  length:     r.uint32\n});\n\nlet Directory = new r.Struct({\n  tag:            new r.String(4),\n  numTables:      r.uint16,\n  searchRange:    r.uint16,\n  entrySelector:  r.uint16,\n  rangeShift:     r.uint16,\n  tables:         new r.Array(TableEntry, 'numTables')\n});\n\nDirectory.process = function() {\n  let tables = {};\n  for (let table of this.tables) {\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nDirectory.preEncode = function() {\n  if (!Array.isArray(this.tables)) {\n    let tables = [];\n    for (let tag in this.tables) {\n      let table = this.tables[tag];\n      if (table) {\n        tables.push({\n          tag: tag,\n          checkSum: 0,\n          offset: new r.VoidPointer(Tables[tag], table),\n          length: Tables[tag].size(table)\n        });\n      }\n    }\n    \n    this.tables = tables;\n  }\n\n  this.tag = 'true';\n  this.numTables = this.tables.length;\n\n  let maxExponentFor2 = Math.floor((Math.log(this.numTables) / Math.LN2));\n  let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n\n  this.searchRange =  maxPowerOf2 * 16;\n  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\n\nexport default Directory;\n","let tables = {};\nexport default tables;\n\n// Required Tables\nimport cmap from './cmap';\nimport head from './head';\nimport hhea from './hhea';\nimport hmtx from './hmtx';\nimport maxp from './maxp';\nimport name from './name';\nimport OS2 from './OS2';\nimport post from './post';\n\ntables.cmap = cmap;\ntables.head = head;\ntables.hhea = hhea;\ntables.hmtx = hmtx;\ntables.maxp = maxp;\ntables.name = name;\ntables['OS/2'] = OS2;\ntables.post = post;\n\n\n// TrueType Outlines\nimport cvt from './cvt';\nimport fpgm from './fpgm';\nimport loca from './loca';\nimport prep from './prep';\nimport glyf from './glyf';\n\ntables.fpgm = fpgm;\ntables.loca = loca;\ntables.prep = prep;\ntables['cvt '] = cvt;\ntables.glyf = glyf;\n\n\n// PostScript Outlines\nimport CFFFont from '../cff/CFFFont';\nimport VORG from './VORG';\n\ntables['CFF '] = CFFFont;\ntables['CFF2'] = CFFFont;\ntables.VORG = VORG;\n\n\n// Bitmap Glyphs\nimport EBLC from './EBLC';\nimport sbix from './sbix';\nimport COLR from './COLR';\nimport CPAL from './CPAL';\n\ntables.EBLC = EBLC;\ntables.CBLC = tables.EBLC;\ntables.sbix = sbix;\ntables.COLR = COLR;\ntables.CPAL = CPAL;\n\n\n// Advanced OpenType Tables\nimport BASE from './BASE';\nimport GDEF from './GDEF';\nimport GPOS from './GPOS';\nimport GSUB from './GSUB';\nimport JSTF from './JSTF';\n\ntables.BASE = BASE;\ntables.GDEF = GDEF;\ntables.GPOS = GPOS;\ntables.GSUB = GSUB;\ntables.JSTF = JSTF;\n\n// OpenType variations tables\nimport HVAR from './HVAR';\n\ntables.HVAR = HVAR;\n\n// Other OpenType Tables\nimport DSIG from './DSIG';\nimport gasp from './gasp';\nimport hdmx from './hdmx';\nimport kern from './kern';\nimport LTSH from './LTSH';\nimport PCLT from './PCLT';\nimport VDMX from './VDMX';\nimport vhea from './vhea';\nimport vmtx from './vmtx';\n\ntables.DSIG = DSIG;\ntables.gasp = gasp;\ntables.hdmx = hdmx;\ntables.kern = kern;\ntables.LTSH = LTSH;\ntables.PCLT = PCLT;\ntables.VDMX = VDMX;\ntables.vhea = vhea;\ntables.vmtx = vmtx;\n\n\n// Apple Advanced Typography Tables\nimport avar from './avar';\nimport bsln from './bsln';\nimport feat from './feat';\nimport fvar from './fvar';\nimport gvar from './gvar';\nimport just from './just';\nimport morx from './morx';\nimport opbd from './opbd';\n\ntables.avar = avar;\ntables.bsln = bsln;\ntables.feat = feat;\ntables.fvar = fvar;\ntables.gvar = gvar;\ntables.just = just;\ntables.morx = morx;\ntables.opbd = opbd;\n","import * as r from 'restructure';\n\nlet SubHeader = new r.Struct({\n  firstCode:      r.uint16,\n  entryCount:     r.uint16,\n  idDelta:        r.int16,\n  idRangeOffset:  r.uint16\n});\n\nlet CmapGroup = new r.Struct({\n  startCharCode:  r.uint32,\n  endCharCode:    r.uint32,\n  glyphID:        r.uint32\n});\n\nlet UnicodeValueRange = new r.Struct({\n  startUnicodeValue:  r.uint24,\n  additionalCount:    r.uint8\n});\n\nlet UVSMapping = new r.Struct({\n  unicodeValue: r.uint24,\n  glyphID:      r.uint16\n});\n\nlet DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);\nlet NonDefaultUVS = new r.Array(UVSMapping, r.uint32);\n\nlet VarSelectorRecord = new r.Struct({\n  varSelector:    r.uint24,\n  defaultUVS:     new r.Pointer(r.uint32, DefaultUVS, {type: 'parent'}),\n  nonDefaultUVS:  new r.Pointer(r.uint32, NonDefaultUVS, {type: 'parent'})\n});\n\nlet CmapSubtable = new r.VersionedStruct(r.uint16, {\n  0: { // Byte encoding\n    length:     r.uint16,   // Total table length in bytes (set to 262 for format 0)\n    language:   r.uint16,   // Language code for this encoding subtable, or zero if language-independent\n    codeMap:    new r.LazyArray(r.uint8, 256)\n  },\n\n  2: { // High-byte mapping (CJK)\n    length:           r.uint16,\n    language:         r.uint16,\n    subHeaderKeys:    new r.Array(r.uint16, 256),\n    subHeaderCount:   t => Math.max.apply(Math, t.subHeaderKeys),\n    subHeaders:       new r.LazyArray(SubHeader, 'subHeaderCount'),\n    glyphIndexArray:  new r.LazyArray(r.uint16, 'subHeaderCount')\n  },\n\n  4: { // Segment mapping to delta values\n    length:           r.uint16,              // Total table length in bytes\n    language:         r.uint16,              // Language code\n    segCountX2:       r.uint16,\n    segCount:         t => t.segCountX2 >> 1,\n    searchRange:      r.uint16,\n    entrySelector:    r.uint16,\n    rangeShift:       r.uint16,\n    endCode:          new r.LazyArray(r.uint16, 'segCount'),\n    reservedPad:      new r.Reserved(r.uint16),       // This value should be zero\n    startCode:        new r.LazyArray(r.uint16, 'segCount'),\n    idDelta:          new r.LazyArray(r.int16, 'segCount'),\n    idRangeOffset:    new r.LazyArray(r.uint16, 'segCount'),\n    glyphIndexArray:  new r.LazyArray(r.uint16, t => (t.length - t._currentOffset) / 2)\n  },\n\n  6: { // Trimmed table\n    length:         r.uint16,\n    language:       r.uint16,\n    firstCode:      r.uint16,\n    entryCount:     r.uint16,\n    glyphIndices:   new r.LazyArray(r.uint16, 'entryCount')\n  },\n\n  8: { // mixed 16-bit and 32-bit coverage\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint16,\n    is32:     new r.LazyArray(r.uint8, 8192),\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  10: { // Trimmed Array\n    reserved:       new r.Reserved(r.uint16),\n    length:         r.uint32,\n    language:       r.uint32,\n    firstCode:      r.uint32,\n    entryCount:     r.uint32,\n    glyphIndices:   new r.LazyArray(r.uint16, 'numChars')\n  },\n\n  12: { // Segmented coverage\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint32,\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  13: { // Many-to-one range mappings (same as 12 except for group.startGlyphID)\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint32,\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  14: { // Unicode Variation Sequences\n    length:       r.uint32,\n    numRecords:   r.uint32,\n    varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')\n  }\n});\n\nlet CmapEntry = new r.Struct({\n  platformID:  r.uint16,  // Platform identifier\n  encodingID:  r.uint16,  // Platform-specific encoding identifier\n  table:       new r.Pointer(r.uint32, CmapSubtable, {type: 'parent', lazy: true})\n});\n\n// character to glyph mapping\nexport default new r.Struct({\n  version:      r.uint16,\n  numSubtables: r.uint16,\n  tables:       new r.Array(CmapEntry, 'numSubtables')\n});\n","import * as r from 'restructure';\n\n// font header\nexport default new r.Struct({\n  version:            r.int32,                   // 0x00010000 (version 1.0)\n  revision:           r.int32,                   // set by font manufacturer\n  checkSumAdjustment: r.uint32,\n  magicNumber:        r.uint32,                  // set to 0x5F0F3CF5\n  flags:              r.uint16,\n  unitsPerEm:         r.uint16,                  // range from 64 to 16384\n  created:            new r.Array(r.int32, 2),\n  modified:           new r.Array(r.int32, 2),\n  xMin:               r.int16,                   // for all glyph bounding boxes\n  yMin:               r.int16,                   // for all glyph bounding boxes\n  xMax:               r.int16,                   // for all glyph bounding boxes\n  yMax:               r.int16,                   // for all glyph bounding boxes\n  macStyle:           new r.Bitfield(r.uint16, [\n    'bold', 'italic', 'underline', 'outline',\n    'shadow', 'condensed', 'extended'\n  ]),\n  lowestRecPPEM:      r.uint16,                  // smallest readable size in pixels\n  fontDirectionHint:  r.int16,\n  indexToLocFormat:   r.int16,                   // 0 for short offsets, 1 for long\n  glyphDataFormat:    r.int16                    // 0 for current format\n});\n","import * as r from 'restructure';\n\n// horizontal header\nexport default new r.Struct({\n  version:              r.int32,\n  ascent:               r.int16,   // Distance from baseline of highest ascender\n  descent:              r.int16,   // Distance from baseline of lowest descender\n  lineGap:              r.int16,   // Typographic line gap\n  advanceWidthMax:      r.uint16,  // Maximum advance width value in 'hmtx' table\n  minLeftSideBearing:   r.int16,   // Maximum advance width value in 'hmtx' table\n  minRightSideBearing:  r.int16,   // Minimum right sidebearing value\n  xMaxExtent:           r.int16,\n  caretSlopeRise:       r.int16,   // Used to calculate the slope of the cursor (rise/run); 1 for vertical\n  caretSlopeRun:        r.int16,   // 0 for vertical\n  caretOffset:          r.int16,   // Set to 0 for non-slanted fonts\n  reserved:             new r.Reserved(r.int16, 4),\n  metricDataFormat:     r.int16,   // 0 for current format\n  numberOfMetrics:      r.uint16   // Number of advance widths in 'hmtx' table\n});\n","import * as r from 'restructure';\n\nlet HmtxEntry = new r.Struct({\n  advance: r.uint16,\n  bearing: r.int16\n});\n\nexport default new r.Struct({\n  metrics:    new r.LazyArray(HmtxEntry, t => t.parent.hhea.numberOfMetrics),\n  bearings:   new r.LazyArray(r.int16, t => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\n","import * as r from 'restructure';\n\n// maxiumum profile\nexport default new r.Struct({\n  version:                r.int32,\n  numGlyphs:              r.uint16,  // The number of glyphs in the font\n  maxPoints:              r.uint16,  // Maximum points in a non-composite glyph\n  maxContours:            r.uint16,  // Maximum contours in a non-composite glyph\n  maxComponentPoints:     r.uint16,  // Maximum points in a composite glyph\n  maxComponentContours:   r.uint16,  // Maximum contours in a composite glyph\n  maxZones:               r.uint16,  // 1 if instructions do not use the twilight zone, 2 otherwise\n  maxTwilightPoints:      r.uint16,  // Maximum points used in Z0\n  maxStorage:             r.uint16,  // Number of Storage Area locations\n  maxFunctionDefs:        r.uint16,  // Number of FDEFs\n  maxInstructionDefs:     r.uint16,  // Number of IDEFs\n  maxStackElements:       r.uint16,  // Maximum stack depth\n  maxSizeOfInstructions:  r.uint16,  // Maximum byte count for glyph instructions\n  maxComponentElements:   r.uint16,  // Maximum number of components referenced at “top level” for any composite glyph\n  maxComponentDepth:      r.uint16   // Maximum levels of recursion; 1 for simple components\n});\n","import * as r from 'restructure';\nimport {getEncoding, LANGUAGES} from '../encodings';\n\nlet NameRecord = new r.Struct({\n  platformID: r.uint16,\n  encodingID: r.uint16,\n  languageID: r.uint16,\n  nameID:     r.uint16,\n  length:     r.uint16,\n  string:     new r.Pointer(r.uint16,\n    new r.String('length', t => getEncoding(t.platformID, t.encodingID, t.languageID)),\n    { type: 'parent', relativeTo: ctx => ctx.parent.stringOffset, allowNull: false }\n  )\n});\n\nlet LangTagRecord = new r.Struct({\n  length:  r.uint16,\n  tag:     new r.Pointer(r.uint16, new r.String('length', 'utf16be'), {type: 'parent', relativeTo: ctx => ctx.stringOffset})\n});\n\nvar NameTable = new r.VersionedStruct(r.uint16, {\n  0: {\n    count:          r.uint16,\n    stringOffset:   r.uint16,\n    records:        new r.Array(NameRecord, 'count')\n  },\n  1: {\n    count:          r.uint16,\n    stringOffset:   r.uint16,\n    records:        new r.Array(NameRecord, 'count'),\n    langTagCount:   r.uint16,\n    langTags:       new r.Array(LangTagRecord, 'langTagCount')\n  }\n});\n\nexport default NameTable;\n\nconst NAMES = [\n  'copyright',\n  'fontFamily',\n  'fontSubfamily',\n  'uniqueSubfamily',\n  'fullName',\n  'version',\n  'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.\n  'trademark',\n  'manufacturer',\n  'designer',\n  'description',\n  'vendorURL',\n  'designerURL',\n  'license',\n  'licenseURL',\n  null, // reserved\n  'preferredFamily',\n  'preferredSubfamily',\n  'compatibleFull',\n  'sampleText',\n  'postscriptCIDFontName',\n  'wwsFamilyName',\n  'wwsSubfamilyName'\n];\n\nNameTable.process = function(stream) {\n  var records = {};\n  for (let record of this.records) {\n    // find out what language this is for\n    let language = LANGUAGES[record.platformID][record.languageID];\n\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) {\n      language = this.langTags[record.languageID - 0x8000].tag;\n    }\n\n    if (language == null) {\n      language = record.platformID + '-' + record.languageID;\n    }\n\n    // if the nameID is >= 256, it is a font feature record (AAT)\n    let key = record.nameID >= 256 ? 'fontFeatures' : (NAMES[record.nameID] || record.nameID);\n    if (records[key] == null) {\n      records[key] = {};\n    }\n\n    let obj = records[key];\n    if (record.nameID >= 256) {\n      obj = obj[record.nameID] || (obj[record.nameID] = {});\n    }\n\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') {\n      obj[language] = record.string;\n    }\n  }\n\n  this.records = records;\n};\n\nNameTable.preEncode = function() {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n\n  let records = [];\n  for (let key in this.records) {\n    let val = this.records[key];\n    if (key === 'fontFeatures') continue;\n\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: NAMES.indexOf(key),\n      length: val.en.length * 2,\n      string: val.en\n    });\n\n    if (key === 'postscriptName') {\n      records.push({\n        platformID: 1,\n        encodingID: 0,\n        languageID: 0,\n        nameID: NAMES.indexOf(key),\n        length: val.en.length,\n        string: val.en\n      });\n    }\n  }\n\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = NameTable.size(this, null, false);\n};\n","/**\n * Gets an encoding name from platform, encoding, and language ids.\n * Returned encoding names can be used in iconv-lite to decode text.\n */\nexport function getEncoding(platformID, encodingID, languageID = 0) {\n  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {\n    return MAC_LANGUAGE_ENCODINGS[languageID];\n  }\n  \n  return ENCODINGS[platformID][encodingID];\n}\n\nconst SINGLE_BYTE_ENCODINGS = new Set(['x-mac-roman', 'x-mac-cyrillic', 'iso-8859-6', 'iso-8859-8']);\nconst MAC_ENCODINGS = {\n  'x-mac-croatian': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n  'x-mac-gaelic': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n  'x-mac-greek': 'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n  'x-mac-icelandic': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n  'x-mac-inuit': 'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n  'x-mac-ce': 'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n  'x-mac-romanian': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n  'x-mac-turkish': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n};\n\nconst encodingCache = new Map();\n\nexport function getEncodingMapping(encoding) {\n  let cached = encodingCache.get(encoding);\n  if (cached) {\n    return cached;\n  }\n\n  // These encodings aren't supported by TextDecoder.\n  let mapping = MAC_ENCODINGS[encoding];\n  if (mapping) {\n    let res = new Map();\n    for (let i = 0; i < mapping.length; i++) {\n      res.set(mapping.charCodeAt(i), 0x80 + i);\n    }\n\n    encodingCache.set(encoding, res);\n    return res;\n  }\n\n  // Only single byte encodings can be mapped 1:1.\n  if (SINGLE_BYTE_ENCODINGS.has(encoding)) {\n    // TextEncoder only supports utf8, whereas TextDecoder supports legacy encodings.\n    // Use this to create a mapping of code points.\n    let decoder = new TextDecoder(encoding);\n    let mapping = new Uint8Array(0x80);\n    for (let i = 0; i < 0x80; i++) {\n      mapping[i] = 0x80 + i;\n    }\n\n    let res = new Map();\n    let s = decoder.decode(mapping);\n    for (let i = 0; i < 0x80; i++) {\n      res.set(s.charCodeAt(i), 0x80 + i);\n    }\n\n    encodingCache.set(encoding, res);\n    return res;\n  }\n}\n\n// Map of platform ids to encoding ids.\nexport const ENCODINGS = [\n  // unicode\n  ['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'],\n  \n  // macintosh\n  // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n  // 0\tRoman                 17\tMalayalam\n  // 1\tJapanese\t            18\tSinhalese\n  // 2\tTraditional Chinese\t  19\tBurmese\n  // 3\tKorean\t              20\tKhmer\n  // 4\tArabic\t              21\tThai\n  // 5\tHebrew\t              22\tLaotian\n  // 6\tGreek\t                23\tGeorgian\n  // 7\tRussian\t              24\tArmenian\n  // 8\tRSymbol\t              25\tSimplified Chinese\n  // 9\tDevanagari\t          26\tTibetan\n  // 10\tGurmukhi\t            27\tMongolian\n  // 11\tGujarati\t            28\tGeez\n  // 12\tOriya\t                29\tSlavic\n  // 13\tBengali\t              30\tVietnamese\n  // 14\tTamil\t                31\tSindhi\n  // 15\tTelugu\t              32\t(Uninterpreted)\n  // 16\tKannada\n  ['x-mac-roman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8',\n   'x-mac-greek', 'x-mac-cyrillic', 'x-mac-symbol', 'x-mac-devanagari', 'x-mac-gurmukhi', 'x-mac-gujarati',\n   'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese',\n   'Burmese', 'Khmer', 'iso-8859-11', 'Laotian', 'Georgian', 'Armenian', 'hz-gb-2312', \n   'Tibetan', 'Mongolian', 'Geez', 'x-mac-ce', 'Vietnamese', 'Sindhi'],\n  \n  // ISO (deprecated)\n  ['ascii'],\n  \n  // windows\n  // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n  ['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'x-cp20949', 'johab', null, null, null, 'utf16be']\n];\n\n// Overrides for Mac scripts by language id.\n// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nexport const MAC_LANGUAGE_ENCODINGS = {\n  15: 'x-mac-icelandic',\n  17: 'x-mac-turkish',\n  18: 'x-mac-croatian',\n  24: 'x-mac-ce',\n  25: 'x-mac-ce',\n  26: 'x-mac-ce',\n  27: 'x-mac-ce',\n  28: 'x-mac-ce',\n  30: 'x-mac-icelandic',\n  37: 'x-mac-romanian',\n  38: 'x-mac-ce',\n  39: 'x-mac-ce',\n  40: 'x-mac-ce',\n  143: 'x-mac-inuit',\n  146: 'x-mac-gaelic'\n};\n\n// Map of platform ids to BCP-47 language codes.\nexport const LANGUAGES = [\n  // unicode\n  [],\n  \n  { // macintosh\n    0: 'en',        30: 'fo',       60: 'ks',       90: 'rw',\n    1: 'fr',        31: 'fa',       61: 'ku',       91: 'rn',\n    2: 'de',        32: 'ru',       62: 'sd',       92: 'ny',\n    3: 'it',        33: 'zh',       63: 'bo',       93: 'mg',\n    4: 'nl',        34: 'nl-BE',    64: 'ne',       94: 'eo',\n    5: 'sv',        35: 'ga',       65: 'sa',       128: 'cy',\n    6: 'es',        36: 'sq',       66: 'mr',       129: 'eu',\n    7: 'da',        37: 'ro',       67: 'bn',       130: 'ca',\n    8: 'pt',        38: 'cz',       68: 'as',       131: 'la',\n    9: 'no',        39: 'sk',       69: 'gu',       132: 'qu',\n    10: 'he',       40: 'si',       70: 'pa',       133: 'gn',\n    11: 'ja',       41: 'yi',       71: 'or',       134: 'ay',\n    12: 'ar',       42: 'sr',       72: 'ml',       135: 'tt',\n    13: 'fi',       43: 'mk',       73: 'kn',       136: 'ug',\n    14: 'el',       44: 'bg',       74: 'ta',       137: 'dz',\n    15: 'is',       45: 'uk',       75: 'te',       138: 'jv',\n    16: 'mt',       46: 'be',       76: 'si',       139: 'su',\n    17: 'tr',       47: 'uz',       77: 'my',       140: 'gl',\n    18: 'hr',       48: 'kk',       78: 'km',       141: 'af',\n    19: 'zh-Hant',  49: 'az-Cyrl',  79: 'lo',       142: 'br',\n    20: 'ur',       50: 'az-Arab',  80: 'vi',       143: 'iu',\n    21: 'hi',       51: 'hy',       81: 'id',       144: 'gd',\n    22: 'th',       52: 'ka',       82: 'tl',       145: 'gv',\n    23: 'ko',       53: 'mo',       83: 'ms',       146: 'ga',\n    24: 'lt',       54: 'ky',       84: 'ms-Arab',  147: 'to',\n    25: 'pl',       55: 'tg',       85: 'am',       148: 'el-polyton',\n    26: 'hu',       56: 'tk',       86: 'ti',       149: 'kl',\n    27: 'es',       57: 'mn-CN',    87: 'om',       150: 'az',\n    28: 'lv',       58: 'mn',       88: 'so',       151: 'nn',\n    29: 'se',       59: 'ps',       89: 'sw',\n  },\n  \n  // ISO (deprecated)\n  [],\n  \n  { // windows                                        \n    0x0436: 'af',       0x4009: 'en-IN',    0x0487: 'rw',          0x0432: 'tn',       \n    0x041C: 'sq',       0x1809: 'en-IE',    0x0441: 'sw',          0x045B: 'si',          \n    0x0484: 'gsw',      0x2009: 'en-JM',    0x0457: 'kok',         0x041B: 'sk',          \n    0x045E: 'am',       0x4409: 'en-MY',    0x0412: 'ko',          0x0424: 'sl',          \n    0x1401: 'ar-DZ',    0x1409: 'en-NZ',    0x0440: 'ky',          0x2C0A: 'es-AR',       \n    0x3C01: 'ar-BH',    0x3409: 'en-PH',    0x0454: 'lo',          0x400A: 'es-BO',       \n    0x0C01: 'ar',       0x4809: 'en-SG',    0x0426: 'lv',          0x340A: 'es-CL',       \n    0x0801: 'ar-IQ',    0x1C09: 'en-ZA',    0x0427: 'lt',          0x240A: 'es-CO',       \n    0x2C01: 'ar-JO',    0x2C09: 'en-TT',    0x082E: 'dsb',         0x140A: 'es-CR',       \n    0x3401: 'ar-KW',    0x0809: 'en-GB',    0x046E: 'lb',          0x1C0A: 'es-DO',       \n    0x3001: 'ar-LB',    0x0409: 'en',       0x042F: 'mk',          0x300A: 'es-EC',       \n    0x1001: 'ar-LY',    0x3009: 'en-ZW',    0x083E: 'ms-BN',       0x440A: 'es-SV',       \n    0x1801: 'ary',      0x0425: 'et',       0x043E: 'ms',          0x100A: 'es-GT',       \n    0x2001: 'ar-OM',    0x0438: 'fo',       0x044C: 'ml',          0x480A: 'es-HN',       \n    0x4001: 'ar-QA',    0x0464: 'fil',      0x043A: 'mt',          0x080A: 'es-MX',       \n    0x0401: 'ar-SA',    0x040B: 'fi',       0x0481: 'mi',          0x4C0A: 'es-NI',       \n    0x2801: 'ar-SY',    0x080C: 'fr-BE',    0x047A: 'arn',         0x180A: 'es-PA',       \n    0x1C01: 'aeb',      0x0C0C: 'fr-CA',    0x044E: 'mr',          0x3C0A: 'es-PY',       \n    0x3801: 'ar-AE',    0x040C: 'fr',       0x047C: 'moh',         0x280A: 'es-PE',       \n    0x2401: 'ar-YE',    0x140C: 'fr-LU',    0x0450: 'mn',          0x500A: 'es-PR',       \n    0x042B: 'hy',       0x180C: 'fr-MC',    0x0850: 'mn-CN',       0x0C0A: 'es',          \n    0x044D: 'as',       0x100C: 'fr-CH',    0x0461: 'ne',          0x040A: 'es',          \n    0x082C: 'az-Cyrl',  0x0462: 'fy',       0x0414: 'nb',          0x540A: 'es-US',       \n    0x042C: 'az',       0x0456: 'gl',       0x0814: 'nn',          0x380A: 'es-UY',     \n    0x046D: 'ba',       0x0437: 'ka',       0x0482: 'oc',          0x200A: 'es-VE',       \n    0x042D: 'eu',       0x0C07: 'de-AT',    0x0448: 'or',          0x081D: 'sv-FI',       \n    0x0423: 'be',       0x0407: 'de',       0x0463: 'ps',          0x041D: 'sv',          \n    0x0845: 'bn',       0x1407: 'de-LI',    0x0415: 'pl',          0x045A: 'syr',         \n    0x0445: 'bn-IN',    0x1007: 'de-LU',    0x0416: 'pt',          0x0428: 'tg',          \n    0x201A: 'bs-Cyrl',  0x0807: 'de-CH',    0x0816: 'pt-PT',       0x085F: 'tzm',         \n    0x141A: 'bs',       0x0408: 'el',       0x0446: 'pa',          0x0449: 'ta',          \n    0x047E: 'br',       0x046F: 'kl',       0x046B: 'qu-BO',       0x0444: 'tt',          \n    0x0402: 'bg',       0x0447: 'gu',       0x086B: 'qu-EC',       0x044A: 'te',          \n    0x0403: 'ca',       0x0468: 'ha',       0x0C6B: 'qu',          0x041E: 'th',          \n    0x0C04: 'zh-HK',    0x040D: 'he',       0x0418: 'ro',          0x0451: 'bo',          \n    0x1404: 'zh-MO',    0x0439: 'hi',       0x0417: 'rm',          0x041F: 'tr',          \n    0x0804: 'zh',       0x040E: 'hu',       0x0419: 'ru',          0x0442: 'tk',          \n    0x1004: 'zh-SG',    0x040F: 'is',       0x243B: 'smn',         0x0480: 'ug',          \n    0x0404: 'zh-TW',    0x0470: 'ig',       0x103B: 'smj-NO',      0x0422: 'uk',          \n    0x0483: 'co',       0x0421: 'id',       0x143B: 'smj',         0x042E: 'hsb',         \n    0x041A: 'hr',       0x045D: 'iu',       0x0C3B: 'se-FI',       0x0420: 'ur',          \n    0x101A: 'hr-BA',    0x085D: 'iu-Latn',  0x043B: 'se',          0x0843: 'uz-Cyrl',     \n    0x0405: 'cs',       0x083C: 'ga',       0x083B: 'se-SE',       0x0443: 'uz',          \n    0x0406: 'da',       0x0434: 'xh',       0x203B: 'sms',         0x042A: 'vi',          \n    0x048C: 'prs',      0x0435: 'zu',       0x183B: 'sma-NO',      0x0452: 'cy',          \n    0x0465: 'dv',       0x0410: 'it',       0x1C3B: 'sms',         0x0488: 'wo',          \n    0x0813: 'nl-BE',    0x0810: 'it-CH',    0x044F: 'sa',          0x0485: 'sah',         \n    0x0413: 'nl',       0x0411: 'ja',       0x1C1A: 'sr-Cyrl-BA',  0x0478: 'ii',          \n    0x0C09: 'en-AU',    0x044B: 'kn',       0x0C1A: 'sr',          0x046A: 'yo',           \n    0x2809: 'en-BZ',    0x043F: 'kk',       0x181A: 'sr-Latn-BA',  \n    0x1009: 'en-CA',    0x0453: 'km',       0x081A: 'sr-Latn',     \n    0x2409: 'en-029',   0x0486: 'quc',      0x046C: 'nso',         \n  }\n];\n","import * as r from 'restructure';\n\nvar OS2 = new r.VersionedStruct(r.uint16, {\n  header: {\n    xAvgCharWidth:          r.int16,   // average weighted advance width of lower case letters and space\n    usWeightClass:          r.uint16,  // visual weight of stroke in glyphs\n    usWidthClass:           r.uint16,  // relative change from the normal aspect ratio (width to height ratio)\n    fsType:                 new r.Bitfield(r.uint16, [ // Indicates font embedding licensing rights\n      null, 'noEmbedding', 'viewOnly', 'editable', null,\n      null, null, null, 'noSubsetting', 'bitmapOnly'\n    ]),\n    ySubscriptXSize:        r.int16,   // recommended horizontal size in pixels for subscripts\n    ySubscriptYSize:        r.int16,   // recommended vertical size in pixels for subscripts\n    ySubscriptXOffset:      r.int16,   // recommended horizontal offset for subscripts\n    ySubscriptYOffset:      r.int16,   // recommended vertical offset form the baseline for subscripts\n    ySuperscriptXSize:      r.int16,   // recommended horizontal size in pixels for superscripts\n    ySuperscriptYSize:      r.int16,   // recommended vertical size in pixels for superscripts\n    ySuperscriptXOffset:    r.int16,   // recommended horizontal offset for superscripts\n    ySuperscriptYOffset:    r.int16,   // recommended vertical offset from the baseline for superscripts\n    yStrikeoutSize:         r.int16,   // width of the strikeout stroke\n    yStrikeoutPosition:     r.int16,   // position of the strikeout stroke relative to the baseline\n    sFamilyClass:           r.int16,   // classification of font-family design\n    panose:                 new r.Array(r.uint8, 10),   // describe the visual characteristics of a given typeface\n    ulCharRange:            new r.Array(r.uint32, 4),\n    vendorID:               new r.String(4),          // four character identifier for the font vendor\n    fsSelection:            new r.Bitfield(r.uint16, [  // bit field containing information about the font\n      'italic', 'underscore', 'negative', 'outlined', 'strikeout',\n      'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique'\n    ]),\n    usFirstCharIndex:       r.uint16,  // The minimum Unicode index in this font\n    usLastCharIndex:        r.uint16   // The maximum Unicode index in this font\n  },\n\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n\n  1: {\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2)\n  },\n\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2),\n\n    xHeight:            r.int16,\n    capHeight:          r.int16,\n    defaultChar:        r.uint16,\n    breakChar:          r.uint16,\n    maxContent:         r.uint16\n  },\n\n  5: {\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2),\n\n    xHeight:            r.int16,\n    capHeight:          r.int16,\n    defaultChar:        r.uint16,\n    breakChar:          r.uint16,\n    maxContent:         r.uint16,\n\n    usLowerOpticalPointSize: r.uint16,\n    usUpperOpticalPointSize: r.uint16\n  }\n});\n\nlet versions = OS2.versions;\nversions[3] = versions[4] = versions[2];\n\nexport default OS2;\n","import * as r from 'restructure';\n\n// PostScript information\nexport default new r.VersionedStruct(r.fixed32, {\n  header: { // these fields exist at the top of all versions\n    italicAngle:        r.fixed32, // Italic angle in counter-clockwise degrees from the vertical.\n    underlinePosition:  r.int16,   // Suggested distance of the top of the underline from the baseline\n    underlineThickness: r.int16,   // Suggested values for the underline thickness\n    isFixedPitch:       r.uint32,  // Whether the font is monospaced\n    minMemType42:       r.uint32,  // Minimum memory usage when a TrueType font is downloaded as a Type 42 font\n    maxMemType42:       r.uint32,  // Maximum memory usage when a TrueType font is downloaded as a Type 42 font\n    minMemType1:        r.uint32,  // Minimum memory usage when a TrueType font is downloaded as a Type 1 font\n    maxMemType1:        r.uint32   // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n  },\n\n  1: {}, // version 1 has no additional fields\n\n  2: {\n    numberOfGlyphs: r.uint16,\n    glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),\n    names:          new r.Array(new r.String(r.uint8))\n  },\n\n  2.5: {\n    numberOfGlyphs: r.uint16,\n    offsets:        new r.Array(r.uint8, 'numberOfGlyphs')\n  },\n\n  3: {}, // version 3 has no additional fields\n\n  4: {\n    map: new r.Array(r.uint32, t => t.parent.maxp.numGlyphs)\n  }\n});\n","import * as r from 'restructure';\n\n// An array of predefined values accessible by instructions\nexport default new r.Struct({\n  controlValues: new r.Array(r.int16)\n});\n","import * as r from 'restructure';\n\n// A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\nexport default new r.Struct({\n  instructions: new r.Array(r.uint8)\n});\n","import * as r from 'restructure';\n\nlet loca = new r.VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new r.Array(r.uint16)\n  },\n  1: {\n    offsets: new r.Array(r.uint32)\n  }\n});\n\nloca.process = function() {\n  if (this.version === 0 && !this._processed) {\n    for (let i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] <<= 1;\n    }\n    this._processed = true;\n  }\n};\n\nloca.preEncode = function() {\n  if (this.version === 0 && this._processed !== false) {\n    for (let i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] >>>= 1;\n    }\n    this._processed = false;\n  }\n};\n\nexport default loca;\n","import * as r from 'restructure';\n\n// Set of instructions executed whenever the point size or font transformation change\nexport default new r.Struct({\n  controlValueProgram: new r.Array(r.uint8)\n});\n","import * as r from 'restructure';\n\n// only used for encoding\nexport default new r.Array(new r.Buffer);\n","import * as r from 'restructure';\nimport CFFIndex from './CFFIndex';\nimport CFFTop from './CFFTop';\nimport CFFPrivateDict from './CFFPrivateDict';\nimport standardStrings from './CFFStandardStrings';\n\nclass CFFFont {\n  constructor(stream) {\n    this.stream = stream;\n    this.decode();\n  }\n\n  static decode(stream) {\n    return new CFFFont(stream);\n  }\n\n  decode() {\n    let start = this.stream.pos;\n    let top = CFFTop.decode(this.stream);\n    for (let key in top) {\n      let val = top[key];\n      this[key] = val;\n    }\n\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) {\n        throw new Error(\"Only a single font is allowed in CFF\");\n      }\n\n      this.topDict = this.topDictIndex[0];\n    }\n\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  }\n\n  string(sid) {\n    if (this.version >= 2) {\n      return null;\n    }\n\n    if (sid < standardStrings.length) {\n      return standardStrings[sid];\n    }\n\n    return this.stringIndex[sid - standardStrings.length];\n  }\n\n  get postscriptName() {\n    if (this.version < 2) {\n      return this.nameIndex[0];\n    }\n\n    return null;\n  }\n\n  get fullName() {\n    return this.string(this.topDict.FullName);\n  }\n\n  get familyName() {\n    return this.string(this.topDict.FamilyName);\n  }\n\n  getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  }\n\n  getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) {\n      return null;\n    }\n\n    // CID-keyed fonts don't have glyph names\n    if (this.isCIDFont) {\n      return null;\n    }\n\n    let { charset } = this.topDict;\n    if (Array.isArray(charset)) {\n      return charset[gid];\n    }\n\n    if (gid === 0) {\n      return '.notdef';\n    }\n\n    gid -= 1;\n\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n\n      case 1:\n      case 2:\n        for (let i = 0; i < charset.ranges.length; i++) {\n          let range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) {\n            return this.string(range.first + (gid - range.offset));\n          }\n        }\n        break;\n    }\n\n    return null;\n  }\n\n  fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) {\n      return null;\n    }\n\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n\n      case 3:\n      case 4:\n        let { ranges } = this.topDict.FDSelect;\n        let low = 0;\n        let high = ranges.length - 1;\n\n        while (low <= high) {\n          let mid = (low + high) >> 1;\n\n          if (gid < ranges[mid].first) {\n            high = mid - 1;\n          } else if (mid < high && gid >= ranges[mid + 1].first) {\n            low = mid + 1;\n          } else {\n            return ranges[mid].fd;\n          }\n        }\n      default:\n        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n    }\n  }\n\n  privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      let fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) {\n        return this.topDict.FDArray[fd].Private;\n      }\n\n      return null;\n    }\n\n    if (this.version < 2) {\n      return this.topDict.Private;\n    }\n\n    return this.topDict.FDArray[0].Private;\n  }\n}\n\nexport default CFFFont;\n","import * as r from 'restructure';\n\nexport default class CFFIndex {\n  constructor(type) {\n    this.type = type;\n  }\n\n  getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) {\n      ctx = ctx.parent;\n    }\n\n    return ctx ? ctx.version : -1;\n  }\n\n  decode(stream, parent) {\n    let version = this.getCFFVersion(parent);\n    let count = version >= 2\n      ? stream.readUInt32BE()\n      : stream.readUInt16BE();\n\n    if (count === 0) {\n      return [];\n    }\n\n    let offSize = stream.readUInt8();\n    let offsetType;\n    if (offSize === 1) {\n      offsetType = r.uint8;\n    } else if (offSize === 2) {\n      offsetType = r.uint16;\n    } else if (offSize === 3) {\n      offsetType = r.uint24;\n    } else if (offSize === 4) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n    }\n\n    let ret = [];\n    let startPos = stream.pos + ((count + 1) * offSize) - 1;\n\n    let start = offsetType.decode(stream);\n    for (let i = 0; i < count; i++) {\n      let end = offsetType.decode(stream);\n\n      if (this.type != null) {\n        let pos = stream.pos;\n        stream.pos = startPos + start;\n\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else {\n        ret.push({\n          offset: startPos + start,\n          length: end - start\n        });\n      }\n\n      start = end;\n    }\n\n    stream.pos = startPos + start;\n    return ret;\n  }\n\n  size(arr, parent) {\n    let size = 2;\n    if (arr.length === 0) {\n      return size;\n    }\n\n    let type = this.type || new r.Buffer;\n\n    // find maximum offset to detminine offset type\n    let offset = 1;\n    for (let i = 0; i < arr.length; i++) {\n      let item = arr[i];\n      offset += type.size(item, parent);\n    }\n\n    let offsetType;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n\n    return size;\n  }\n\n  encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) {\n      return;\n    }\n\n    let type = this.type || new r.Buffer;\n\n    // find maximum offset to detminine offset type\n    let sizes = [];\n    let offset = 1;\n    for (let item of arr) {\n      let s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n\n    let offsetType;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    // write offset size\n    stream.writeUInt8(offsetType.size());\n\n    // write elements\n    offset = 1;\n    offsetType.encode(stream, offset);\n\n    for (let size of sizes) {\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n\n    for (let item of arr) {\n      type.encode(stream, item, parent);\n    }\n\n    return;\n  }\n}\n","import * as r from 'restructure';\nimport { resolveLength } from 'restructure';\nimport CFFDict from './CFFDict';\nimport CFFIndex from './CFFIndex';\nimport CFFPointer from './CFFPointer';\nimport CFFPrivateDict from './CFFPrivateDict';\nimport StandardStrings from './CFFStandardStrings';\nimport { StandardEncoding, ExpertEncoding } from './CFFEncodings';\nimport { ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset } from './CFFCharsets';\nimport { ItemVariationStore } from '../tables/variations';\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\nclass PredefinedOp {\n  constructor(predefinedOps, type) {\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n\n  decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) {\n      return this.predefinedOps[operands[0]];\n    }\n\n    return this.type.decode(stream, parent, operands);\n  }\n\n  size(value, ctx) {\n    return this.type.size(value, ctx);\n  }\n\n  encode(stream, value, ctx) {\n    let index = this.predefinedOps.indexOf(value);\n    if (index !== -1) {\n      return index;\n    }\n\n    return this.type.encode(stream, value, ctx);\n  }\n}\n\nclass CFFEncodingVersion extends r.Number {\n  constructor() {\n    super('UInt8');\n  }\n\n  decode(stream) {\n    return r.uint8.decode(stream) & 0x7f;\n  }\n}\n\nlet Range1 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint8\n});\n\nlet Range2 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint16\n});\n\nlet CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {\n  0: {\n    nCodes: r.uint8,\n    codes: new r.Array(r.uint8, 'nCodes')\n  },\n\n  1: {\n    nRanges: r.uint8,\n    ranges: new r.Array(Range1, 'nRanges')\n  }\n\n  // TODO: supplement?\n});\n\nlet CFFEncoding = new PredefinedOp([ StandardEncoding, ExpertEncoding ], new CFFPointer(CFFCustomEncoding, { lazy: true }));\n\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\nclass RangeArray extends r.Array {\n  decode(stream, parent) {\n    let length = resolveLength(this.length, stream, parent);\n    let count = 0;\n    let res = [];\n    while (count < length) {\n      let range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n\n    return res;\n  }\n}\n\nlet CFFCustomCharset = new r.VersionedStruct(r.uint8, {\n  0: {\n    glyphs: new r.Array(r.uint16, t => t.parent.CharStrings.length - 1)\n  },\n\n  1: {\n    ranges: new RangeArray(Range1, t => t.parent.CharStrings.length - 1)\n  },\n\n  2: {\n    ranges: new RangeArray(Range2, t => t.parent.CharStrings.length - 1)\n  }\n});\n\nlet CFFCharset = new PredefinedOp([ ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset ], new CFFPointer(CFFCustomCharset, {lazy: true}));\n\nlet FDRange3 = new r.Struct({\n  first: r.uint16,\n  fd: r.uint8\n});\n\nlet FDRange4 = new r.Struct({\n  first: r.uint32,\n  fd: r.uint16\n});\n\nlet FDSelect = new r.VersionedStruct(r.uint8, {\n  0: {\n    fds: new r.Array(r.uint8, t => t.parent.CharStrings.length)\n  },\n\n  3: {\n    nRanges: r.uint16,\n    ranges: new r.Array(FDRange3, 'nRanges'),\n    sentinel: r.uint16\n  },\n\n  4: {\n    nRanges: r.uint32,\n    ranges: new r.Array(FDRange4, 'nRanges'),\n    sentinel: r.uint32\n  }\n});\n\nlet ptr = new CFFPointer(CFFPrivateDict);\nclass CFFPrivateOp {\n  decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return ptr.decode(stream, parent, [operands[1]]);\n  }\n\n  size(dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];\n  }\n\n  encode(stream, dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];\n  }\n}\n\nlet FontDict = new CFFDict([\n  // key       name                   type(s)                                 default\n  [18,        'Private',              new CFFPrivateOp,                       null],\n  [[12, 38],  'FontName',             'sid',                                  null],\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [[12, 5],   'PaintType',            'number',                               0],\n]);\n\nlet CFFTopDict = new CFFDict([\n  // key       name                   type(s)                                 default\n  [[12, 30],  'ROS',                  ['sid', 'sid', 'number'],               null],\n\n  [0,         'version',              'sid',                                  null],\n  [1,         'Notice',               'sid',                                  null],\n  [[12, 0],   'Copyright',            'sid',                                  null],\n  [2,         'FullName',             'sid',                                  null],\n  [3,         'FamilyName',           'sid',                                  null],\n  [4,         'Weight',               'sid',                                  null],\n  [[12, 1],   'isFixedPitch',         'boolean',                              false],\n  [[12, 2],   'ItalicAngle',          'number',                               0],\n  [[12, 3],   'UnderlinePosition',    'number',                               -100],\n  [[12, 4],   'UnderlineThickness',   'number',                               50],\n  [[12, 5],   'PaintType',            'number',                               0],\n  [[12, 6],   'CharstringType',       'number',                               2],\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [13,        'UniqueID',             'number',                               null],\n  [5,         'FontBBox',             'array',                                [0, 0, 0, 0]],\n  [[12, 8],   'StrokeWidth',          'number',                               0],\n  [14,        'XUID',                 'array',                                null],\n  [15,        'charset',              CFFCharset,                             ISOAdobeCharset],\n  [16,        'Encoding',             CFFEncoding,                            StandardEncoding],\n  [17,        'CharStrings',          new CFFPointer(new CFFIndex),           null],\n  [18,        'Private',              new CFFPrivateOp,                       null],\n  [[12, 20],  'SyntheticBase',        'number',                               null],\n  [[12, 21],  'PostScript',           'sid',                                  null],\n  [[12, 22],  'BaseFontName',         'sid',                                  null],\n  [[12, 23],  'BaseFontBlend',        'delta',                                null],\n\n  // CID font specific\n  [[12, 31],  'CIDFontVersion',       'number',                               0],\n  [[12, 32],  'CIDFontRevision',      'number',                               0],\n  [[12, 33],  'CIDFontType',          'number',                               0],\n  [[12, 34],  'CIDCount',             'number',                               8720],\n  [[12, 35],  'UIDBase',              'number',                               null],\n  [[12, 37],  'FDSelect',             new CFFPointer(FDSelect),               null],\n  [[12, 36],  'FDArray',              new CFFPointer(new CFFIndex(FontDict)), null],\n  [[12, 38],  'FontName',             'sid',                                  null]\n]);\n\nlet VariationStore = new r.Struct({\n  length: r.uint16,\n  itemVariationStore: ItemVariationStore\n})\n\nlet CFF2TopDict = new CFFDict([\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [17,        'CharStrings',          new CFFPointer(new CFFIndex),           null],\n  [[12, 37],  'FDSelect',             new CFFPointer(FDSelect),               null],\n  [[12, 36],  'FDArray',              new CFFPointer(new CFFIndex(FontDict)), null],\n  [24,        'vstore',               new CFFPointer(VariationStore),         null],\n  [25,        'maxstack',             'number',                               193]\n]);\n\nlet CFFTop = new r.VersionedStruct(r.fixed16, {\n  1: {\n    hdrSize:            r.uint8,\n    offSize:            r.uint8,\n    nameIndex:          new CFFIndex(new r.String('length')),\n    topDictIndex:       new CFFIndex(CFFTopDict),\n    stringIndex:        new CFFIndex(new r.String('length')),\n    globalSubrIndex:    new CFFIndex\n  },\n\n  2: {\n    hdrSize:            r.uint8,\n    length:             r.uint16,\n    topDict:            CFF2TopDict,\n    globalSubrIndex:    new CFFIndex\n  }\n});\n\nexport default CFFTop;\n","import isEqual from 'fast-deep-equal';\nimport * as r from 'restructure';\nimport CFFOperand from './CFFOperand';\nimport { PropertyDescriptor } from 'restructure';\n\nexport default class CFFDict {\n  constructor(ops = []) {\n    this.ops = ops;\n    this.fields = {};\n    for (let field of ops) {\n      let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n\n  decodeOperands(type, stream, ret, operands) {\n    if (Array.isArray(type)) {\n      return operands.map((op, i) => this.decodeOperands(type[i], stream, ret, [op]));\n    } else if (type.decode != null) {\n      return type.decode(stream, ret, operands);\n    } else {\n      switch (type) {\n        case 'number':\n        case 'offset':\n        case 'sid':\n          return operands[0];\n        case 'boolean':\n          return !!operands[0];\n        default:\n          return operands;\n      }\n    }\n  }\n\n  encodeOperands(type, stream, ctx, operands) {\n    if (Array.isArray(type)) {\n      return operands.map((op, i) => this.encodeOperands(type[i], stream, ctx, op)[0]);\n    } else if (type.encode != null) {\n      return type.encode(stream, operands, ctx);\n    } else if (typeof operands === 'number') {\n      return [operands];\n    } else if (typeof operands === 'boolean') {\n      return [+operands];\n    } else if (Array.isArray(operands)) {\n      return operands;\n    } else {\n      return [operands];\n    }\n  }\n\n  decode(stream, parent) {\n    let end = stream.pos + parent.length;\n    let ret = {};\n    let operands = [];\n\n    // define hidden properties\n    Object.defineProperties(ret, {\n      parent:         { value: parent },\n      _startOffset:   { value: stream.pos }\n    });\n\n    // fill in defaults\n    for (let key in this.fields) {\n      let field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n\n    while (stream.pos < end) {\n      let b = stream.readUInt8();\n      if (b < 28) {\n        if (b === 12) {\n          b = (b << 8) | stream.readUInt8();\n        }\n\n        let field = this.fields[b];\n        if (!field) {\n          throw new Error(`Unknown operator ${b}`);\n        }\n\n        let val = this.decodeOperands(field[2], stream, ret, operands);\n        if (val != null) {\n          if (val instanceof PropertyDescriptor) {\n            Object.defineProperty(ret, field[1], val);\n          } else {\n            ret[field[1]] = val;\n          }\n        }\n\n        operands = [];\n      } else {\n        operands.push(CFFOperand.decode(stream, b));\n      }\n    }\n\n    return ret;\n  }\n\n  size(dict, parent, includePointers = true) {\n    let ctx = {\n      parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n\n    let len = 0;\n\n    for (let k in this.fields) {\n      let field = this.fields[k];\n      let val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      let operands = this.encodeOperands(field[2], null, ctx, val);\n      for (let op of operands) {\n        len += CFFOperand.size(op);\n      }\n\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n\n    if (includePointers) {\n      len += ctx.pointerSize;\n    }\n\n    return len;\n  }\n\n  encode(stream, dict, parent) {\n    let ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent,\n      val: dict,\n      pointerSize: 0\n    };\n\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n\n    for (let field of this.ops) {\n      let val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      let operands = this.encodeOperands(field[2], stream, ctx, val);\n      for (let op of operands) {\n        CFFOperand.encode(stream, op);\n      }\n\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      for (let op of key) {\n        stream.writeUInt8(op);\n      }\n    }\n\n    let i = 0;\n    while (i < ctx.pointers.length) {\n      let ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n\n    return;\n  }\n}\n","const FLOAT_EOF = 0xf;\nconst FLOAT_LOOKUP = [\n  '0', '1', '2', '3', '4', '5', '6', '7',\n  '8', '9', '.', 'E', 'E-', null, '-'\n];\n\nconst FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\n\nexport default class CFFOperand {\n  static decode(stream, value) {\n    if (32 <= value && value <= 246) {\n      return value - 139;\n    }\n\n    if (247 <= value && value <= 250) {\n      return (value - 247) * 256 + stream.readUInt8() + 108;\n    }\n\n    if (251 <= value && value <= 254) {\n      return -(value - 251) * 256 - stream.readUInt8() - 108;\n    }\n\n    if (value === 28) {\n      return stream.readInt16BE();\n    }\n\n    if (value === 29) {\n      return stream.readInt32BE();\n    }\n\n    if (value === 30) {\n      let str = '';\n      while (true) {\n        let b = stream.readUInt8();\n\n        let n1 = b >> 4;\n        if (n1 === FLOAT_EOF) { break; }\n        str += FLOAT_LOOKUP[n1];\n\n        let n2 = b & 15;\n        if (n2 === FLOAT_EOF) { break; }\n        str += FLOAT_LOOKUP[n2];\n      }\n\n      return parseFloat(str);\n    }\n\n    return null;\n  }\n\n  static size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) {\n      value = 32768;\n    }\n\n    if ((value | 0) !== value) { // floating point\n      let str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n\n    } else if (-107 <= value && value <= 107) {\n      return 1;\n\n    } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {\n      return 2;\n\n    } else if (-32768 <= value && value <= 32767) {\n      return 3;\n\n    } else {\n      return 5;\n    }\n  }\n\n  static encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    let val = Number(value);\n\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n\n    } else if ((val | 0) !== val) { // floating point\n      stream.writeUInt8(30);\n\n      let str = '' + val;\n      for (let i = 0; i < str.length; i += 2) {\n        let c1 = str[i];\n        let n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;\n\n        if (i === str.length - 1) {\n          var n2 = FLOAT_EOF;\n        } else {\n          let c2 = str[i + 1];\n          var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n\n        stream.writeUInt8((n1 << 4) | (n2 & 15));\n      }\n\n      if (n2 !== FLOAT_EOF) {\n        return stream.writeUInt8((FLOAT_EOF << 4));\n      }\n\n    } else if (-107 <= val && val <= 107) {\n      return stream.writeUInt8(val + 139);\n\n    } else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  }\n}\n","import * as r from 'restructure';\n\nexport default class CFFPointer extends r.Pointer {\n  constructor(type, options = {}) {\n    if (options.type == null) {\n      options.type = 'global';\n    }\n\n    super(null, type, options);\n  }\n\n  decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: () => operands[0]\n    };\n\n    return super.decode(stream, parent, operands);\n  }\n\n  encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: () => 0\n      };\n\n      this.size(value, ctx);\n      return [new Ptr(0)];\n    }\n\n    let ptr = null;\n    this.offsetType = {\n      encode: (stream, val) => ptr = val\n    };\n\n    super.encode(stream, value, ctx);\n    return [new Ptr(ptr)];\n  }\n}\n\nclass Ptr {\n  constructor(val) {\n    this.val = val;\n    this.forceLarge = true;\n  }\n\n  valueOf() {\n    return this.val;\n  }\n}\n","import CFFDict from './CFFDict';\nimport CFFIndex from './CFFIndex';\nimport CFFPointer from './CFFPointer';\n\nclass CFFBlendOp {\n  static decode(stream, parent, operands) {\n    let numBlends = operands.pop();\n\n    // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n    while (operands.length > numBlends) {\n      operands.pop();\n    }\n  }\n}\n\nexport default new CFFDict([\n  // key       name                    type                                          default\n  [6,         'BlueValues',           'delta',                                       null],\n  [7,         'OtherBlues',           'delta',                                       null],\n  [8,         'FamilyBlues',          'delta',                                       null],\n  [9,         'FamilyOtherBlues',     'delta',                                       null],\n  [[12, 9],   'BlueScale',            'number',                                      0.039625],\n  [[12, 10],  'BlueShift',            'number',                                      7],\n  [[12, 11],  'BlueFuzz',             'number',                                      1],\n  [10,        'StdHW',                'number',                                      null],\n  [11,        'StdVW',                'number',                                      null],\n  [[12, 12],  'StemSnapH',            'delta',                                       null],\n  [[12, 13],  'StemSnapV',            'delta',                                       null],\n  [[12, 14],  'ForceBold',            'boolean',                                     false],\n  [[12, 17],  'LanguageGroup',        'number',                                      0],\n  [[12, 18],  'ExpansionFactor',      'number',                                      0.06],\n  [[12, 19],  'initialRandomSeed',    'number',                                      0],\n  [20,        'defaultWidthX',        'number',                                      0],\n  [21,        'nominalWidthX',        'number',                                      0],\n  [22,        'vsindex',              'number',                                      0],\n  [23,        'blend',                CFFBlendOp,                                    null],\n  [19,        'Subrs',                new CFFPointer(new CFFIndex, {type: 'local'}), null]\n]);\n","// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\nexport default [\n  \".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\",\n  \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\",\n  \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\",\n  \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\",\n  \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\",\n  \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n  \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\",\n  \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\",\n  \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\",\n  \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\",\n  \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\",\n  \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\",\n  \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\",\n  \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\",\n  \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\",\n  \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\",\n  \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\",\n  \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\",\n  \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\",\n  \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\",\n  \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\",\n  \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\",\n  \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\",\n  \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\",\n  \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\",\n  \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\",\n  \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\",\n  \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\",\n  \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\",\n  \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\",\n  \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\",\n  \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\",\n  \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\",\n  \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\",\n  \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\",\n  \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\",\n  \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\",\n  \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\",\n  \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\",\n  \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\",\n  \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\",\n  \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\",\n  \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\",\n  \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\",\n  \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\",\n  \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\",\n  \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\",\n  \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\",\n  \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\",\n  \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\",\n  \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\",\n  \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\",\n  \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\",\n  \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\",\n  \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\",\n  \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\",\n  \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\",\n  \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\",\n  \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\",\n  \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\",\n  \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\",\n  \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\",\n  \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\",\n  \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\",\n  \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\",\n  \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\",\n  \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"\n];\n","export let StandardEncoding = [\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n  'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n  'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n  'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n  'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n  'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n  'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n  'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n  'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n  'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n  'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n  'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n  '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n  'lslash', 'oslash', 'oe', 'germandbls'\n];\n\nexport let ExpertEncoding = [\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n  'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n  'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n  'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n  'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n  'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n  'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n  'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n  'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n  'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n  'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n  'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n  '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n  'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n  '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n  'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n  'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n  'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n  'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n  'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n  'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n  'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'\n];\n","export let ISOAdobeCharset = [\n  '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar',\n  'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright',\n  'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero',\n  'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\n  'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question',\n  'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n  'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\n  'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n  'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent',\n  'sterling', 'fraction', 'yen', 'florin', 'section', 'currency',\n  'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft',\n  'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl',\n  'periodcentered', 'paragraph', 'bullet', 'quotesinglbase',\n  'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis',\n  'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde',\n  'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla',\n  'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine',\n  'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash',\n  'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n  'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter',\n  'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior',\n  'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n  'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde',\n  'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute',\n  'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n  'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex',\n  'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute',\n  'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla',\n  'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex',\n  'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis',\n  'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis',\n  'ugrave', 'yacute', 'ydieresis', 'zcaron'\n];\n\nexport let ExpertCharset = [\n  '.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle',\n  'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior',\n  'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma',\n  'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle',\n  'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle',\n  'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle',\n  'colon', 'semicolon', 'commasuperior', 'threequartersemdash',\n  'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior',\n  'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n  'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior',\n  'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior',\n  'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall',\n  'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall',\n  'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall',\n  'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall',\n  'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary',\n  'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle',\n  'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n  'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall',\n  'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall',\n  'Cedillasmall', 'onequarter', 'onehalf', 'threequarters',\n  'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths',\n  'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior',\n  'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n  'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior',\n  'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior',\n  'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior',\n  'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall',\n  'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall',\n  'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall',\n  'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n  'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall',\n  'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall',\n  'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n  'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall',\n  'Ydieresissmall'\n];\n\nexport let ExpertSubsetCharset = [\n  '.notdef', 'space', 'dollaroldstyle', 'dollarsuperior',\n  'parenleftsuperior', 'parenrightsuperior', 'twodotenleader',\n  'onedotenleader', 'comma', 'hyphen', 'period', 'fraction',\n  'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n  'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle',\n  'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior',\n  'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior',\n  'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n  'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior',\n  'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior',\n  'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted',\n  'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter',\n  'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths',\n  'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior',\n  'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n  'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior',\n  'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior',\n  'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior',\n  'periodinferior', 'commainferior'\n];\n","import {Feature} from './opentype';\nimport * as r from 'restructure';\n\n/*******************\n * Variation Store *\n *******************/\n\nlet F2DOT14 = new r.Fixed(16, 'BE', 14);\nlet RegionAxisCoordinates = new r.Struct({\n  startCoord: F2DOT14,\n  peakCoord: F2DOT14,\n  endCoord: F2DOT14\n});\n\nlet VariationRegionList = new r.Struct({\n  axisCount: r.uint16,\n  regionCount: r.uint16,\n  variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\n\nlet DeltaSet = new r.Struct({\n  shortDeltas: new r.Array(r.int16, t => t.parent.shortDeltaCount),\n  regionDeltas: new r.Array(r.int8, t => t.parent.regionIndexCount - t.parent.shortDeltaCount),\n  deltas: t => t.shortDeltas.concat(t.regionDeltas)\n});\n\nlet ItemVariationData = new r.Struct({\n  itemCount: r.uint16,\n  shortDeltaCount: r.uint16,\n  regionIndexCount: r.uint16,\n  regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),\n  deltaSets: new r.Array(DeltaSet, 'itemCount')\n});\n\nexport let ItemVariationStore = new r.Struct({\n  format: r.uint16,\n  variationRegionList: new r.Pointer(r.uint32, VariationRegionList),\n  variationDataCount: r.uint16,\n  itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')\n});\n\n/**********************\n * Feature Variations *\n **********************/\n\nlet ConditionTable = new r.VersionedStruct(r.uint16, {\n  1: {\n    axisIndex: r.uint16,\n    axisIndex: r.uint16,\n    filterRangeMinValue: F2DOT14,\n    filterRangeMaxValue: F2DOT14\n  }\n});\n\nlet ConditionSet = new r.Struct({\n  conditionCount: r.uint16,\n  conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')\n});\n\nlet FeatureTableSubstitutionRecord = new r.Struct({\n  featureIndex: r.uint16,\n  alternateFeatureTable: new r.Pointer(r.uint32, Feature, {type: 'parent'})\n});\n\nlet FeatureTableSubstitution = new r.Struct({\n  version: r.fixed32,\n  substitutionCount: r.uint16,\n  substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')\n});\n\nlet FeatureVariationRecord = new r.Struct({\n  conditionSet: new r.Pointer(r.uint32, ConditionSet, {type: 'parent'}),\n  featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, {type: 'parent'})\n});\n\nexport let FeatureVariations = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  featureVariationRecordCount: r.uint32,\n  featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')\n});\n","import * as r from 'restructure';\n\n//########################\n// Scripts and Languages #\n//########################\n\nlet LangSysTable = new r.Struct({\n  reserved:         new r.Reserved(r.uint16),\n  reqFeatureIndex:  r.uint16,\n  featureCount:     r.uint16,\n  featureIndexes:   new r.Array(r.uint16, 'featureCount')\n});\n\nlet LangSysRecord = new r.Struct({\n  tag:      new r.String(4),\n  langSys:  new r.Pointer(r.uint16, LangSysTable, { type: 'parent' })\n});\n\nlet Script = new r.Struct({\n  defaultLangSys: new r.Pointer(r.uint16, LangSysTable),\n  count:          r.uint16,\n  langSysRecords: new r.Array(LangSysRecord, 'count')\n});\n\nlet ScriptRecord = new r.Struct({\n  tag:    new r.String(4),\n  script: new r.Pointer(r.uint16, Script, { type: 'parent' })\n});\n\nexport let ScriptList = new r.Array(ScriptRecord, r.uint16);\n\n//#######################\n// Features and Lookups #\n//#######################\n\nlet FeatureParams = new r.Struct({\n  version:    r.uint16, // should be set to 0 according OT spec\n  nameID:     r.uint16, //OT spec: UI Name ID or uiLabelNameId\n});\n\nexport let Feature = new r.Struct({\n  featureParams:      new r.Pointer(r.uint16, FeatureParams),\n  lookupCount:        r.uint16,\n  lookupListIndexes:  new r.Array(r.uint16, 'lookupCount')\n});\n\nlet FeatureRecord = new r.Struct({\n  tag:      new r.String(4),\n  feature:  new r.Pointer(r.uint16, Feature, { type: 'parent' })\n});\n\nexport let FeatureList = new r.Array(FeatureRecord, r.uint16);\n\nlet LookupFlags = new r.Struct({\n  markAttachmentType: r.uint8,\n  flags: new r.Bitfield(r.uint8, [\n    'rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures',\n    'ignoreMarks', 'useMarkFilteringSet'\n  ])\n});\n\nexport function LookupList(SubTable) {\n  let Lookup = new r.Struct({\n    lookupType:         r.uint16,\n    flags:              LookupFlags,\n    subTableCount:      r.uint16,\n    subTables:          new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),\n    markFilteringSet:   new r.Optional(r.uint16, t => t.flags.flags.useMarkFilteringSet)\n  });\n\n  return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);\n}\n\n//#################\n// Coverage Table #\n//#################\n\nlet RangeRecord = new r.Struct({\n  start:              r.uint16,\n  end:                r.uint16,\n  startCoverageIndex: r.uint16\n});\n\nexport let Coverage = new r.VersionedStruct(r.uint16, {\n  1: {\n    glyphCount:   r.uint16,\n    glyphs:       new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount:   r.uint16,\n    rangeRecords: new r.Array(RangeRecord, 'rangeCount')\n  }\n});\n\n//#########################\n// Class Definition Table #\n//#########################\n\nlet ClassRangeRecord = new r.Struct({\n  start:  r.uint16,\n  end:    r.uint16,\n  class:  r.uint16\n});\n\nexport let ClassDef = new r.VersionedStruct(r.uint16, {\n  1: { // Class array\n    startGlyph:       r.uint16,\n    glyphCount:       r.uint16,\n    classValueArray:  new r.Array(r.uint16, 'glyphCount')\n  },\n  2: { // Class ranges\n    classRangeCount:  r.uint16,\n    classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')\n  }\n});\n\n//###############\n// Device Table #\n//###############\n\nexport let Device = new r.Struct({\n  a: r.uint16, // startSize for hinting Device, outerIndex for VariationIndex\n  b: r.uint16, // endSize for Device, innerIndex for VariationIndex\n  deltaFormat: r.uint16\n});\n\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\n\nlet LookupRecord = new r.Struct({\n  sequenceIndex:      r.uint16,\n  lookupListIndex:    r.uint16\n});\n\nlet Rule = new r.Struct({\n  glyphCount:     r.uint16,\n  lookupCount:    r.uint16,\n  input:          new r.Array(r.uint16, t => t.glyphCount - 1),\n  lookupRecords:  new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);\n\nlet ClassRule = new r.Struct({\n  glyphCount:     r.uint16,\n  lookupCount:    r.uint16,\n  classes:        new r.Array(r.uint16, t => t.glyphCount - 1),\n  lookupRecords:  new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);\n\nexport let Context = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context\n    coverage:      new r.Pointer(r.uint16, Coverage),\n    ruleSetCount:  r.uint16,\n    ruleSets:      new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')\n  },\n  2: { // Class-based context\n    coverage:      new r.Pointer(r.uint16, Coverage),\n    classDef:      new r.Pointer(r.uint16, ClassDef),\n    classSetCnt:   r.uint16,\n    classSet:      new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount:    r.uint16,\n    lookupCount:   r.uint16,\n    coverages:     new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\n\nlet ChainRule = new r.Struct({\n  backtrackGlyphCount:  r.uint16,\n  backtrack:            new r.Array(r.uint16, 'backtrackGlyphCount'),\n  inputGlyphCount:      r.uint16,\n  input:                new r.Array(r.uint16, t => t.inputGlyphCount - 1),\n  lookaheadGlyphCount:  r.uint16,\n  lookahead:            new r.Array(r.uint16, 'lookaheadGlyphCount'),\n  lookupCount:          r.uint16,\n  lookupRecords:        new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);\n\nexport let ChainingContext = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context glyph substitution\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    chainCount:         r.uint16,\n    chainRuleSets:      new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  2: { // Class-based chaining context\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    backtrackClassDef:  new r.Pointer(r.uint16, ClassDef),\n    inputClassDef:      new r.Pointer(r.uint16, ClassDef),\n    lookaheadClassDef:  new r.Pointer(r.uint16, ClassDef),\n    chainCount:         r.uint16,\n    chainClassSet:      new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  3: { // Coverage-based chaining context\n    backtrackGlyphCount:    r.uint16,\n    backtrackCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    inputGlyphCount:        r.uint16,\n    inputCoverage:          new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),\n    lookaheadGlyphCount:    r.uint16,\n    lookaheadCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    lookupCount:            r.uint16,\n    lookupRecords:          new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n","import * as r from 'restructure';\n\nlet VerticalOrigin = new r.Struct({\n  glyphIndex:   r.uint16,\n  vertOriginY:  r.int16\n});\n\nexport default new r.Struct({\n  majorVersion:           r.uint16,\n  minorVersion:           r.uint16,\n  defaultVertOriginY:     r.int16,\n  numVertOriginYMetrics:  r.uint16,\n  metrics:                new r.Array(VerticalOrigin, 'numVertOriginYMetrics')\n});\n","import * as r from 'restructure';\nimport {BigMetrics} from './EBDT';\n\nlet SBitLineMetrics = new r.Struct({\n  ascender: r.int8,\n  descender: r.int8,\n  widthMax: r.uint8,\n  caretSlopeNumerator: r.int8,\n  caretSlopeDenominator: r.int8,\n  caretOffset: r.int8,\n  minOriginSB: r.int8,\n  minAdvanceSB: r.int8,\n  maxBeforeBL: r.int8,\n  minAfterBL: r.int8,\n  pad: new r.Reserved(r.int8, 2)\n});\n\nlet CodeOffsetPair = new r.Struct({\n  glyphCode: r.uint16,\n  offset: r.uint16\n});\n\nlet IndexSubtable = new r.VersionedStruct(r.uint16, {\n  header: {\n    imageFormat: r.uint16,\n    imageDataOffset: r.uint32\n  },\n\n  1: {\n    offsetArray: new r.Array(r.uint32, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n\n  2: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics\n  },\n\n  3: {\n    offsetArray: new r.Array(r.uint16, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n\n  4: {\n    numGlyphs: r.uint32,\n    glyphArray: new r.Array(CodeOffsetPair, t => t.numGlyphs + 1)\n  },\n\n  5: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics,\n    numGlyphs: r.uint32,\n    glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')\n  }\n});\n\nlet IndexSubtableArray = new r.Struct({\n  firstGlyphIndex: r.uint16,\n  lastGlyphIndex: r.uint16,\n  subtable: new r.Pointer(r.uint32, IndexSubtable)\n});\n\nlet BitmapSizeTable = new r.Struct({\n  indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), { type: 'parent' }),\n  indexTablesSize: r.uint32,\n  numberOfIndexSubTables: r.uint32,\n  colorRef: r.uint32,\n  hori: SBitLineMetrics,\n  vert: SBitLineMetrics,\n  startGlyphIndex: r.uint16,\n  endGlyphIndex: r.uint16,\n  ppemX: r.uint8,\n  ppemY: r.uint8,\n  bitDepth: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])\n});\n\nexport default new r.Struct({\n  version:  r.uint32, // 0x00020000\n  numSizes: r.uint32,\n  sizes:    new r.Array(BitmapSizeTable, 'numSizes')\n});\n","import * as r from 'restructure';\n\nexport let BigMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  horiBearingX: r.int8,\n  horiBearingY: r.int8,\n  horiAdvance: r.uint8,\n  vertBearingX: r.int8,\n  vertBearingY: r.int8,\n  vertAdvance: r.uint8\n});\n\nexport let SmallMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  bearingX: r.int8,\n  bearingY: r.int8,\n  advance: r.uint8\n});\n\nlet EBDTComponent = new r.Struct({\n  glyph: r.uint16,\n  xOffset: r.int8,\n  yOffset: r.int8\n});\n\nclass ByteAligned {}\n\nclass BitAligned {}\n\nexport let glyph = new r.VersionedStruct('version', {\n  1: {\n    metrics: SmallMetrics,\n    data: ByteAligned\n  },\n\n  2: {\n    metrics: SmallMetrics,\n    data: BitAligned\n  },\n\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n\n  5: {\n    data: BitAligned\n  },\n\n  6: {\n    metrics: BigMetrics,\n    data: ByteAligned\n  },\n\n  7: {\n    metrics: BigMetrics,\n    data: BitAligned\n  },\n\n  8: {\n    metrics: SmallMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  9: {\n    metrics: BigMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  17: {\n    metrics: SmallMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  18: {\n    metrics: BigMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  19: {\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  }\n});\n\n","import * as r from 'restructure';\n\nlet ImageTable = new r.Struct({\n  ppem: r.uint16,\n  resolution: r.uint16,\n  imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), t => t.parent.parent.maxp.numGlyphs + 1)\n});\n\n// This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\nexport default new r.Struct({\n  version: r.uint16,\n  flags: new r.Bitfield(r.uint16, ['renderOutlines']),\n  numImgTables: r.uint32,\n  imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')\n});\n","import * as r from 'restructure';\n\nlet LayerRecord = new r.Struct({\n  gid: r.uint16,          // Glyph ID of layer glyph (must be in z-order from bottom to top).\n  paletteIndex: r.uint16  // Index value to use in the appropriate palette. This value must\n});                       // be less than numPaletteEntries in the CPAL table, except for\n                          // the special case noted below. Each palette entry is 16 bits.\n                          // A palette index of 0xFFFF is a special case indicating that\n                          // the text foreground color should be used.\n\nlet BaseGlyphRecord = new r.Struct({\n  gid: r.uint16,             // Glyph ID of reference glyph. This glyph is for reference only\n                             // and is not rendered for color.\n  firstLayerIndex: r.uint16, // Index (from beginning of the Layer Records) to the layer record.\n                             // There will be numLayers consecutive entries for this base glyph.\n  numLayers: r.uint16\n});\n\nexport default new r.Struct({\n  version: r.uint16,\n  numBaseGlyphRecords: r.uint16,\n  baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), { lazy: true }),\n  numLayerRecords: r.uint16\n});\n","import * as r from 'restructure';\n\nlet ColorRecord = new r.Struct({\n  blue: r.uint8,\n  green: r.uint8,\n  red: r.uint8,\n  alpha: r.uint8\n});\n\nexport default new r.VersionedStruct(r.uint16, {\n  header: {\n    numPaletteEntries: r.uint16,\n    numPalettes: r.uint16,\n    numColorRecords: r.uint16,\n    colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new r.Array(r.uint16, 'numPalettes'),\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))\n  }\n});\n","import * as r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device} from './opentype';\nimport {ItemVariationStore} from './variations';\n\nlet BaseCoord = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate:   r.int16 // X or Y value, in design units\n  },\n\n  2: { // Design units plus contour point\n    coordinate:     r.int16,   // X or Y value, in design units\n    referenceGlyph: r.uint16,  // GlyphID of control glyph\n    baseCoordPoint: r.uint16   // Index of contour point on the referenceGlyph\n  },\n\n  3: { // Design units plus Device table\n    coordinate:   r.int16,                         // X or Y value, in design units\n    deviceTable:  new r.Pointer(r.uint16, Device)  // Device table for X or Y value\n  }\n});\n\nlet BaseValues = new r.Struct({\n  defaultIndex:   r.uint16,  // Index of default baseline for this script-same index in the BaseTagList\n  baseCoordCount: r.uint16,\n  baseCoords:     new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')\n});\n\nlet FeatMinMaxRecord = new r.Struct({\n  tag:        new r.String(4),  // 4-byte feature identification tag-must match FeatureTag in FeatureList\n  minCoord:   new r.Pointer(r.uint16, BaseCoord, {type: 'parent'}), // May be NULL\n  maxCoord:   new r.Pointer(r.uint16, BaseCoord, {type: 'parent'})  // May be NULL\n});\n\nlet MinMax = new r.Struct({\n  minCoord:           new r.Pointer(r.uint16, BaseCoord),  // May be NULL\n  maxCoord:           new r.Pointer(r.uint16, BaseCoord),  // May be NULL\n  featMinMaxCount:    r.uint16,                            // May be 0\n  featMinMaxRecords:  new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n});\n\nlet BaseLangSysRecord = new r.Struct({\n  tag:    new r.String(4),  // 4-byte language system identification tag\n  minMax: new r.Pointer(r.uint16, MinMax, {type: 'parent'})\n});\n\nlet BaseScript = new r.Struct({\n  baseValues:         new r.Pointer(r.uint16, BaseValues), // May be NULL\n  defaultMinMax:      new r.Pointer(r.uint16, MinMax),     // May be NULL\n  baseLangSysCount:   r.uint16,                            // May be 0\n  baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n});\n\nlet BaseScriptRecord = new r.Struct({\n  tag:      new r.String(4),  // 4-byte script identification tag\n  script:   new r.Pointer(r.uint16, BaseScript, {type: 'parent'})\n});\n\nlet BaseScriptList = new r.Array(BaseScriptRecord, r.uint16);\n\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nlet BaseTagList = new r.Array(new r.String(4), r.uint16);\n\nlet Axis = new r.Struct({\n  baseTagList:    new r.Pointer(r.uint16, BaseTagList),  // May be NULL\n  baseScriptList: new r.Pointer(r.uint16, BaseScriptList)\n});\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    horizAxis:    new r.Pointer(r.uint16, Axis),   // May be NULL\n    vertAxis:     new r.Pointer(r.uint16, Axis)    // May be NULL\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n","import * as r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device} from './opentype';\nimport {ItemVariationStore} from './variations';\n\nlet AttachPoint = new r.Array(r.uint16, r.uint16);\nlet AttachList = new r.Struct({\n  coverage:       new r.Pointer(r.uint16, Coverage),\n  glyphCount:     r.uint16,\n  attachPoints:   new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')\n});\n\nlet CaretValue = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate: r.int16\n  },\n\n  2: { // Contour point\n    caretValuePoint: r.uint16\n  },\n\n  3: { // Design units plus Device table\n    coordinate:     r.int16,\n    deviceTable:    new r.Pointer(r.uint16, Device)\n  }\n});\n\nlet LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);\n\nlet LigCaretList = new r.Struct({\n  coverage:       new r.Pointer(r.uint16, Coverage),\n  ligGlyphCount:  r.uint16,\n  ligGlyphs:      new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')\n});\n\nlet MarkGlyphSetsDef = new r.Struct({\n  markSetTableFormat: r.uint16,\n  markSetCount:       r.uint16,\n  coverage:           new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')\n});\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    glyphClassDef:      new r.Pointer(r.uint16, ClassDef),\n    attachList:         new r.Pointer(r.uint16, AttachList),\n    ligCaretList:       new r.Pointer(r.uint16, LigCaretList),\n    markAttachClassDef: new r.Pointer(r.uint16, ClassDef)\n  },\n\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef:   new r.Pointer(r.uint16, MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef:   new r.Pointer(r.uint16, MarkGlyphSetsDef),\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n","import * as r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device, Context, ChainingContext} from './opentype';\nimport {FeatureVariations} from './variations';\n\nlet ValueFormat = new r.Bitfield(r.uint16, [\n  'xPlacement', 'yPlacement',\n  'xAdvance', 'yAdvance',\n  'xPlaDevice', 'yPlaDevice',\n  'xAdvDevice', 'yAdvDevice'\n]);\n\nlet types = {\n  xPlacement: r.int16,\n  yPlacement: r.int16,\n  xAdvance:   r.int16,\n  yAdvance:   r.int16,\n  xPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  yPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  xAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  yAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel })\n};\n\nclass ValueRecord {\n  constructor(key = 'valueFormat') {\n    this.key = key;\n  }\n\n  buildStruct(parent) {\n    let struct = parent;\n    while (!struct[this.key] && struct.parent) {\n      struct = struct.parent;\n    }\n\n    if (!struct[this.key]) return;\n\n    let fields = {};\n    fields.rel = () => struct._startOffset;\n\n    let format = struct[this.key];\n    for (let key in format) {\n      if (format[key]) {\n        fields[key] = types[key];\n      }\n    }\n\n    return new r.Struct(fields);\n  }\n\n  size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  }\n\n  decode(stream, parent) {\n    let res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  }\n}\n\nlet PairValueRecord = new r.Struct({\n  secondGlyph:    r.uint16,\n  value1:         new ValueRecord('valueFormat1'),\n  value2:         new ValueRecord('valueFormat2')\n});\n\nlet PairSet = new r.Array(PairValueRecord, r.uint16);\n\nlet Class2Record = new r.Struct({\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\n\nlet Anchor = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16\n  },\n\n  2: { // Design units plus contour point\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16,\n    anchorPoint:    r.uint16\n  },\n\n  3: { // Design units plus Device tables\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16,\n    xDeviceTable:   new r.Pointer(r.uint16, Device),\n    yDeviceTable:   new r.Pointer(r.uint16, Device)\n  }\n});\n\nlet EntryExitRecord = new r.Struct({\n  entryAnchor:    new r.Pointer(r.uint16, Anchor, {type: 'parent'}),\n  exitAnchor:     new r.Pointer(r.uint16, Anchor, {type: 'parent'})\n});\n\nlet MarkRecord = new r.Struct({\n  class:      r.uint16,\n  markAnchor: new r.Pointer(r.uint16, Anchor, {type: 'parent'})\n});\n\nlet MarkArray = new r.Array(MarkRecord, r.uint16);\n\nlet BaseRecord  = new r.Array(new r.Pointer(r.uint16, Anchor), t => t.parent.classCount);\nlet BaseArray   = new r.Array(BaseRecord, r.uint16);\n\nlet ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), t => t.parent.parent.classCount);\nlet LigatureAttach  = new r.Array(ComponentRecord, r.uint16);\nlet LigatureArray   = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);\n\nlet GPOSLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, { // Single Adjustment\n    1: { // Single positioning value\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat:    ValueFormat,\n      value:          new ValueRecord()\n    },\n    2: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat:    ValueFormat,\n      valueCount:     r.uint16,\n      values:         new r.LazyArray(new ValueRecord(), 'valueCount')\n    }\n  }),\n\n  2: new r.VersionedStruct(r.uint16, { // Pair Adjustment Positioning\n    1: { // Adjustments for glyph pairs\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat1:   ValueFormat,\n      valueFormat2:   ValueFormat,\n      pairSetCount:   r.uint16,\n      pairSets:       new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')\n    },\n\n    2: { // Class pair adjustment\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat1:   ValueFormat,\n      valueFormat2:   ValueFormat,\n      classDef1:      new r.Pointer(r.uint16, ClassDef),\n      classDef2:      new r.Pointer(r.uint16, ClassDef),\n      class1Count:    r.uint16,\n      class2Count:    r.uint16,\n      classRecords:   new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n\n  3: { // Cursive Attachment Positioning\n    format:             r.uint16,\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    entryExitCount:     r.uint16,\n    entryExitRecords:   new r.Array(EntryExitRecord, 'entryExitCount')\n  },\n\n  4: { // MarkToBase Attachment Positioning\n    format:             r.uint16,\n    markCoverage:       new r.Pointer(r.uint16, Coverage),\n    baseCoverage:       new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    markArray:          new r.Pointer(r.uint16, MarkArray),\n    baseArray:          new r.Pointer(r.uint16, BaseArray)\n  },\n\n  5: { // MarkToLigature Attachment Positioning\n    format:             r.uint16,\n    markCoverage:       new r.Pointer(r.uint16, Coverage),\n    ligatureCoverage:   new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    markArray:          new r.Pointer(r.uint16, MarkArray),\n    ligatureArray:      new r.Pointer(r.uint16, LigatureArray)\n  },\n\n  6: { // MarkToMark Attachment Positioning\n    format:             r.uint16,\n    mark1Coverage:      new r.Pointer(r.uint16, Coverage),\n    mark2Coverage:      new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    mark1Array:         new r.Pointer(r.uint16, MarkArray),\n    mark2Array:         new r.Pointer(r.uint16, BaseArray)\n  },\n\n  7: Context,          // Contextual positioning\n  8: ChainingContext,  // Chaining contextual positioning\n\n  9: { // Extension Positioning\n    posFormat:   r.uint16,\n    lookupType:  r.uint16,   // cannot also be 9\n    extension:   new r.Pointer(r.uint32, null)\n  }\n});\n\n// Fix circular reference\nGPOSLookup.versions[9].extension.type = GPOSLookup;\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList:     new r.Pointer(r.uint16, ScriptList),\n    featureList:    new r.Pointer(r.uint16, FeatureList),\n    lookupList:     new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n\n// export GPOSLookup for JSTF table\nexport { GPOSLookup };\n","import * as r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device, Context, ChainingContext} from './opentype';\nimport {FeatureVariations} from './variations';\n\nlet Sequence = new r.Array(r.uint16, r.uint16);\nlet AlternateSet = Sequence;\n\nlet Ligature = new r.Struct({\n  glyph:      r.uint16,\n  compCount:  r.uint16,\n  components: new r.Array(r.uint16, t => t.compCount - 1)\n});\n\nlet LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);\n\nlet GSUBLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, {// Single Substitution\n    1: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      deltaGlyphID:   r.int16\n    },\n    2: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      glyphCount:     r.uint16,\n      substitute:     new r.LazyArray(r.uint16, 'glyphCount')\n    }\n  }),\n\n  2: { // Multiple Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    sequences:      new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')\n  },\n\n  3: { // Alternate Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    alternateSet:   new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')\n  },\n\n  4: { // Ligature Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    ligatureSets:   new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')\n  },\n\n  5: Context,         // Contextual Substitution\n  6: ChainingContext, // Chaining Contextual Substitution\n\n  7: { // Extension Substitution\n    substFormat:   r.uint16,\n    lookupType:    r.uint16,   // cannot also be 7\n    extension:     new r.Pointer(r.uint32, null)\n  },\n\n  8: { // Reverse Chaining Contextual Single Substitution\n    substFormat:            r.uint16,\n    coverage:               new r.Pointer(r.uint16, Coverage),\n    backtrackCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    lookaheadGlyphCount:    r.uint16,\n    lookaheadCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    glyphCount:             r.uint16,\n    substitutes:            new r.Array(r.uint16, 'glyphCount')\n  }\n});\n\n// Fix circular reference\nGSUBLookup.versions[7].extension.type = GSUBLookup;\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList:     new r.Pointer(r.uint16, ScriptList),\n    featureList:    new r.Pointer(r.uint16, FeatureList),\n    lookupList:     new r.Pointer(r.uint16, new LookupList(GSUBLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n","import * as r from 'restructure';\nimport { ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device } from './opentype';\nimport { GPOSLookup } from './GPOS';\n\nlet JstfGSUBModList = new r.Array(r.uint16, r.uint16);\n\nlet JstfPriority = new r.Struct({\n  shrinkageEnableGSUB:    new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGSUB:   new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageEnableGPOS:    new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGPOS:   new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageJstfMax:       new r.Pointer(r.uint16, new LookupList(GPOSLookup)),\n  extensionEnableGSUB:    new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGSUB:   new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionEnableGPOS:    new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGPOS:   new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionJstfMax:       new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n});\n\nlet JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);\n\nlet JstfLangSysRecord = new r.Struct({\n  tag:         new r.String(4),\n  jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)\n});\n\nlet JstfScript = new r.Struct({\n  extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)), // array of glyphs to extend line length\n  defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),\n  langSysCount:   r.uint16,\n  langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')\n});\n\nlet JstfScriptRecord = new r.Struct({\n  tag:    new r.String(4),\n  script: new r.Pointer(r.uint16, JstfScript, {type: 'parent'})\n});\n\nexport default new r.Struct({\n  version:     r.uint32,  // should be 0x00010000\n  scriptCount: r.uint16,\n  scriptList:  new r.Array(JstfScriptRecord, 'scriptCount')\n});\n","import * as r from 'restructure';\nimport { resolveLength } from 'restructure';\nimport { ItemVariationStore } from './variations';\n\n// TODO: add this to restructure\nclass VariableSizeNumber {\n  constructor(size) {\n    this._size = size;\n  }\n\n  decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1: return stream.readUInt8();\n      case 2: return stream.readUInt16BE();\n      case 3: return stream.readUInt24BE();\n      case 4: return stream.readUInt32BE();\n    }\n  }\n\n  size(val, parent) {\n    return resolveLength(this._size, null, parent);\n  }\n}\n\nlet MapDataEntry = new r.Struct({\n  entry: new VariableSizeNumber(t => ((t.parent.entryFormat & 0x0030) >> 4) + 1),\n  outerIndex: t => t.entry >> ((t.parent.entryFormat & 0x000F) + 1),\n  innerIndex: t => t.entry & ((1 << ((t.parent.entryFormat & 0x000F) + 1)) - 1)\n});\n\nlet DeltaSetIndexMap = new r.Struct({\n  entryFormat: r.uint16,\n  mapCount: r.uint16,\n  mapData: new r.Array(MapDataEntry, 'mapCount')\n});\n\nexport default new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),\n  advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)\n});\n","import * as r from 'restructure';\n\nlet Signature = new r.Struct({\n  format: r.uint32,\n  length: r.uint32,\n  offset: r.uint32\n});\n\nlet SignatureBlock = new r.Struct({\n  reserved:       new r.Reserved(r.uint16, 2),\n  cbSignature:    r.uint32,  // Length (in bytes) of the PKCS#7 packet in pbSignature\n  signature:      new r.Buffer('cbSignature')\n});\n\nexport default new r.Struct({\n  ulVersion:       r.uint32,  // Version number of the DSIG table (0x00000001)\n  usNumSigs:       r.uint16,  // Number of signatures in the table\n  usFlag:          r.uint16,  // Permission flags\n  signatures:      new r.Array(Signature, 'usNumSigs'),\n  signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')\n});\n","import * as r from 'restructure';\n\nlet GaspRange = new r.Struct({\n  rangeMaxPPEM:       r.uint16,                  // Upper limit of range, in ppem\n  rangeGaspBehavior:  new r.Bitfield(r.uint16, [ // Flags describing desired rasterizer behavior\n    'grayscale', 'gridfit',\n    'symmetricSmoothing', 'symmetricGridfit'     // only in version 1, for ClearType\n  ])\n});\n\nexport default new r.Struct({\n  version:    r.uint16,  // set to 0\n  numRanges:  r.uint16,\n  gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem\n});\n","import * as r from 'restructure';\n\nlet DeviceRecord = new r.Struct({\n  pixelSize:      r.uint8,\n  maximumWidth:   r.uint8,\n  widths:         new r.Array(r.uint8, t => t.parent.parent.maxp.numGlyphs)\n});\n\n// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\nexport default new r.Struct({\n  version:            r.uint16,\n  numRecords:         r.int16,\n  sizeDeviceRecord:   r.int32,\n  records:            new r.Array(DeviceRecord, 'numRecords')\n});\n","import * as r from 'restructure';\n\nlet KernPair = new r.Struct({\n  left:   r.uint16,\n  right:  r.uint16,\n  value:  r.int16\n});\n\nlet ClassTable = new r.Struct({\n  firstGlyph: r.uint16,\n  nGlyphs: r.uint16,\n  offsets: new r.Array(r.uint16, 'nGlyphs'),\n  max: t => t.offsets.length && Math.max.apply(Math, t.offsets)\n});\n\nlet Kern2Array = new r.Struct({\n  off: t => t._startOffset - t.parent.parent._startOffset,\n  len: t => (((t.parent.leftTable.max - t.off) / t.parent.rowWidth) + 1) * (t.parent.rowWidth / 2),\n  values: new r.LazyArray(r.int16, 'len')\n});\n\nlet KernSubtable = new r.VersionedStruct('format', {\n  0: {\n    nPairs:         r.uint16,\n    searchRange:    r.uint16,\n    entrySelector:  r.uint16,\n    rangeShift:     r.uint16,\n    pairs:          new r.Array(KernPair, 'nPairs')\n  },\n\n  2: {\n    rowWidth:   r.uint16,\n    leftTable:  new r.Pointer(r.uint16, ClassTable, {type: 'parent'}),\n    rightTable: new r.Pointer(r.uint16, ClassTable, {type: 'parent'}),\n    array:      new r.Pointer(r.uint16, Kern2Array, {type: 'parent'})\n  },\n\n  3: {\n    glyphCount:       r.uint16,\n    kernValueCount:   r.uint8,\n    leftClassCount:   r.uint8,\n    rightClassCount:  r.uint8,\n    flags:            r.uint8,\n    kernValue:        new r.Array(r.int16, 'kernValueCount'),\n    leftClass:        new r.Array(r.uint8, 'glyphCount'),\n    rightClass:       new r.Array(r.uint8, 'glyphCount'),\n    kernIndex:        new r.Array(r.uint8, t => t.leftClassCount * t.rightClassCount)\n  }\n});\n\nlet KernTable = new r.VersionedStruct('version', {\n  0: { // Microsoft uses this format\n    subVersion: r.uint16,  // Microsoft has an extra sub-table version number\n    length:     r.uint16,  // Length of the subtable, in bytes\n    format:     r.uint8,   // Format of subtable\n    coverage:   new r.Bitfield(r.uint8, [\n      'horizontal',    // 1 if table has horizontal data, 0 if vertical\n      'minimum',       // If set to 1, the table has minimum values. If set to 0, the table has kerning values.\n      'crossStream',   // If set to 1, kerning is perpendicular to the flow of the text\n      'override'      // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable:   KernSubtable,\n    padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n  },\n  1: { // Apple uses this format\n    length:     r.uint32,\n    coverage:   new r.Bitfield(r.uint8, [\n      null, null, null, null, null,\n      'variation',     // Set if table has variation kerning values\n      'crossStream',   // Set if table has cross-stream kerning values\n      'vertical'      // Set if table has vertical kerning values\n    ]),\n    format:     r.uint8,\n    tupleIndex: r.uint16,\n    subtable:   KernSubtable,\n    padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n  }\n});\n\nexport default new r.VersionedStruct(r.uint16, {\n  0: { // Microsoft Version\n    nTables:    r.uint16,\n    tables:     new r.Array(KernTable, 'nTables')\n  },\n\n  1: { // Apple Version\n    reserved:   new r.Reserved(r.uint16), // the other half of the version number\n    nTables:    r.uint32,\n    tables:     new r.Array(KernTable, 'nTables')\n  }\n});\n","import * as r from 'restructure';\n\n// Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\nexport default new r.Struct({\n  version:    r.uint16,\n  numGlyphs:  r.uint16,\n  yPels:      new r.Array(r.uint8, 'numGlyphs')\n});\n","import * as r from 'restructure';\n\n// PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\nexport default new r.Struct({\n  version:              r.uint16,\n  fontNumber:           r.uint32,\n  pitch:                r.uint16,\n  xHeight:              r.uint16,\n  style:                r.uint16,\n  typeFamily:           r.uint16,\n  capHeight:            r.uint16,\n  symbolSet:            r.uint16,\n  typeface:             new r.String(16),\n  characterComplement:  new r.String(8),\n  fileName:             new r.String(6),\n  strokeWeight:         new r.String(1),\n  widthType:            new r.String(1),\n  serifStyle:           r.uint8,\n  reserved:             new r.Reserved(r.uint8)\n});\n","import * as r from 'restructure';\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\n\nlet Ratio = new r.Struct({\n  bCharSet:       r.uint8,                             // Character set\n  xRatio:         r.uint8,                             // Value to use for x-Ratio\n  yStartRatio:    r.uint8,                             // Starting y-Ratio value\n  yEndRatio:      r.uint8                              // Ending y-Ratio value\n});\n\nlet vTable = new r.Struct({\n  yPelHeight:     r.uint16,                            // yPelHeight to which values apply\n  yMax:           r.int16,                             // Maximum value (in pels) for this yPelHeight\n  yMin:           r.int16                              // Minimum value (in pels) for this yPelHeight\n});\n\nlet VdmxGroup = new r.Struct({\n  recs:           r.uint16,                            // Number of height records in this group\n  startsz:        r.uint8,                             // Starting yPelHeight\n  endsz:          r.uint8,                             // Ending yPelHeight\n  entries:        new r.Array(vTable, 'recs')          // The VDMX records\n});\n\nexport default new r.Struct({\n  version:        r.uint16,                            // Version number (0 or 1)\n  numRecs:        r.uint16,                            // Number of VDMX groups present\n  numRatios:      r.uint16,                            // Number of aspect ratio groupings\n  ratioRanges:    new r.Array(Ratio, 'numRatios'),     // Ratio ranges\n  offsets:        new r.Array(r.uint16, 'numRatios'),  // Offset to the VDMX group for this ratio range\n  groups:         new r.Array(VdmxGroup, 'numRecs')    // The actual VDMX groupings\n});\n","import * as r from 'restructure';\n\n// Vertical Header Table\nexport default new r.Struct({\n  version:                r.uint16,  // Version number of the Vertical Header Table\n  ascent:                 r.int16,   // The vertical typographic ascender for this font\n  descent:                r.int16,   // The vertical typographic descender for this font\n  lineGap:                r.int16,   // The vertical typographic line gap for this font\n  advanceHeightMax:       r.int16,   // The maximum advance height measurement found in the font\n  minTopSideBearing:      r.int16,   // The minimum top side bearing measurement found in the font\n  minBottomSideBearing:   r.int16,   // The minimum bottom side bearing measurement found in the font\n  yMaxExtent:             r.int16,\n  caretSlopeRise:         r.int16,   // Caret slope (rise/run)\n  caretSlopeRun:          r.int16,\n  caretOffset:            r.int16,   // Set value equal to 0 for nonslanted fonts\n  reserved:               new r.Reserved(r.int16, 4),\n  metricDataFormat:       r.int16,   // Set to 0\n  numberOfMetrics:        r.uint16   // Number of advance heights in the Vertical Metrics table\n});\n","import * as r from 'restructure';\n\nlet VmtxEntry = new r.Struct({\n  advance: r.uint16,  // The advance height of the glyph\n  bearing: r.int16    // The top sidebearing of the glyph\n});\n\n// Vertical Metrics Table\nexport default new r.Struct({\n  metrics:  new r.LazyArray(VmtxEntry, t => t.parent.vhea.numberOfMetrics),\n  bearings: new r.LazyArray(r.int16, t => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\n","import * as r from 'restructure';\n\nlet shortFrac = new r.Fixed(16, 'BE', 14);\n\nlet Correspondence = new r.Struct({\n  fromCoord: shortFrac,\n  toCoord: shortFrac\n});\n\nlet Segment = new r.Struct({\n  pairCount: r.uint16,\n  correspondence: new r.Array(Correspondence, 'pairCount')\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  axisCount: r.uint32,\n  segment: new r.Array(Segment, 'axisCount')\n});\n","import * as r from 'restructure';\nimport { LookupTable } from './aat';\n\nlet BslnSubtable = new r.VersionedStruct('format', {\n  0: { // Distance-based, no mapping\n    deltas: new r.Array(r.int16, 32)\n  },\n\n  1: { // Distance-based, with mapping\n    deltas: new r.Array(r.int16, 32),\n    mappingData: new LookupTable(r.uint16)\n  },\n\n  2: { // Control point-based, no mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32)\n  },\n\n  3: { // Control point-based, with mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32),\n    mappingData: new LookupTable(r.uint16)\n  }\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  defaultBaseline: r.uint16,\n  subtable: BslnSubtable\n});\n","import * as r from 'restructure';\n\nclass UnboundedArrayAccessor {\n  constructor(type, stream, parent) {\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n\n  getItem(index) {\n    if (this._items[index] == null) {\n      let pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n\n    return this._items[index];\n  }\n\n  inspect() {\n    return `[UnboundedArray ${this.type.constructor.name}]`;\n  }\n}\n\nexport class UnboundedArray extends r.Array {\n  constructor(type) {\n    super(type, 0);\n  }\n\n  decode(stream, parent) {\n    return new UnboundedArrayAccessor(this.type, stream, parent);\n  }\n}\n\nexport let LookupTable = function(ValueType = r.uint16) {\n  // Helper class that makes internal structures invisible to pointers\n  class Shadow {\n    constructor(type) {\n      this.type = type;\n    }\n\n    decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    }\n\n    size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    }\n\n    encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    }\n  }\n\n  ValueType = new Shadow(ValueType);\n\n  let BinarySearchHeader = new r.Struct({\n    unitSize: r.uint16,\n    nUnits: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16\n  });\n\n  let LookupSegmentSingle = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    value: ValueType\n  });\n\n  let LookupSegmentArray = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    values: new r.Pointer(r.uint16, new r.Array(ValueType, t => t.lastGlyph - t.firstGlyph + 1), {type: 'parent'})\n  });\n\n  let LookupSingle = new r.Struct({\n    glyph: r.uint16,\n    value: ValueType\n  });\n\n  return new r.VersionedStruct(r.uint16, {\n    0: {\n      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentSingle, t => t.binarySearchHeader.nUnits)\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentArray, t => t.binarySearchHeader.nUnits)\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSingle, t => t.binarySearchHeader.nUnits)\n    },\n    8: {\n      firstGlyph: r.uint16,\n      count: r.uint16,\n      values: new r.Array(ValueType, 'count')\n    }\n  });\n};\n\nexport function StateTable(entryData = {}, lookupType = r.uint16) {\n  let entry = Object.assign({\n    newState: r.uint16,\n    flags: r.uint16\n  }, entryData);\n\n  let Entry = new r.Struct(entry);\n  let StateArray = new UnboundedArray(new r.Array(r.uint16, t => t.nClasses));\n\n  let StateHeader = new r.Struct({\n    nClasses: r.uint32,\n    classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),\n    stateArray: new r.Pointer(r.uint32, StateArray),\n    entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))\n  });\n\n  return StateHeader;\n}\n\n// This is the old version of the StateTable structure\nexport function StateTable1(entryData = {}, lookupType = r.uint16) {\n  let ClassLookupTable = new r.Struct({\n    version() { return 8; }, // simulate LookupTable\n    firstGlyph: r.uint16,\n    values: new r.Array(r.uint8, r.uint16)\n  });\n\n  let entry = Object.assign({\n    newStateOffset: r.uint16,\n    // convert offset to stateArray index\n    newState: t => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n    flags: r.uint16\n  }, entryData);\n\n  let Entry = new r.Struct(entry);\n  let StateArray = new UnboundedArray(new r.Array(r.uint8, t => t.nClasses));\n\n  let StateHeader1 = new r.Struct({\n    nClasses: r.uint16,\n    classTable: new r.Pointer(r.uint16, ClassLookupTable),\n    stateArray: new r.Pointer(r.uint16, StateArray),\n    entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))\n  });\n\n  return StateHeader1;\n}\n","import * as r from 'restructure';\n\nlet Setting = new r.Struct({\n  setting: r.uint16,\n  nameIndex: r.int16,\n  name: t => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\n\nlet FeatureName = new r.Struct({\n  feature: r.uint16,\n  nSettings: r.uint16,\n  settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), { type: 'parent' }),\n  featureFlags: new r.Bitfield(r.uint8, [\n    null, null, null, null, null, null,\n    'hasDefault', 'exclusive'\n  ]),\n  defaultSetting: r.uint8,\n  nameIndex: r.int16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  featureNameCount: r.uint16,\n  reserved1: new r.Reserved(r.uint16),\n  reserved2: new r.Reserved(r.uint32),\n  featureNames: new r.Array(FeatureName, 'featureNameCount')\n});\n","import * as r from 'restructure';\n\nlet Axis = new r.Struct({\n  axisTag: new r.String(4),\n  minValue: r.fixed32,\n  defaultValue: r.fixed32,\n  maxValue: r.fixed32,\n  flags: r.uint16,\n  nameID: r.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID]\n});\n\nlet Instance = new r.Struct({\n  nameID: r.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID],\n  flags: r.uint16,\n  coord: new r.Array(r.fixed32, t => t.parent.axisCount),\n  postscriptNameID: new r.Optional(r.uint16, t => t.parent.instanceSize - t._currentOffset > 0)\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  offsetToData: r.uint16,\n  countSizePairs: r.uint16,\n  axisCount: r.uint16,\n  axisSize: r.uint16,\n  instanceCount: r.uint16,\n  instanceSize: r.uint16,\n  axis: new r.Array(Axis, 'axisCount'),\n  instance: new r.Array(Instance, 'instanceCount')\n});\n","import * as r from 'restructure';\n\nlet shortFrac = new r.Fixed(16, 'BE', 14);\nclass Offset {\n  static decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags\n      ? stream.readUInt32BE()\n      : stream.readUInt16BE() * 2;\n  }\n}\n\nlet gvar = new r.Struct({\n  version: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  axisCount: r.uint16,\n  globalCoordCount: r.uint16,\n  globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac, 'axisCount'), 'globalCoordCount')),\n  glyphCount: r.uint16,\n  flags: r.uint16,\n  offsetToData: r.uint32,\n  offsets: new r.Array(new r.Pointer(Offset, 'void', { relativeTo: ctx => ctx.offsetToData, allowNull: false }), t => t.glyphCount + 1)\n});\n\nexport default gvar;\n","import * as r from 'restructure';\nimport { LookupTable, StateTable1 } from './aat';\n\nlet ClassTable = new r.Struct({\n  length: r.uint16,\n  coverage: r.uint16,\n  subFeatureFlags: r.uint32,\n  stateTable: new StateTable1\n});\n\nlet WidthDeltaRecord = new r.Struct({\n  justClass: r.uint32,\n  beforeGrowLimit: r.fixed32,\n  beforeShrinkLimit: r.fixed32,\n  afterGrowLimit: r.fixed32,\n  afterShrinkLimit: r.fixed32,\n  growFlags: r.uint16,\n  shrinkFlags: r.uint16\n});\n\nlet WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);\n\nlet ActionData = new r.VersionedStruct('actionType', {\n  0: { // Decomposition action\n    lowerLimit: r.fixed32,\n    upperLimit: r.fixed32,\n    order: r.uint16,\n    glyphs: new r.Array(r.uint16, r.uint16)\n  },\n\n  1: { // Unconditional add glyph action\n    addGlyph: r.uint16\n  },\n\n  2: { // Conditional add glyph action\n    substThreshold: r.fixed32,\n    addGlyph: r.uint16,\n    substGlyph: r.uint16\n  },\n\n  3: {}, // Stretch glyph action (no data, not supported by CoreText)\n\n  4: { // Ductile glyph action (not supported by CoreText)\n    variationAxis: r.uint32,\n    minimumLimit: r.fixed32,\n    noStretchValue: r.fixed32,\n    maximumLimit: r.fixed32\n  },\n\n  5: { // Repeated add glyph action\n    flags: r.uint16,\n    glyph: r.uint16\n  }\n});\n\nlet Action = new r.Struct({\n  actionClass: r.uint16,\n  actionType: r.uint16,\n  actionLength: r.uint32,\n  actionData: ActionData,\n  padding: new r.Reserved(r.uint8, t => t.actionLength - t._currentOffset)\n});\n\nlet PostcompensationAction = new r.Array(Action, r.uint32);\nlet PostCompensationTable = new r.Struct({\n  lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))\n});\n\nlet JustificationTable = new r.Struct({\n  classTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),\n  wdcOffset: r.uint16,\n  postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, { type: 'parent' }),\n  widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, { type: 'parent', relativeTo: ctx => ctx.wdcOffset }))\n});\n\nexport default new r.Struct({\n  version: r.uint32,\n  format: r.uint16,\n  horizontal: new r.Pointer(r.uint16, JustificationTable),\n  vertical: new r.Pointer(r.uint16, JustificationTable)\n});\n","import * as r from 'restructure';\nimport { UnboundedArray, LookupTable, StateTable } from './aat';\n\nlet LigatureData = {\n  action: r.uint16\n};\n\nlet ContextualData = {\n  markIndex: r.uint16,\n  currentIndex: r.uint16\n};\n\nlet InsertionData = {\n  currentInsertIndex: r.uint16,\n  markedInsertIndex: r.uint16\n};\n\nlet SubstitutionTable = new r.Struct({\n  items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable))\n});\n\nlet SubtableData = new r.VersionedStruct('type', {\n  0: { // Indic Rearrangement Subtable\n    stateTable: new StateTable\n  },\n\n  1: { // Contextual Glyph Substitution Subtable\n    stateTable: new StateTable(ContextualData),\n    substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)\n  },\n\n  2: { // Ligature subtable\n    stateTable: new StateTable(LigatureData),\n    ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),\n    components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),\n    ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  },\n\n  4: { // Non-contextual Glyph Substitution Subtable\n    lookupTable: new LookupTable\n  },\n\n  5: { // Glyph Insertion Subtable\n    stateTable: new StateTable(InsertionData),\n    insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  }\n});\n\nlet Subtable = new r.Struct({\n  length: r.uint32,\n  coverage: r.uint24,\n  type: r.uint8,\n  subFeatureFlags: r.uint32,\n  table: SubtableData,\n  padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n});\n\nlet FeatureEntry = new r.Struct({\n  featureType:    r.uint16,\n  featureSetting: r.uint16,\n  enableFlags:    r.uint32,\n  disableFlags:   r.uint32\n});\n\nlet MorxChain = new r.Struct({\n  defaultFlags:     r.uint32,\n  chainLength:      r.uint32,\n  nFeatureEntries:  r.uint32,\n  nSubtables:       r.uint32,\n  features:         new r.Array(FeatureEntry, 'nFeatureEntries'),\n  subtables:        new r.Array(Subtable, 'nSubtables')\n});\n\nexport default new r.Struct({\n  version:  r.uint16,\n  unused:   new r.Reserved(r.uint16),\n  nChains:  r.uint32,\n  chains:   new r.Array(MorxChain, 'nChains')\n});\n","import * as r from 'restructure';\nimport { LookupTable } from './aat';\n\nlet OpticalBounds = new r.Struct({\n  left: r.int16,\n  top: r.int16,\n  right: r.int16,\n  bottom: r.int16\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  lookupTable: new LookupTable(OpticalBounds)\n});\n","import { binarySearch } from './utils';\nimport { encodingExists, getEncoding, getEncodingMapping } from './encodings';\nimport { cache } from './decorators';\nimport { range } from './utils';\n\nexport default class CmapProcessor {\n  constructor(cmapTable) {\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [\n      // 32-bit subtables\n      [3, 10],\n      [0, 6],\n      [0, 4],\n\n      // 16-bit subtables\n      [3, 1],\n      [0, 3],\n      [0, 2],\n      [0, 1],\n      [0, 0]\n    ]);\n\n    // If not unicode cmap was found, take the first table with a supported encoding.\n    if (!this.cmap) {\n      for (let cmap of cmapTable.tables) {\n        let encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n        let mapping = getEncodingMapping(encoding);\n        if (mapping) {\n          this.cmap = cmap.table;\n          this.encoding = mapping;\n        }\n      }\n    }\n\n    if (!this.cmap) {\n      throw new Error(\"Could not find a supported cmap table\");\n    }\n\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) {\n      this.uvs = null;\n    }\n  }\n\n  findSubtable(cmapTable, pairs) {\n    for (let [platformID, encodingID] of pairs) {\n      for (let cmap of cmapTable.tables) {\n        if (cmap.platformID === platformID && cmap.encodingID === encodingID) {\n          return cmap.table;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) {\n      codepoint = this.encoding.get(codepoint) || codepoint;\n\n      // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n    } else if (variationSelector) {\n      let gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) {\n        return gid;\n      }\n    }\n\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n\n      case 4: {\n        let min = 0;\n        let max = cmap.segCount - 1;\n        while (min <= max) {\n          let mid = (min + max) >> 1;\n\n          if (codepoint < cmap.startCode.get(mid)) {\n            max = mid - 1;\n          } else if (codepoint > cmap.endCode.get(mid)) {\n            min = mid + 1;\n          } else {\n            let rangeOffset = cmap.idRangeOffset.get(mid);\n            let gid;\n\n            if (rangeOffset === 0) {\n              gid = codepoint + cmap.idDelta.get(mid);\n            } else {\n              let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n              gid = cmap.glyphIndexArray.get(index) || 0;\n              if (gid !== 0) {\n                gid += cmap.idDelta.get(mid);\n              }\n            }\n\n            return gid & 0xffff;\n          }\n        }\n\n        return 0;\n      }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n\n      case 12:\n      case 13: {\n        let min = 0;\n        let max = cmap.nGroups - 1;\n        while (min <= max) {\n          let mid = (min + max) >> 1;\n          let group = cmap.groups.get(mid);\n\n          if (codepoint < group.startCharCode) {\n            max = mid - 1;\n          } else if (codepoint > group.endCharCode) {\n            min = mid + 1;\n          } else {\n            if (cmap.version === 12) {\n              return group.glyphID + (codepoint - group.startCharCode);\n            } else {\n              return group.glyphID;\n            }\n          }\n        }\n\n        return 0;\n      }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) {\n      return 0;\n    }\n\n    let selectors = this.uvs.varSelectors.toArray();\n    let i = binarySearch(selectors, x => variationSelector - x.varSelector);\n    let sel = selectors[i];\n\n    if (i !== -1 && sel.defaultUVS) {\n      i = binarySearch(sel.defaultUVS, x =>\n        codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0\n      );\n    }\n\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = binarySearch(sel.nonDefaultUVS, x => codepoint - x.unicodeValue);\n      if (i !== -1) {\n        return sel.nonDefaultUVS[i].glyphID;\n      }\n    }\n\n    return 0;\n  }\n\n  @cache\n  getCharacterSet() {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return range(0, cmap.codeMap.length);\n\n      case 4: {\n        let res = [];\n        let endCodes = cmap.endCode.toArray();\n        for (let i = 0; i < endCodes.length; i++) {\n          let tail = endCodes[i] + 1;\n          let start = cmap.startCode.get(i);\n          res.push(...range(start, tail));\n        }\n\n        return res;\n      }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n\n      case 12:\n      case 13: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          res.push(...range(group.startCharCode, group.endCharCode + 1));\n        }\n\n        return res;\n      }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  @cache\n  codePointsForGlyph(gid) {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0: {\n        let res = [];\n        for (let i = 0; i < 256; i++) {\n          if (cmap.codeMap.get(i) === gid) {\n            res.push(i);\n          }\n        }\n\n        return res;\n      }\n\n      case 4: {\n        let res = [];\n        for (let i = 0; i < cmap.segCount; i++) {\n          let end = cmap.endCode.get(i);\n          let start = cmap.startCode.get(i);\n          let rangeOffset = cmap.idRangeOffset.get(i);\n          let delta = cmap.idDelta.get(i);\n\n          for (var c = start; c <= end; c++) {\n            let g = 0;\n            if (rangeOffset === 0) {\n              g = c + delta;\n            } else {\n              let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n              g = cmap.glyphIndexArray.get(index) || 0;\n              if (g !== 0) {\n                g += delta;\n              }\n            }\n\n            if (g === gid) {\n              res.push(c);\n            }\n          }\n        }\n\n        return res;\n      }\n\n      case 12: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {\n            res.push(group.startCharCode + (gid - group.glyphID));\n          }\n        }\n\n        return res;\n      }\n\n      case 13: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          if (gid === group.glyphID) {\n            res.push(...range(group.startCharCode, group.endCharCode + 1));\n          }\n        }\n\n        return res;\n      }\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n}\n","export function binarySearch(arr, cmp) {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min <= max) {\n    let mid = (min + max) >> 1;\n    let res = cmp(arr[mid]);\n\n    if (res < 0) {\n      max = mid - 1;\n    } else if (res > 0) {\n      min = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return -1;\n}\n\nexport function range(index, end) {\n  let range = [];\n  while (index < end) {\n    range.push(index++);\n  }\n  return range;\n}\n\nexport const asciiDecoder = new TextDecoder('ascii');\n\n// Based on https://github.com/niklasvh/base64-arraybuffer. MIT license.\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst LOOKUP = new Uint8Array(256);\nfor (let i = 0; i < CHARS.length; i++) {\n  LOOKUP[CHARS.charCodeAt(i)] = i;\n}\n\nexport function decodeBase64(base64) {\n  let bufferLength = base64.length * 0.75;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n\n  let bytes = new Uint8Array(bufferLength);\n  let p = 0;\n\n  for (let i = 0, len = base64.length; i < len; i += 4) {\n    let encoded1 = LOOKUP[base64.charCodeAt(i)];\n    let encoded2 = LOOKUP[base64.charCodeAt(i + 1)];\n    let encoded3 = LOOKUP[base64.charCodeAt(i + 2)];\n    let encoded4 = LOOKUP[base64.charCodeAt(i + 3)];\n\n    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n  }\n\n  return bytes;\n}\n","import KernProcessor from './KernProcessor';\nimport UnicodeLayoutEngine from './UnicodeLayoutEngine';\nimport GlyphRun from './GlyphRun';\nimport GlyphPosition from './GlyphPosition';\nimport * as Script from './Script';\nimport AATLayoutEngine from '../aat/AATLayoutEngine';\nimport OTLayoutEngine from '../opentype/OTLayoutEngine';\n\nexport default class LayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null;\n\n    // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n    if (this.font.morx) {\n      this.engine = new AATLayoutEngine(this.font);\n\n    } else if (this.font.GSUB || this.font.GPOS) {\n      this.engine = new OTLayoutEngine(this.font);\n    }\n  }\n\n  layout(string, features, script, language, direction) {\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction = language;\n      language = script;\n      script = features;\n      features = [];\n    }\n\n    // Map string to glyphs if needed\n    if (typeof string === 'string') {\n      // Attempt to detect the script from the string if not provided.\n      if (script == null) {\n        script = Script.forString(string);\n      }\n\n      var glyphs = this.font.glyphsForString(string);\n    } else {\n      // Attempt to detect the script from the glyph code points if not provided.\n      if (script == null) {\n        let codePoints = [];\n        for (let glyph of string) {\n          codePoints.push(...glyph.codePoints);\n        }\n\n        script = Script.forCodePoints(codePoints);\n      }\n\n      var glyphs = string;\n    }\n\n    let glyphRun = new GlyphRun(glyphs, features, script, language, direction);\n\n    // Return early if there are no glyphs\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    }\n\n    // Setup the advanced layout engine\n    if (this.engine && this.engine.setup) {\n      this.engine.setup(glyphRun);\n    }\n\n    // Substitute and position the glyphs\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n\n    // Let the layout engine clean up any state it might have\n    if (this.engine && this.engine.cleanup) {\n      this.engine.cleanup();\n    }\n\n    return glyphRun;\n  }\n\n  substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) {\n      this.engine.substitute(glyphRun);\n    }\n  }\n\n  position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(glyph => new GlyphPosition(glyph.advanceWidth));\n    let positioned = null;\n\n    // Call the advanced layout engine. Returns the features applied.\n    if (this.engine && this.engine.position) {\n      positioned = this.engine.position(glyphRun);\n    }\n\n    // if there is no GPOS table, use unicode properties to position marks.\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) {\n        this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);\n      }\n\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    }\n\n    // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) {\n        this.kernProcessor = new KernProcessor(this.font);\n      }\n\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  }\n\n  hideDefaultIgnorables(glyphs, positions) {\n    let space = this.font.glyphForCodePoint(0x20);\n    for (let i = 0; i < glyphs.length; i++) {\n      if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n        glyphs[i] = space;\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  }\n\n  isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    let plane = ch >> 16;\n    if (plane === 0) {\n      // BMP\n      switch (ch >> 8) {\n      \tcase 0x00: return ch === 0x00AD;\n      \tcase 0x03: return ch === 0x034F;\n      \tcase 0x06: return ch === 0x061C;\n      \tcase 0x17: return 0x17B4 <= ch && ch <= 0x17B5;\n      \tcase 0x18: return 0x180B <= ch && ch <= 0x180E;\n      \tcase 0x20: return (0x200B <= ch && ch <= 0x200F) || (0x202A <= ch && ch <= 0x202E) || (0x2060 <= ch && ch <= 0x206F);\n      \tcase 0xFE: return (0xFE00 <= ch && ch <= 0xFE0F) || ch === 0xFEFF;\n      \tcase 0xFF: return 0xFFF0 <= ch && ch <= 0xFFF8;\n      \tdefault:   return false;\n      }\n    } else {\n      // Other planes\n      switch (plane) {\n      \tcase 0x01: return (0x1BCA0 <= ch && ch <= 0x1BCA3) || (0x1D173 <= ch && ch <= 0x1D17A);\n      \tcase 0x0E: return 0xE0000 <= ch && ch <= 0xE0FFF;\n      \tdefault:   return false;\n      }\n    }\n  }\n\n  getAvailableFeatures(script, language) {\n    let features = [];\n\n    if (this.engine) {\n      features.push(...this.engine.getAvailableFeatures(script, language));\n    }\n\n    if (this.font.kern && features.indexOf('kern') === -1) {\n      features.push('kern');\n    }\n\n    return features;\n  }\n\n  stringsForGlyph(gid) {\n    let result = new Set;\n\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n    for (let codePoint of codePoints) {\n      result.add(String.fromCodePoint(codePoint));\n    }\n\n    if (this.engine && this.engine.stringsForGlyph) {\n      for (let string of this.engine.stringsForGlyph(gid)) {\n        result.add(string);\n      }\n    }\n\n    return Array.from(result);\n  }\n}\n","import {binarySearch} from '../utils';\n\nexport default class KernProcessor {\n  constructor(font) {\n    this.kern = font.kern;\n  }\n\n  process(glyphs, positions) {\n    for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      let left = glyphs[glyphIndex].id;\n      let right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  }\n\n  getKerning(left, right) {\n    let res = 0;\n\n    for (let table of this.kern.tables) {\n      if (table.coverage.crossStream) {\n        continue;\n      }\n\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) {\n            continue;\n          }\n\n          break;\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) {\n            continue;\n          }\n\n          break;\n        default:\n          throw new Error(`Unsupported kerning table version ${table.version}`);\n      }\n\n      let val = 0;\n      let s = table.subtable;\n      switch (table.format) {\n        case 0:\n          let pairIdx = binarySearch(s.pairs, function (pair) {\n            return (left - pair.left) || (right - pair.right);\n          });\n\n          if (pairIdx >= 0) {\n            val = s.pairs[pairIdx].value;\n          }\n\n          break;\n\n        case 2:\n          let leftOffset = 0, rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {\n            leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n          } else {\n            leftOffset = s.array.off;\n          }\n\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {\n            rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          }\n\n          let index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) {\n            return 0;\n          }\n\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n\n        default:\n          throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n      }\n\n      // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n      if (table.coverage.override) {\n        res = val;\n      } else {\n        res += val;\n      }\n    }\n\n    return res;\n  }\n}\n","import {getCombiningClass} from 'unicode-properties';\n\n/**\n * This class is used when GPOS does not define 'mark' or 'mkmk' features\n * for positioning marks relative to base glyphs. It uses the unicode\n * combining class property to position marks.\n *\n * Based on code from Harfbuzz, thanks!\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc\n */\nexport default class UnicodeLayoutEngine {\n  constructor(font) {\n    this.font = font;\n  }\n\n  positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    let clusterStart = 0;\n    let clusterEnd = 0;\n    for (let index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.isMark) { // TODO: handle ligatures\n        clusterEnd = index;\n      } else {\n        if (clusterStart !== clusterEnd) {\n          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        }\n\n        clusterStart = clusterEnd = index;\n      }\n    }\n\n    if (clusterStart !== clusterEnd) {\n      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    }\n\n    return positions;\n  }\n\n  positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    let base = glyphs[clusterStart];\n    let baseBox = base.cbox.copy();\n\n    // adjust bounding box for ligature glyphs\n    if (base.codePoints.length > 1) {\n      // LTR. TODO: RTL support.\n      baseBox.minX += ((base.codePoints.length - 1) * baseBox.width) / base.codePoints.length;\n    }\n\n    let xOffset = -positions[clusterStart].xAdvance;\n    let yOffset = 0;\n    let yGap = this.font.unitsPerEm / 16;\n\n    // position each of the mark glyphs relative to the base glyph\n    for (let index = clusterStart + 1; index <= clusterEnd; index++) {\n      let mark = glyphs[index];\n      let markBox = mark.cbox;\n      let position = positions[index];\n\n      let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0;\n\n        // x positioning\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n\n          default: // Attached_Below, Attached_Above, Below, Above, other\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        }\n\n        // y positioning\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {\n              baseBox.minY += yGap;\n            }\n\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {\n              baseBox.maxY += yGap;\n            }\n\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n\n    return;\n  }\n\n  getCombiningClass(codePoint) {\n    let combiningClass = getCombiningClass(codePoint);\n\n    // Thai / Lao need some per-character work\n    if ((codePoint & ~0xff) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') {\n        switch (codePoint) {\n          case 0x0e31:\n          case 0x0e34:\n          case 0x0e35:\n          case 0x0e36:\n          case 0x0e37:\n          case 0x0e47:\n          case 0x0e4c:\n          case 0x0e3d:\n          case 0x0e4e:\n            return 'Above_Right';\n\n          case 0x0eb1:\n          case 0x0eb4:\n          case 0x0eb5:\n          case 0x0eb6:\n          case 0x0eb7:\n          case 0x0ebb:\n          case 0x0ecc:\n          case 0x0ecd:\n            return 'Above';\n\n          case 0x0ebc:\n            return 'Below';\n        }\n      } else if (codePoint === 0x0e3a) { // virama\n        return 'Below_Right';\n      }\n    }\n\n    switch (combiningClass) {\n      // Hebrew\n\n      case 'CCC10': // sheva\n      case 'CCC11': // hataf segol\n      case 'CCC12': // hataf patah\n      case 'CCC13': // hataf qamats\n      case 'CCC14': // hiriq\n      case 'CCC15': // tsere\n      case 'CCC16': // segol\n      case 'CCC17': // patah\n      case 'CCC18': // qamats\n      case 'CCC20': // qubuts\n      case 'CCC22': // meteg\n        return 'Below';\n\n      case 'CCC23': // rafe\n        return 'Attached_Above';\n\n      case 'CCC24': // shin dot\n        return 'Above_Right';\n\n      case 'CCC25': // sin dot\n      case 'CCC19': // holam\n        return 'Above_Left';\n\n      case 'CCC26': // point varika\n        return 'Above';\n\n      case 'CCC21': // dagesh\n        break;\n\n      // Arabic and Syriac\n\n      case 'CCC27': // fathatan\n      case 'CCC28': // dammatan\n      case 'CCC30': // fatha\n      case 'CCC31': // damma\n      case 'CCC33': // shadda\n      case 'CCC34': // sukun\n      case 'CCC35': // superscript alef\n      case 'CCC36': // superscript alaph\n        return 'Above';\n\n      case 'CCC29': // kasratan\n      case 'CCC32': // kasra\n        return 'Below';\n\n      // Thai\n\n      case 'CCC103': // sara u / sara uu\n        return 'Below_Right';\n\n      case 'CCC107': // mai\n        return 'Above_Right';\n\n      // Lao\n\n      case 'CCC118': // sign u / sign uu\n        return 'Below';\n\n      case 'CCC122': // mai\n        return 'Above';\n\n      // Tibetan\n\n      case 'CCC129': // sign aa\n      case 'CCC132': // sign u\n        return 'Below';\n\n      case 'CCC130': // sign i\n        return 'Above';\n    }\n\n    return combiningClass;\n  }\n}\n","import BBox from '../glyph/BBox';\nimport * as Script from '../layout/Script';\n\n/**\n * Represents a run of Glyph and GlyphPosition objects.\n * Returned by the font layout method.\n */\nexport default class GlyphRun {\n  constructor(glyphs, features, script, language, direction) {\n    /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */\n    this.glyphs = glyphs;\n\n    /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */\n    this.positions = null;\n\n    /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */\n    this.script = script;\n\n    /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */\n    this.language = language || null;\n\n    /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */\n    this.direction = direction || Script.direction(script);\n\n    /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */\n    this.features = {};\n\n    // Convert features to an object\n    if (Array.isArray(features)) {\n      for (let tag of features) {\n        this.features[tag] = true;\n      }\n    } else if (typeof features === 'object') {\n      this.features = features;\n    }\n  }\n\n  /**\n   * The total advance width of the run.\n   * @type {number}\n   */\n  get advanceWidth() {\n    let width = 0;\n    for (let position of this.positions) {\n      width += position.xAdvance;\n    }\n\n    return width;\n  }\n\n /**\n  * The total advance height of the run.\n  * @type {number}\n  */\n  get advanceHeight() {\n    let height = 0;\n    for (let position of this.positions) {\n      height += position.yAdvance;\n    }\n\n    return height;\n  }\n\n /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */\n  get bbox() {\n    let bbox = new BBox;\n\n    let x = 0;\n    let y = 0;\n    for (let index = 0; index < this.glyphs.length; index++) {\n      let glyph = this.glyphs[index];\n      let p = this.positions[index];\n      let b = glyph.bbox;\n\n      bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n      bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n\n      x += p.xAdvance;\n      y += p.yAdvance;\n    }\n\n    return bbox;\n  }\n}\n","/**\n * Represents a glyph bounding box\n */\nexport default class BBox {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * The width of the bounding box\n   * @type {number}\n   */\n  get width() {\n    return this.maxX - this.minX;\n  }\n\n  /**\n   * The height of the bounding box\n   * @type {number}\n   */\n  get height() {\n    return this.maxY - this.minY;\n  }\n\n  addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) {\n        this.minX = x;\n      }\n\n      if (x > this.maxX) {\n        this.maxX = x;\n      }\n    }\n\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) {\n        this.minY = y;\n      }\n\n      if (y > this.maxY) {\n        this.maxY = y;\n      }\n    }\n  }\n\n  copy() {\n    return new BBox(this.minX, this.minY, this.maxX, this.maxY);\n  }\n}\n","import {getScript} from 'unicode-properties';\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nconst UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\n\nconst OPENTYPE_SCRIPTS = {};\nfor (let script in UNICODE_SCRIPTS) {\n  let tag = UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) {\n    for (let t of tag) {\n      OPENTYPE_SCRIPTS[t] = script;\n    }\n  } else {\n    OPENTYPE_SCRIPTS[tag] = script;\n  }\n}\n\nexport function fromUnicode(script) {\n  return UNICODE_SCRIPTS[script];\n}\n\nexport function fromOpenType(tag) {\n  return OPENTYPE_SCRIPTS[tag];\n}\n\nexport function forString(string) {\n  let len = string.length;\n  let idx = 0;\n  while (idx < len) {\n    let code = string.charCodeAt(idx++);\n\n    // Check if this is a high surrogate\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      let next = string.charCodeAt(idx);\n\n      // Check if this is a low surrogate\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n\n    let script = getScript(code);\n    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') {\n      return UNICODE_SCRIPTS[script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\nexport function forCodePoints(codePoints) {\n  for (let i = 0; i < codePoints.length; i++) {\n    let codePoint = codePoints[i];\n    let script = getScript(codePoint);\n    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') {\n      return UNICODE_SCRIPTS[script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\n// The scripts in this map are written from right to left\nconst RTL = {\n  arab: true,   // Arabic\n  hebr: true,   // Hebrew\n  syrc: true,   // Syriac\n  thaa: true,   // Thaana\n  cprt: true,   // Cypriot Syllabary\n  khar: true,   // Kharosthi\n  phnx: true,   // Phoenician\n  'nko ': true, // N'Ko\n  lydi: true,   // Lydian\n  avst: true,   // Avestan\n  armi: true,   // Imperial Aramaic\n  phli: true,   // Inscriptional Pahlavi\n  prti: true,   // Inscriptional Parthian\n  sarb: true,   // Old South Arabian\n  orkh: true,   // Old Turkic, Orkhon Runic\n  samr: true,   // Samaritan\n  mand: true,   // Mandaic, Mandaean\n  merc: true,   // Meroitic Cursive\n  mero: true,   // Meroitic Hieroglyphs\n\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true,   // Manichaean\n  mend: true,   // Mende Kikakui\n  nbat: true,   // Nabataean\n  narb: true,   // Old North Arabian\n  palm: true,   // Palmyrene\n  phlp: true    // Psalter Pahlavi\n};\n\nexport function direction(script) {\n  if (RTL[script]) {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n","/**\n * Represents positioning information for a glyph in a GlyphRun.\n */\nexport default class GlyphPosition {\n  constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {\n    /**\n     * The amount to move the virtual pen in the X direction after rendering this glyph.\n     * @type {number}\n     */\n    this.xAdvance = xAdvance;\n\n    /**\n     * The amount to move the virtual pen in the Y direction after rendering this glyph.\n     * @type {number}\n     */\n    this.yAdvance = yAdvance;\n\n    /**\n     * The offset from the pen position in the X direction at which to render this glyph.\n     * @type {number}\n     */\n    this.xOffset = xOffset;\n\n    /**\n     * The offset from the pen position in the Y direction at which to render this glyph.\n     * @type {number}\n     */\n    this.yOffset = yOffset;\n  }\n}\n","import * as AATFeatureMap from './AATFeatureMap';\nimport * as Script from '../layout/Script';\nimport AATMorxProcessor from './AATMorxProcessor';\n\nexport default class AATLayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.morxProcessor = new AATMorxProcessor(font);\n    this.fallbackPosition = false;\n  }\n\n  substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n    }\n\n    this.morxProcessor.process(glyphRun.glyphs, AATFeatureMap.mapOTToAAT(glyphRun.features));\n  }\n\n  getAvailableFeatures(script, language) {\n    return AATFeatureMap.mapAATToOT(this.morxProcessor.getSupportedFeatures());\n  }\n\n  stringsForGlyph(gid) {\n    let glyphStrings = this.morxProcessor.generateInputs(gid);\n    let result = new Set;\n\n    for (let glyphs of glyphStrings) {\n      this._addStrings(glyphs, 0, result, '');\n    }\n\n    return result;\n  }\n\n  _addStrings(glyphs, index, strings, string) {\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n\n    for (let codePoint of codePoints) {\n      let s = string + String.fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) {\n        this._addStrings(glyphs, index + 1, strings, s);\n      } else {\n        strings.add(s);\n      }\n    }\n  }\n}\n","// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nconst features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n    // upperAndLowerCase: 0          # deprecated\n    // allCaps: 1                    # deprecated\n    // allLowerCase: 2               # deprecated\n    // smallCaps: 3                  # deprecated\n    // initialCaps: 4                # deprecated\n    // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n    // formInterrobang: 6\n    // smartQuotes: 8\n    // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n    // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n    // hanjaToHangul: 1\n    // hiraganaToKatakana: 2\n    // katakanaToHiragana: 3\n    // kanaToRomanization: 4\n    // romanizationToHiragana: 5\n    // romanizationToKatakana: 6\n    // hanjaToHangulAltOne: 7\n    // hanjaToHangulAltTwo: 8\n    // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: { // indices into ltag table\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\n\nconst feature = (name, selector) => [features[name].code, features[name][selector]];\n\nconst OTMapping = {\n  rlig: feature('ligatures', 'requiredLigatures'),\n  clig: feature('ligatures', 'contextualLigatures'),\n  dlig: feature('ligatures', 'rareLigatures'),\n  hlig: feature('ligatures', 'historicalLigatures'),\n  liga: feature('ligatures', 'commonLigatures'),\n  hist: feature('ligatures', 'historicalLigatures'), // ??\n\n  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),\n\n  frac: feature('fractions', 'diagonalFractions'),\n  dnom: feature('fractions', 'diagonalFractions'), // ??\n  numr: feature('fractions', 'diagonalFractions'), // ??\n  afrc: feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n\n  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'), // also caseSensitiveSpacing\n  ccmp: feature('unicodeDecomposition', 'canonicalComposition'), // compatibilityComposition?\n  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'), // guess..., probably not given below\n  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: feature('contextualAlternates', 'swashAlternates'),\n  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: feature('cursiveConnection', 'cursive'), // ??\n  c2pc: feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: feature('upperCase', 'upperCaseSmallCaps'),\n\n  init: feature('smartSwash', 'wordInitialSwashes'), // ??\n  fin2: feature('smartSwash', 'wordFinalSwashes'), // ??\n  medi: feature('smartSwash', 'nonFinalSwashes'), // ??\n  med2: feature('smartSwash', 'nonFinalSwashes'), // ??\n  fin3: feature('smartSwash', 'wordFinalSwashes'), // ??\n  fina: feature('smartSwash', 'wordFinalSwashes'), // ??\n\n  pkna: feature('kanaSpacing', 'proportionalKana'),\n  half: feature('textSpacing', 'halfWidthText'), // also HalfWidthCJKRoman, HalfWidthIdeographs?\n  halt: feature('textSpacing', 'altHalfWidthText'),\n\n  hkna: feature('alternateKana', 'alternateHorizKana'),\n  vkna: feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n\n  ital: feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: feature('numberCase', 'upperCaseNumbers'),\n  onum: feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),\n\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n\n  calt: feature('contextualAlternates', 'contextualAlternates'), // or more?\n  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'), // oh... below?\n  vert: feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: feature('numberSpacing', 'monospacedNumbers'),\n  pnum: feature('numberSpacing', 'proportionalNumbers'),\n  sups: feature('verticalPosition', 'superiors'),\n  subs: feature('verticalPosition', 'inferiors'),\n  ordn: feature('verticalPosition', 'ordinals'),\n  pwid: feature('textSpacing', 'proportionalText'),\n  hwid: feature('textSpacing', 'halfWidthText'),\n  qwid: feature('textSpacing', 'quarterWidthText'), // also QuarterWidthNumbers?\n  twid: feature('textSpacing', 'thirdWidthText'), // also ThirdWidthNumbers?\n  fwid: feature('textSpacing', 'proportionalText'), //??\n  palt: feature('textSpacing', 'altProportionalText'),\n  trad: feature('characterShape', 'traditionalCharacters'),\n  smpl: feature('characterShape', 'simplifiedCharacters'),\n  jp78: feature('characterShape', 'JIS1978Characters'),\n  jp83: feature('characterShape', 'JIS1983Characters'),\n  jp90: feature('characterShape', 'JIS1990Characters'),\n  jp04: feature('characterShape', 'JIS2004Characters'),\n  expt: feature('characterShape', 'expertCharacters'),\n  hojo: feature('characterShape', 'hojoCharacters'),\n  nlck: feature('characterShape', 'NLCCharacters'),\n  tnam: feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: feature('rubyKana', 'rubyKana'),\n  titl: feature('styleOptions', 'titlingCaps'),\n  zero: feature('typographicExtras', 'slashedZero'),\n\n  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')\n};\n\n  // salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n\n// Add cv01-cv99 features\nfor (let i = 1; i <= 99; i++) {\n  OTMapping[`cv${`00${i}`.slice(-2)}`] = [features.characterAlternatives.code, i];\n}\n\n// create inverse mapping\nlet AATMapping = {};\nfor (let ot in OTMapping) {\n  let aat = OTMapping[ot];\n  if (AATMapping[aat[0]] == null) {\n    AATMapping[aat[0]] = {};\n  }\n\n  AATMapping[aat[0]][aat[1]] = ot;\n}\n\n// Maps an array of OpenType features to AAT features\n// in the form of {featureType:{featureSetting:true}}\nexport function mapOTToAAT(features) {\n  let res = {};\n  for (let k in features) {\n    let r;\n    if (r = OTMapping[k]) {\n      if (res[r[0]] == null) {\n        res[r[0]] = {};\n      }\n\n      res[r[0]][r[1]] = features[k];\n    }\n  }\n\n  return res;\n}\n\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction mapFeatureStrings(f) {\n  let [type, setting] = f;\n  if (isNaN(type)) {\n    var typeCode = features[type] && features[type].code;\n  } else {\n    var typeCode = type;\n  }\n\n  if (isNaN(setting)) {\n    var settingCode = features[type] && features[type][setting];\n  } else {\n    var settingCode = setting;\n  }\n\n  return [typeCode, settingCode];\n}\n\n// Maps AAT features to an array of OpenType features\n// Supports both arrays in the form of [[featureType, featureSetting]]\n// and objects in the form of {featureType:{featureSetting:true}}\n// featureTypes and featureSettings can be either strings or number codes\nexport function mapAATToOT(features) {\n  let res = {};\n  if (Array.isArray(features)) {\n    for (let k = 0; k < features.length; k++) {\n      let r;\n      let f = mapFeatureStrings(features[k]);\n      if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {\n        res[r] = true;\n      }\n    }\n\n  } else if (typeof features === 'object') {\n    for (let type in features) {\n      let feature = features[type];\n      for (let setting in feature) {\n        let r;\n        let f = mapFeatureStrings([type, setting]);\n        if (feature[setting] && (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]])) {\n          res[r] = true;\n        }\n      }\n    }\n  }\n\n  return Object.keys(res);\n}\n","import AATStateMachine from './AATStateMachine';\nimport AATLookupTable from './AATLookupTable';\nimport {cache} from '../decorators';\n\n// indic replacement flags\nconst MARK_FIRST = 0x8000;\nconst MARK_LAST  = 0x2000;\nconst VERB       = 0x000F;\n\n// contextual substitution and glyph insertion flag\nconst SET_MARK = 0x8000;\n\n// ligature entry flags\nconst SET_COMPONENT  = 0x8000;\nconst PERFORM_ACTION = 0x2000;\n\n// ligature action masks\nconst LAST_MASK   = 0x80000000;\nconst STORE_MASK  = 0x40000000;\nconst OFFSET_MASK = 0x3FFFFFFF;\n\nconst VERTICAL_ONLY           = 0x800000;\nconst REVERSE_DIRECTION       = 0x400000;\nconst HORIZONTAL_AND_VERTICAL = 0x200000;\n\n// glyph insertion flags\nconst CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst MARKED_IS_KASHIDA_LIKE  = 0x1000;\nconst CURRENT_INSERT_BEFORE   = 0x0800;\nconst MARKED_INSERT_BEFORE    = 0x0400;\nconst CURRENT_INSERT_COUNT    = 0x03E0;\nconst MARKED_INSERT_COUNT     = 0x001F;\n\nexport default class AATMorxProcessor {\n  constructor(font) {\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:boolean}}\n  process(glyphs, features = {}) {\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n\n      // enable/disable the requested features\n      for (let feature of chain.features) {\n        let f;\n        if (f = features[feature.featureType]) {\n          if (f[feature.featureSetting]) {\n            flags &= feature.disableFlags;\n            flags |= feature.enableFlags;\n          } else if (f[feature.featureSetting] === false) {\n            flags |= ~feature.disableFlags;\n            flags &= ~feature.enableFlags;\n          }\n        }\n      }\n\n      for (let subtable of chain.subtables) {\n        if (subtable.subFeatureFlags & flags) {\n          this.processSubtable(subtable, glyphs);\n        }\n      }\n    }\n\n    // remove deleted glyphs\n    let index = glyphs.length - 1;\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) {\n        glyphs.splice(index, 1);\n      }\n\n      index--;\n    }\n\n    return glyphs;\n  }\n\n  processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n\n    let reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  }\n\n  @cache\n  getStateMachine(subtable) {\n    return new AATStateMachine(subtable.table.stateTable);\n  }\n\n  getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n      case 1:\n        return this.processContextualSubstitution;\n      case 2:\n        return this.processLigature;\n      case 4:\n        return this.processNoncontextualSubstitutions;\n      case 5:\n        return this.processGlyphInsertion;\n      default:\n        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n    }\n  }\n\n  processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & MARK_FIRST) {\n      this.firstGlyph = index;\n    }\n\n    if (entry.flags & MARK_LAST) {\n      this.lastGlyph = index;\n    }\n\n    reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);\n  }\n\n  processContextualSubstitution(glyph, entry, index) {\n    let subsitutions = this.subtable.table.substitutionTable.items;\n    if (entry.markIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.markIndex);\n      let lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.currentIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.currentIndex);\n      let lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[index];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.flags & SET_MARK) {\n      this.markedGlyph = index;\n    }\n  }\n\n  processLigature(glyph, entry, index) {\n    if (entry.flags & SET_COMPONENT) {\n      this.ligatureStack.push(index);\n    }\n\n    if (entry.flags & PERFORM_ACTION) {\n      let actions = this.subtable.table.ligatureActions;\n      let components = this.subtable.table.components;\n      let ligatureList = this.subtable.table.ligatureList;\n\n      let actionIndex = entry.action;\n      let last = false;\n      let ligatureIndex = 0;\n      let codePoints = [];\n      let ligatureGlyphs = [];\n\n      while (!last) {\n        let componentGlyph = this.ligatureStack.pop();\n        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n\n        let action = actions.getItem(actionIndex++);\n        last = !!(action & LAST_MASK);\n        let store = !!(action & STORE_MASK);\n        let offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n        offset += this.glyphs[componentGlyph].id;\n\n        let component = components.getItem(offset);\n        ligatureIndex += component;\n\n        if (last || store) {\n          let ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else {\n          this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n        }\n      }\n\n      // Put ligature glyph indexes back on the stack\n      this.ligatureStack.push(...ligatureGlyphs);\n    }\n  }\n\n  processNoncontextualSubstitutions(subtable, glyphs, index) {\n    let lookupTable = new AATLookupTable(subtable.table.lookupTable);\n\n    for (index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.id !== 0xffff) {\n        let gid = lookupTable.lookup(glyph.id);\n        if (gid) { // 0 means do nothing\n          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n      }\n    }\n  }\n\n  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    let insertions = [];\n    while (count--) {\n      let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n\n    if (!isBefore) {\n      glyphIndex++;\n    }\n\n    this.glyphs.splice(glyphIndex, 0, ...insertions);\n  }\n\n  processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & SET_MARK) {\n      this.markedIndex = index;\n    }\n\n    if (entry.markedInsertIndex !== 0xffff) {\n      let count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n\n    if (entry.currentInsertIndex !== 0xffff) {\n      let count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);\n      this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n    }\n  }\n\n  getSupportedFeatures() {\n    let features = [];\n    for (let chain of this.morx.chains) {\n      for (let feature of chain.features) {\n        features.push([feature.featureType, feature.featureSetting]);\n      }\n    }\n\n    return features;\n  }\n\n  generateInputs(gid) {\n    if (!this.inputCache) {\n      this.generateInputCache();\n    }\n\n    return this.inputCache[gid] || [];\n  }\n\n  generateInputCache() {\n    this.inputCache = {};\n\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n\n      for (let subtable of chain.subtables) {\n        if (subtable.subFeatureFlags & flags) {\n          this.generateInputsForSubtable(subtable);\n        }\n      }\n    }\n  }\n\n  generateInputsForSubtable(subtable) {\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) {\n      return;\n    }\n\n    let reverse = !!(subtable.coverage & REVERSE_DIRECTION);\n    if (reverse) {\n      throw new Error('Reverse subtable, not supported.');\n    }\n\n    this.subtable = subtable;\n    this.ligatureStack = [];\n\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n\n    let input = [];\n    let stack = [];\n    this.glyphs = [];\n\n    stateMachine.traverse({\n      enter: (glyph, entry) => {\n        let glyphs = this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: this.ligatureStack.slice()\n        });\n\n        // Add glyph to input and glyphs to process.\n        let g = this.font.getGlyph(glyph);\n        input.push(g);\n        glyphs.push(input[input.length - 1]);\n\n        // Process ligature substitution\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n\n        // Add input to result if only one matching (non-deleted) glyph remains.\n        let count = 0;\n        let found = 0;\n        for (let i = 0; i < glyphs.length && count <= 1; i++) {\n          if (glyphs[i].id !== 0xffff) {\n            count++;\n            found = glyphs[i].id;\n          }\n        }\n\n        if (count === 1) {\n          let result = input.map(g => g.id);\n          let cache = this.inputCache[found];\n          if (cache) {\n            cache.push(result);\n          } else {\n            this.inputCache[found] = [result];\n          }\n        }\n      },\n\n      exit: () => {\n        ({glyphs: this.glyphs, ligatureStack: this.ligatureStack} = stack.pop());\n        input.pop();\n      }\n    });\n  }\n}\n\n// swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\nfunction swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n  let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) {\n    end.reverse();\n  }\n\n  let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n  if (reverseA) {\n    start.reverse();\n  }\n\n  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n  return glyphs;\n}\n\nfunction reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  let length = lastGlyph - firstGlyph + 1;\n  switch (verb) {\n    case 0: // no change\n      return glyphs;\n\n    case 1: // Ax => xA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n\n    case 2: // xD => Dx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n\n    case 3: // AxD => DxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n\n    case 4: // ABx => xAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n\n    case 5: // ABx => xBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n\n    case 6: // xCD => CDx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n\n    case 7: // xCD => DCx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n\n    case 8: // AxCD => CDxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n\n    case 9: // AxCD => DCxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n\n    case 10: // ABxD => DxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n\n    case 11: // ABxD => DxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n\n    case 12: // ABxCD => CDxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n\n    case 13: // ABxCD => CDxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n\n    case 14: // ABxCD => DCxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n\n    case 15: // ABxCD => DCxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n\n    default:\n      throw new Error(`Unknown verb: ${verb}`);\n  }\n}\n","import AATLookupTable from './AATLookupTable';\n\nconst START_OF_TEXT_STATE = 0;\nconst START_OF_LINE_STATE = 1;\n\nconst END_OF_TEXT_CLASS = 0;\nconst OUT_OF_BOUNDS_CLASS = 1;\nconst DELETED_GLYPH_CLASS = 2;\nconst END_OF_LINE_CLASS = 3;\n\nconst DONT_ADVANCE = 0x4000;\n\nexport default class AATStateMachine {\n  constructor(stateTable) {\n    this.stateTable = stateTable;\n    this.lookupTable = new AATLookupTable(stateTable.classTable);\n  }\n\n  process(glyphs, reverse, processEntry) {\n    let currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n    let index = reverse ? glyphs.length - 1 : 0;\n    let dir = reverse ? -1 : 1;\n\n    while ((dir === 1 && index <= glyphs.length) || (dir === -1 && index >= -1)) {\n      let glyph = null;\n      let classCode = OUT_OF_BOUNDS_CLASS;\n      let shouldAdvance = true;\n\n      if (index === glyphs.length || index === -1) {\n        classCode = END_OF_TEXT_CLASS;\n      } else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) { // deleted glyph\n          classCode = DELETED_GLYPH_CLASS;\n        } else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) {\n            classCode = OUT_OF_BOUNDS_CLASS;\n          }\n        }\n      }\n\n      let row = this.stateTable.stateArray.getItem(currentState);\n      let entryIndex = row[classCode];\n      let entry = this.stateTable.entryTable.getItem(entryIndex);\n\n      if (classCode !== END_OF_TEXT_CLASS && classCode !==  DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & DONT_ADVANCE);\n      }\n\n      currentState = entry.newState;\n      if (shouldAdvance) {\n        index += dir;\n      }\n    }\n\n    return glyphs;\n  }\n\n  /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */\n  traverse(opts, state = 0, visited = new Set) {\n    if (visited.has(state)) {\n      return;\n    }\n\n    visited.add(state);\n\n    let {nClasses, stateArray, entryTable} = this.stateTable;\n    let row = stateArray.getItem(state);\n\n    // Skip predefined classes\n    for (let classCode = 4; classCode < nClasses; classCode++) {\n      let entryIndex = row[classCode];\n      let entry = entryTable.getItem(entryIndex);\n\n      // Try all glyphs in the class\n      for (let glyph of this.lookupTable.glyphsForValue(classCode)) {\n        if (opts.enter) {\n          opts.enter(glyph, entry);\n        }\n\n        if (entry.newState !== 0) {\n          this.traverse(opts, entry.newState, visited);\n        }\n\n        if (opts.exit) {\n          opts.exit(glyph, entry);\n        }\n      }\n    }\n  }\n}\n","import {cache} from '../decorators';\nimport {range} from '../utils';\n\nexport default class AATLookupTable {\n  constructor(table) {\n    this.table = table;\n  }\n\n  lookup(glyph) {\n    switch (this.table.version) {\n      case 0: // simple array format\n        return this.table.values.getItem(glyph);\n\n      case 2: // segment format\n      case 4: {\n        let min = 0;\n        let max = this.table.binarySearchHeader.nUnits - 1;\n\n        while (min <= max) {\n          var mid = (min + max) >> 1;\n          var seg = this.table.segments[mid];\n\n          // special end of search value\n          if (seg.firstGlyph === 0xffff) {\n            return null;\n          }\n\n          if (glyph < seg.firstGlyph) {\n            max = mid - 1;\n          } else if (glyph > seg.lastGlyph) {\n            min = mid + 1;\n          } else {\n            if (this.table.version === 2) {\n              return seg.value;\n            } else {\n              return seg.values[glyph - seg.firstGlyph];\n            }\n          }\n        }\n\n        return null;\n      }\n\n      case 6: { // lookup single\n        let min = 0;\n        let max = this.table.binarySearchHeader.nUnits - 1;\n\n        while (min <= max) {\n          var mid = (min + max) >> 1;\n          var seg = this.table.segments[mid];\n\n          // special end of search value\n          if (seg.glyph === 0xffff) {\n            return null;\n          }\n\n          if (glyph < seg.glyph) {\n            max = mid - 1;\n          } else if (glyph > seg.glyph) {\n            min = mid + 1;\n          } else {\n            return seg.value;\n          }\n        }\n\n        return null;\n      }\n\n      case 8: // lookup trimmed\n        return this.table.values[glyph - this.table.firstGlyph];\n\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n  }\n\n  @cache\n  glyphsForValue(classValue) {\n    let res = [];\n\n    switch (this.table.version) {\n      case 2: // segment format\n      case 4: {\n        for (let segment of this.table.segments) {\n          if ((this.table.version === 2 && segment.value === classValue)) {\n            res.push(...range(segment.firstGlyph, segment.lastGlyph + 1));\n          } else {\n            for (let index = 0; index < segment.values.length; index++) {\n              if (segment.values[index] === classValue) {\n                res.push(segment.firstGlyph + index);\n              }\n            }\n          }\n        }\n\n        break;\n      }\n\n      case 6: { // lookup single\n        for (let segment of this.table.segments) {\n          if (segment.value === classValue) {\n            res.push(segment.glyph);\n          }\n        }\n\n        break;\n      }\n\n      case 8: { // lookup trimmed\n        for (let i = 0; i < this.table.values.length; i++) {\n          if (this.table.values[i] === classValue) {\n            res.push(this.table.firstGlyph + i);\n          }\n        }\n\n        break;\n      }\n\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n\n    return res;\n  }\n}\n","import ShapingPlan from './ShapingPlan';\nimport * as Shapers from './shapers';\nimport GlyphInfo from './GlyphInfo';\nimport GSUBProcessor from './GSUBProcessor';\nimport GPOSProcessor from './GPOSProcessor';\n\nexport default class OTLayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.glyphInfos = null;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n\n    if (font.GSUB) {\n      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);\n    }\n\n    if (font.GPOS) {\n      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);\n    }\n  }\n\n  setup(glyphRun) {\n    // Map glyphs to GlyphInfo objects so data can be passed between\n    // GSUB and GPOS without mutating the real (shared) Glyph objects.\n    this.glyphInfos = glyphRun.glyphs.map(glyph => new GlyphInfo(this.font, glyph.id, [...glyph.codePoints]));\n\n    // Select a script based on what is available in GSUB/GPOS.\n    let script = null;\n    if (this.GPOSProcessor) {\n      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    if (this.GSUBProcessor) {\n      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n    this.shaper = Shapers.choose(script);\n    this.plan = new ShapingPlan(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n\n    // Assign chosen features to output glyph run\n    for (let key in this.plan.allFeatures) {\n      glyphRun.features[key] = true;\n    }\n  }\n\n  substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, this.glyphInfos);\n\n      // Map glyph infos back to normal Glyph objects\n      glyphRun.glyphs = this.glyphInfos.map(glyphInfo => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n    }\n  }\n\n  position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    if (this.GPOSProcessor) {\n      this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n    }\n\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    // Reverse the glyphs and positions if the script is right-to-left\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  }\n\n  zeroMarkAdvances(positions) {\n    for (let i = 0; i < this.glyphInfos.length; i++) {\n      if (this.glyphInfos[i].isMark) {\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  }\n\n  cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  }\n\n  getAvailableFeatures(script, language) {\n    let features = [];\n\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GSUBProcessor.features));\n    }\n\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GPOSProcessor.features));\n    }\n\n    return features;\n  }\n}\n","import * as Script from '../layout/Script';\n\n/**\n * ShapingPlans are used by the OpenType shapers to store which\n * features should by applied, and in what order to apply them.\n * The features are applied in groups called stages. A feature\n * can be applied globally to all glyphs, or locally to only\n * specific glyphs.\n *\n * @private\n */\nexport default class ShapingPlan {\n  constructor(font, script, direction) {\n    this.font = font;\n    this.script = script;\n    this.direction = direction;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n\n  /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */\n  _addFeatures(features, global) {\n    let stageIndex = this.stages.length - 1;\n    let stage = this.stages[stageIndex];\n    for (let feature of features) {\n      if (this.allFeatures[feature] == null) {\n        stage.push(feature);\n        this.allFeatures[feature] = stageIndex;\n\n        if (global) {\n          this.globalFeatures[feature] = true;\n        }\n      }\n    }\n  }\n\n  /**\n   * Add features to the last stage\n   */\n  add(arg, global = true) {\n    if (this.stages.length === 0) {\n      this.stages.push([]);\n    }\n\n    if (typeof arg === 'string') {\n      arg = [arg];\n    }\n\n    if (Array.isArray(arg)) {\n      this._addFeatures(arg, global);\n    } else if (typeof arg === 'object') {\n      this._addFeatures(arg.global || [], true);\n      this._addFeatures(arg.local || [], false);\n    } else {\n      throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n  }\n\n  /**\n   * Add a new stage\n   */\n  addStage(arg, global) {\n    if (typeof arg === 'function') {\n      this.stages.push(arg, []);\n    } else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  }\n\n  setFeatureOverrides(features) {\n    if (Array.isArray(features)) {\n      this.add(features);\n    } else if (typeof features === 'object') {\n      for (let tag in features) {\n        if (features[tag]) {\n          this.add(tag);\n        } else if (this.allFeatures[tag] != null) {\n          let stage = this.stages[this.allFeatures[tag]];\n          stage.splice(stage.indexOf(tag), 1);\n          delete this.allFeatures[tag];\n          delete this.globalFeatures[tag];\n        }\n      }\n    }\n  }\n\n  /**\n   * Assigns the global features to the given glyphs\n   */\n  assignGlobalFeatures(glyphs) {\n    for (let glyph of glyphs) {\n      for (let feature in this.globalFeatures) {\n        glyph.features[feature] = true;\n      }\n    }\n  }\n\n  /**\n   * Executes the planned stages using the given OTProcessor\n   */\n  process(processor, glyphs, positions) {\n    for (let stage of this.stages) {\n      if (typeof stage === 'function') {\n        if (!positions) {\n          stage(this.font, glyphs, this);\n        }\n\n      } else if (stage.length > 0) {\n        processor.applyFeatures(stage, glyphs, positions);\n      }\n    }\n  }\n}\n","import DefaultShaper from './DefaultShaper';\nimport ArabicShaper from './ArabicShaper';\nimport HangulShaper from './HangulShaper';\nimport IndicShaper from './IndicShaper';\nimport UniversalShaper from './UniversalShaper';\n\nconst SHAPERS = {\n  arab: ArabicShaper,    // Arabic\n  mong: ArabicShaper,    // Mongolian\n  syrc: ArabicShaper,    // Syriac\n  'nko ': ArabicShaper,  // N'Ko\n  phag: ArabicShaper,    // Phags Pa\n  mand: ArabicShaper,    // Mandaic\n  mani: ArabicShaper,    // Manichaean\n  phlp: ArabicShaper,    // Psalter Pahlavi\n\n  hang: HangulShaper,    // Hangul\n\n  bng2: IndicShaper,     // Bengali\n  beng: IndicShaper,     // Bengali\n  dev2: IndicShaper,     // Devanagari\n  deva: IndicShaper,     // Devanagari\n  gjr2: IndicShaper,     // Gujarati\n  gujr: IndicShaper,     // Gujarati\n  guru: IndicShaper,     // Gurmukhi\n  gur2: IndicShaper,     // Gurmukhi\n  knda: IndicShaper,     // Kannada\n  knd2: IndicShaper,     // Kannada\n  mlm2: IndicShaper,     // Malayalam\n  mlym: IndicShaper,     // Malayalam\n  ory2: IndicShaper,     // Oriya\n  orya: IndicShaper,     // Oriya\n  taml: IndicShaper,     // Tamil\n  tml2: IndicShaper,     // Tamil\n  telu: IndicShaper,     // Telugu\n  tel2: IndicShaper,     // Telugu\n  khmr: IndicShaper,     // Khmer\n\n  bali: UniversalShaper, // Balinese\n  batk: UniversalShaper, // Batak\n  brah: UniversalShaper, // Brahmi\n  bugi: UniversalShaper, // Buginese\n  buhd: UniversalShaper, // Buhid\n  cakm: UniversalShaper, // Chakma\n  cham: UniversalShaper, // Cham\n  dupl: UniversalShaper, // Duployan\n  egyp: UniversalShaper, // Egyptian Hieroglyphs\n  gran: UniversalShaper, // Grantha\n  hano: UniversalShaper, // Hanunoo\n  java: UniversalShaper, // Javanese\n  kthi: UniversalShaper, // Kaithi\n  kali: UniversalShaper, // Kayah Li\n  khar: UniversalShaper, // Kharoshthi\n  khoj: UniversalShaper, // Khojki\n  sind: UniversalShaper, // Khudawadi\n  lepc: UniversalShaper, // Lepcha\n  limb: UniversalShaper, // Limbu\n  mahj: UniversalShaper, // Mahajani\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: UniversalShaper, // Meitei Mayek\n  modi: UniversalShaper, // Modi\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: UniversalShaper, // Pahawh Hmong\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: UniversalShaper, // Rejang\n  saur: UniversalShaper, // Saurashtra\n  shrd: UniversalShaper, // Sharada\n  sidd: UniversalShaper, // Siddham\n  sinh: IndicShaper, // Sinhala\n  sund: UniversalShaper, // Sundanese\n  sylo: UniversalShaper, // Syloti Nagri\n  tglg: UniversalShaper, // Tagalog\n  tagb: UniversalShaper, // Tagbanwa\n  tale: UniversalShaper, // Tai Le\n  lana: UniversalShaper, // Tai Tham\n  tavt: UniversalShaper, // Tai Viet\n  takr: UniversalShaper, // Takri\n  tibt: UniversalShaper, // Tibetan\n  tfng: UniversalShaper, // Tifinagh\n  tirh: UniversalShaper, // Tirhuta\n\n  latn: DefaultShaper,   // Latin\n  DFLT: DefaultShaper    // Default\n};\n\nexport function choose(script) {\n  if (!Array.isArray(script)) {\n    script = [script];\n  }\n\n  for (let s of script) {\n    let shaper = SHAPERS[s];\n    if (shaper) {\n      return shaper;\n    }\n  }\n\n  return DefaultShaper;\n}\n","import {isDigit} from 'unicode-properties';\n\nconst VARIATION_FEATURES = ['rvrn'];\nconst COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nconst FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nconst HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nconst VERTICAL_FEATURES = ['vert'];\nconst DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\n\nexport default class DefaultShaper {\n  static zeroMarkWidths = 'AFTER_GPOS';\n  static plan(plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(plan);\n    this.planFeatures(plan);\n    this.planPostprocessing(plan, features);\n\n    // Assign the global features to all the glyphs\n    plan.assignGlobalFeatures(glyphs);\n\n    // Assign local features to glyphs\n    this.assignFeatures(plan, glyphs);\n  }\n\n  static planPreprocessing(plan) {\n    plan.add({\n      global: [...VARIATION_FEATURES, ...DIRECTIONAL_FEATURES[plan.direction]],\n      local: FRACTIONAL_FEATURES\n    });\n  }\n\n  static planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n  }\n\n  static planPostprocessing(plan, userFeatures) {\n    plan.add([...COMMON_FEATURES, ...HORIZONTAL_FEATURES]);\n    plan.setFeatureOverrides(userFeatures);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (let i = 0; i < glyphs.length; i++) {\n      let glyph = glyphs[i];\n      if (glyph.codePoints[0] === 0x2044) { // fraction slash\n        let start = i;\n        let end = i + 1;\n\n        // Apply numerator\n        while (start > 0 && isDigit(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        }\n\n        // Apply denominator\n        while (end < glyphs.length && isDigit(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        }\n\n        // Apply fraction slash\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  }\n}\n","import DefaultShaper from './DefaultShaper';\nimport {getCategory} from 'unicode-properties';\nimport UnicodeTrie from 'unicode-trie';\nimport { decodeBase64 } from '../../utils';\n\nconst trie = new UnicodeTrie(decodeBase64(require('fs').readFileSync(__dirname + '/data.trie', 'base64')));\nconst FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\n\nconst ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\n\nconst ISOL = 'isol';\nconst FINA = 'fina';\nconst FIN2 = 'fin2';\nconst FIN3 = 'fin3';\nconst MEDI = 'medi';\nconst MED2 = 'med2';\nconst INIT = 'init';\nconst NONE = null;\n\n// Each entry is [prevAction, curAction, nextState]\nconst STATE_TABLE = [\n  //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n  // State 0: prev was U,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 6 ] ],\n\n  // State 1: prev was R or ISOL/ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, FIN2, 5 ],  [ NONE, ISOL, 6 ] ],\n\n  // State 2: prev was D/L in ISOL form,  willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ INIT, FINA, 1 ],  [ INIT, FINA, 3 ],  [ INIT, FINA, 4 ],  [ INIT, FINA, 6 ] ],\n\n  // State 3: prev was D in FINA form,  willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ MEDI, FINA, 1 ],  [ MEDI, FINA, 3 ],  [ MEDI, FINA, 4 ],  [ MEDI, FINA, 6 ] ],\n\n  // State 4: prev was FINA ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ MED2, ISOL, 1 ],  [ MED2, ISOL, 2 ],  [ MED2, FIN2, 5 ],  [ MED2, ISOL, 6 ] ],\n\n  // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ ISOL, ISOL, 1 ],  [ ISOL, ISOL, 2 ],  [ ISOL, FIN2, 5 ],  [ ISOL, ISOL, 6 ] ],\n\n  // State 6: prev was DALATH/RISH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, FIN3, 5 ],  [ NONE, ISOL, 6 ] ]\n];\n\n/**\n * This is a shaper for Arabic, and other cursive scripts.\n * It uses data from ArabicShaping.txt in the Unicode database,\n * compiled to a UnicodeTrie by generate-data.coffee.\n *\n * The shaping state machine was ported from Harfbuzz.\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc\n */\nexport default class ArabicShaper extends DefaultShaper {\n  static planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n    for (let i = 0; i < FEATURES.length; i++) {\n      let feature = FEATURES[i];\n      plan.addStage(feature, false);\n    }\n\n    plan.addStage('mset');\n  }\n\n  static assignFeatures(plan, glyphs) {\n    super.assignFeatures(plan, glyphs);\n\n    let prev = -1;\n    let state = 0;\n    let actions = [];\n\n    // Apply the state machine to map glyphs to features\n    for (let i = 0; i < glyphs.length; i++) {\n      let curAction, prevAction;\n      var glyph = glyphs[i];\n      let type = getShapingClass(glyph.codePoints[0]);\n      if (type === ShapingClasses.Transparent) {\n        actions[i] = NONE;\n        continue;\n      }\n\n      [prevAction, curAction, state] = STATE_TABLE[state][type];\n\n      if (prevAction !== NONE && prev !== -1) {\n        actions[prev] = prevAction;\n      }\n\n      actions[i] = curAction;\n      prev = i;\n    }\n\n    // Apply the chosen features to their respective glyphs\n    for (let index = 0; index < glyphs.length; index++) {\n      let feature;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) {\n        glyph.features[feature] = true;\n      }\n    }\n  }\n}\n\nfunction getShapingClass(codePoint) {\n  let res = trie.get(codePoint);\n  if (res) {\n    return res - 1;\n  }\n\n  let category = getCategory(codePoint);\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') {\n    return ShapingClasses.Transparent;\n  }\n\n  return ShapingClasses.Non_Joining;\n}\n","import DefaultShaper from './DefaultShaper';\nimport GlyphInfo from '../GlyphInfo';\n\n/**\n * This is a shaper for the Hangul script, used by the Korean language.\n * It does the following:\n *   - decompose if unsupported by the font:\n *     <LV>   -> <L,V>\n *     <LVT>  -> <L,V,T>\n *     <LV,T> -> <L,V,T>\n *\n *   - compose if supported by the font:\n *     <L,V>   -> <LV>\n *     <L,V,T> -> <LVT>\n *     <LV,T>  -> <LVT>\n *\n *   - reorder tone marks (S is any valid syllable):\n *     <S, M> -> <M, S>\n *\n *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.\n *\n * This logic is based on the following documents:\n *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm\n *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf\n */\nexport default class HangulShaper extends DefaultShaper {\n  static zeroMarkWidths = 'NONE';\n  static planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    let state = 0;\n    let i = 0;\n    while (i < glyphs.length) {\n      let action;\n      let glyph = glyphs[i];\n      let code = glyph.codePoints[0];\n      let type = getType(code);\n\n      [ action, state ] = STATE_TABLE[state][type];\n\n      switch (action) {\n        case DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) {\n            i = decompose(glyphs, i, plan.font);\n          }\n          break;\n\n        case COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = compose(glyphs, i, plan.font);\n          break;\n\n        case TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          reorderToneMark(glyphs, i, plan.font);\n          break;\n\n        case INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n\n      i++;\n    }\n  }\n}\n\nconst HANGUL_BASE  = 0xac00;\nconst HANGUL_END   = 0xd7a4;\nconst HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;\nconst L_BASE  = 0x1100; // lead\nconst V_BASE  = 0x1161; // vowel\nconst T_BASE  = 0x11a7; // trail\nconst L_COUNT = 19;\nconst V_COUNT = 21;\nconst T_COUNT = 28;\nconst L_END   = L_BASE + L_COUNT - 1;\nconst V_END   = V_BASE + V_COUNT - 1;\nconst T_END   = T_BASE + T_COUNT - 1;\nconst DOTTED_CIRCLE = 0x25cc;\n\nconst isL    = code => 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\nconst isV    = code => 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\nconst isT    = code => 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\nconst isTone = code => 0x302e <= code && code <= 0x302f;\nconst isLVT  = code => HANGUL_BASE <= code && code <= HANGUL_END;\nconst isLV   = code => (code - HANGUL_BASE) < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;\nconst isCombiningL = code => L_BASE <= code && code <= L_END;\nconst isCombiningV = code => V_BASE <= code && code <= V_END;\nconst isCombiningT = code => T_BASE + 1 && 1 <= code && code <= T_END;\n\n// Character categories\nconst X   = 0; // Other character\nconst L   = 1; // Leading consonant\nconst V   = 2; // Medial vowel\nconst T   = 3; // Trailing consonant\nconst LV  = 4; // Composed <LV> syllable\nconst LVT = 5; // Composed <LVT> syllable\nconst M   = 6; // Tone mark\n\n// This function classifies a character using the above categories.\nfunction getType(code) {\n  if (isL(code))    { return L; }\n  if (isV(code))    { return V; }\n  if (isT(code))    { return T; }\n  if (isLV(code))   { return LV; }\n  if (isLVT(code))  { return LVT; }\n  if (isTone(code)) { return M; }\n  return X;\n}\n\n// State machine actions\nconst NO_ACTION = 0;\nconst DECOMPOSE = 1;\nconst COMPOSE   = 2;\nconst TONE_MARK = 4;\nconst INVALID   = 5;\n\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nconst STATE_TABLE = [\n  //       X                 L                 V                T                  LV                LVT               M\n  // State 0: start state\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [  INVALID, 0  ] ],\n\n  // State 1: <L>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [  COMPOSE, 2  ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [  INVALID, 0  ] ],\n\n  // State 2: <L,V> or <LV>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [  COMPOSE, 3  ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [ TONE_MARK, 0 ] ],\n\n  // State 3: <L,V,T> or <LVT>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [ TONE_MARK, 0 ] ]\n];\n\nfunction getGlyph(font, code, features) {\n  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);\n}\n\nfunction decompose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyph.codePoints[0];\n\n  let s = code - HANGUL_BASE;\n  let t = T_BASE + s % T_COUNT;\n  s = s / T_COUNT | 0;\n  let l = L_BASE + s / V_COUNT | 0;\n  let v = V_BASE + s % V_COUNT;\n\n  // Don't decompose if all of the components are not available\n  if (!font.hasGlyphForCodePoint(l) ||\n      !font.hasGlyphForCodePoint(v) ||\n      (t !== T_BASE && !font.hasGlyphForCodePoint(t))) {\n    return i;\n  }\n\n  // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n  let ljmo = getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n\n  let vjmo = getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n\n  let insert = [ ljmo, vjmo ];\n\n  if (t > T_BASE) {\n    let tjmo = getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n\n  glyphs.splice(i, 1, ...insert);\n  return i + insert.length - 1;\n}\n\nfunction compose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  let type = getType(code);\n\n  let prev = glyphs[i - 1].codePoints[0];\n  let prevType = getType(prev);\n\n  // Figure out what type of syllable we're dealing with\n  let lv, ljmo, vjmo, tjmo;\n  if (prevType === LV && type === T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n\n    let l = ljmo.codePoints[0];\n    let v = vjmo.codePoints[0];\n\n    // Make sure L and V are combining characters\n    if (isCombiningL(l) && isCombiningV(v)) {\n      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;\n    }\n  }\n\n  let t = (tjmo && tjmo.codePoints[0]) || T_BASE;\n  if ((lv != null) && (t === T_BASE || isCombiningT(t))) {\n    let s = lv + (t - T_BASE);\n\n    // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n    if (font.hasGlyphForCodePoint(s)) {\n      let del = prevType === V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  }\n\n  // Didn't compose (either a non-combining component or unsupported by font).\n  if (ljmo) { ljmo.features.ljmo = true; }\n  if (vjmo) { vjmo.features.vjmo = true; }\n  if (tjmo) { tjmo.features.tjmo = true; }\n\n  if (prevType === LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction getLength(code) {\n  switch (getType(code)) {\n    case LV:\n    case LVT:\n      return 1;\n    case V:\n      return 2;\n    case T:\n      return 3;\n  }\n}\n\nfunction reorderToneMark(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n\n  // Move tone mark to the beginning of the previous syllable, unless it is zero width\n  if (font.glyphForCodePoint(code).advanceWidth === 0) { return; }\n\n  let prev = glyphs[i - 1].codePoints[0];\n  let len = getLength(prev);\n\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\n\nfunction insertDottedCircle(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n\n  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {\n    let dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features);\n\n    // If the tone mark is zero width, insert the dotted circle before, otherwise after\n    let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n\n  return i;\n}\n","import {isMark} from 'unicode-properties';\nimport OTProcessor from './OTProcessor';\n\nexport default class GlyphInfo {\n  constructor(font, id, codePoints = [], features) {\n    this._font = font;\n    this.codePoints = codePoints;\n    this.id = id;\n\n    this.features = {};\n    if (Array.isArray(features)) {\n      for (let i = 0; i < features.length; i++) {\n        let feature = features[i];\n        this.features[feature] = true;\n      }\n    } else if (typeof features === 'object') {\n      Object.assign(this.features, features);\n    }\n\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(id) {\n    this._id = id;\n    this.substituted = true;\n\n    let GDEF = this._font.GDEF;\n    if (GDEF && GDEF.glyphClassDef) {\n      // TODO: clean this up\n      let classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);\n      this.isBase = classID === 1;\n      this.isLigature = classID === 2;\n      this.isMark = classID === 3;\n      this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n    } else {\n      this.isMark = this.codePoints.length > 0 && this.codePoints.every(isMark);\n      this.isBase = !this.isMark;\n      this.isLigature = this.codePoints.length > 1;\n      this.markAttachmentType = 0;\n    }\n  }\n\n  copy() {\n    return new GlyphInfo(this._font, this.id, this.codePoints, this.features);\n  }\n}\n","import GlyphIterator from './GlyphIterator';\nimport * as Script from '../layout/Script';\n\nconst DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\n\nexport default class OTProcessor {\n  constructor(font, table) {\n    this.font = font;\n    this.table = table;\n\n    this.script = null;\n    this.scriptTag = null;\n\n    this.language = null;\n    this.languageTag = null;\n\n    this.features = {};\n    this.lookups = {};\n\n    // Setup variation substitutions\n    this.variationsIndex = font._variationProcessor\n      ? this.findVariationsIndex(font._variationProcessor.normalizedCoords)\n      : -1;\n\n    // initialize to default script + language\n    this.selectScript();\n\n    // current context (set by applyFeatures)\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n\n  findScript(script) {\n    if (this.table.scriptList == null) {\n      return null;\n    }\n\n    if (!Array.isArray(script)) {\n      script = [script];\n    }\n\n    for (let s of script) {\n      for (let entry of this.table.scriptList) {\n        if (entry.tag === s) {\n          return entry;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  selectScript(script, language, direction) {\n    let changed = false;\n    let entry;\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) {\n        entry = this.findScript(DEFAULT_SCRIPTS);\n      }\n\n      if (!entry) {\n        return this.scriptTag;\n      }\n\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n\n    if (!direction || direction !== this.direction) {\n      this.direction = direction || Script.direction(script);\n    }\n\n    if (language && language.length < 4) {\n      language += ' '.repeat(4 - language.length);\n    }\n\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n\n      for (let lang of this.script.langSysRecords) {\n        if (lang.tag === language) {\n          this.language = lang.langSys;\n          this.languageTag = lang.tag;\n          break;\n        }\n      }\n\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n\n      changed = true;\n    }\n\n    // Build a feature lookup table\n    if (changed) {\n      this.features = {};\n      if (this.language) {\n        for (let featureIndex of this.language.featureIndexes) {\n          let record = this.table.featureList[featureIndex];\n          let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n          this.features[record.tag] = substituteFeature || record.feature;\n        }\n      }\n    }\n\n    return this.scriptTag;\n  }\n\n  lookupsForFeatures(userFeatures = [], exclude) {\n    let lookups = [];\n    for (let tag of userFeatures) {\n      let feature = this.features[tag];\n      if (!feature) {\n        continue;\n      }\n\n      for (let lookupIndex of feature.lookupListIndexes) {\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) {\n          continue;\n        }\n\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n\n    lookups.sort((a, b) => a.index - b.index);\n    return lookups;\n  }\n\n  substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) {\n      return null;\n    }\n\n    let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    let substitutions = record.featureTableSubstitution.substitutions;\n    for (let substitution of substitutions) {\n      if (substitution.featureIndex === featureIndex) {\n        return substitution.alternateFeatureTable;\n      }\n    }\n\n    return null;\n  }\n\n  findVariationsIndex(coords) {\n    let variations = this.table.featureVariations;\n    if (!variations) {\n      return -1;\n    }\n\n    let records = variations.featureVariationRecords;\n    for (let i = 0; i < records.length; i++) {\n      let conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  variationConditionsMatch(conditions, coords) {\n    return conditions.every(condition => {\n      let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    let lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  }\n\n  applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new GlyphIterator(glyphs);\n\n    for (let { feature, lookup } of lookups) {\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n\n        for (let table of lookup.subTables) {\n          let res = this.applyLookup(lookup.lookupType, table);\n          if (res) {\n            break;\n          }\n        }\n\n        this.glyphIterator.next();\n      }\n    }\n  }\n\n  applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  }\n\n  applyLookupList(lookupRecords) {\n    let options = this.glyphIterator.options;\n    let glyphIndex = this.glyphIterator.index;\n\n    for (let lookupRecord of lookupRecords) {\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex);\n\n      // Get the lookup and setup flags for subtables\n      let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n\n      // Apply lookup subtables until one matches\n      for (let table of lookup.subTables) {\n        if (this.applyLookup(lookup.lookupType, table)) {\n          break;\n        }\n      }\n    }\n\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  }\n\n  coverageIndex(coverage, glyph) {\n    if (glyph == null) {\n      glyph = this.glyphIterator.cur.id;\n    }\n\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n\n      case 2:\n        for (let range of coverage.rangeRecords) {\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.startCoverageIndex + glyph - range.start;\n          }\n        }\n\n        break;\n    }\n\n    return -1;\n  }\n\n  match(sequenceIndex, sequence, fn, matched) {\n    let pos = this.glyphIterator.index;\n    let glyph = this.glyphIterator.increment(sequenceIndex);\n    let idx = 0;\n\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) {\n        matched.push(this.glyphIterator.index);\n      }\n\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) {\n      return false;\n    }\n\n    return matched || true;\n  }\n\n  sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);\n  }\n\n  sequenceMatchIndices(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => {\n      // If the current feature doesn't apply to this glyph,\n      if (!(this.currentFeature in glyph.features)) {\n        return false;\n      }\n\n      return component === glyph.id;\n    }, []);\n  }\n\n  coverageSequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (coverage, glyph) =>\n      this.coverageIndex(coverage, glyph.id) >= 0\n    );\n  }\n\n  getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1: // Class array\n        let i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) {\n          return classDef.classValueArray[i];\n        }\n\n        break;\n\n      case 2:\n        for (let range of classDef.classRangeRecord) {\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.class;\n          }\n        }\n\n        break;\n    }\n\n    return 0;\n  }\n\n  classSequenceMatches(sequenceIndex, sequence, classDef) {\n    return this.match(sequenceIndex, sequence, (classID, glyph) =>\n      classID === this.getClassID(glyph.id, classDef)\n    );\n  }\n\n  applyContext(table) {\n    let index, set;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        set = table.ruleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(1, rule.input)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) {\n          return false;\n        }\n\n        set = table.classSet[index];\n        for (let rule of set) {\n          if (this.classSequenceMatches(1, rule.classes, table.classDef)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n\n  applyChainingContext(table) {\n    let index;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        let set = table.chainRuleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack)\n            && this.sequenceMatches(1, rule.input)\n            && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        let rules = table.chainClassSet[index];\n        if (!rules) {\n          return false;\n        }\n\n        for (let rule of rules) {\n          if (this.classSequenceMatches(-rule.backtrack.length, rule.backtrack, table.backtrackClassDef) &&\n            this.classSequenceMatches(1, rule.input, table.inputClassDef) &&\n            this.classSequenceMatches(1 + rule.input.length, rule.lookahead, table.lookaheadClassDef)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) &&\n          this.coverageSequenceMatches(0, table.inputCoverage) &&\n          this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n}\n","export default class GlyphIterator {\n  constructor(glyphs, options) {\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n\n  reset(options = {}, index = 0) {\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  }\n\n  get cur() {\n    return this.glyphs[this.index] || null;\n  }\n\n  shouldIgnore(glyph) {\n    return (this.flags.ignoreMarks && glyph.isMark) ||\n           (this.flags.ignoreBaseGlyphs && glyph.isBase) ||\n           (this.flags.ignoreLigatures && glyph.isLigature) ||\n           (this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType);\n  }\n\n  move(dir) {\n    this.index += dir;\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {\n      this.index += dir;\n    }\n\n    if (0 > this.index || this.index >= this.glyphs.length) {\n      return null;\n    }\n\n    return this.glyphs[this.index];\n  }\n\n  next() {\n    return this.move(+1);\n  }\n\n  prev() {\n    return this.move(-1);\n  }\n\n  peek(count = 1) {\n    let idx = this.index;\n    let res = this.increment(count);\n    this.index = idx;\n    return res;\n  }\n\n  peekIndex(count = 1) {\n    let idx = this.index;\n    this.increment(count);\n    let res = this.index;\n    this.index = idx;\n    return res;\n  }\n\n  increment(count = 1) {\n    let dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n    while (count--) {\n      this.move(dir);\n    }\n\n    return this.glyphs[this.index];\n  }\n}\n","import DefaultShaper from './DefaultShaper';\nimport StateMachine from 'dfa';\nimport UnicodeTrie from 'unicode-trie';\nimport {getCategory} from 'unicode-properties';\nimport * as Script from '../../layout/Script';\nimport GlyphInfo from '../GlyphInfo';\nimport indicMachine from './indic.json';\nimport useData from './use.json';\nimport {\n  CATEGORIES,\n  POSITIONS,\n  CONSONANT_FLAGS,\n  JOINER_FLAGS,\n  HALANT_OR_COENG_FLAGS, INDIC_CONFIGS,\n  INDIC_DECOMPOSITIONS\n} from './indic-data';\nimport { decodeBase64 } from '../../utils';\n\nconst {decompositions} = useData;\nconst trie = new UnicodeTrie(decodeBase64(require('fs').readFileSync(__dirname + '/indic.trie', 'base64')));\nconst stateMachine = new StateMachine(indicMachine);\n\n/**\n * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.\n * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc\n */\nexport default class IndicShaper extends DefaultShaper {\n  static zeroMarkWidths = 'NONE';\n  static planFeatures(plan) {\n    plan.addStage(setupSyllables);\n\n    plan.addStage(['locl', 'ccmp']);\n\n    plan.addStage(initialReordering);\n\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n\n    plan.addStage(finalReordering);\n\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    });\n\n    // Setup the indic config for the selected script\n    plan.unicodeScript = Script.fromOpenType(plan.script);\n    plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';\n\n    // TODO: turn off kern (Khmer) and liga features.\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      let d = INDIC_DECOMPOSITIONS[codepoint] || decompositions[codepoint];\n      if (d) {\n        let decomposed = d.map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\n\nfunction indicCategory(glyph) {\n  return trie.get(glyph.codePoints[0]) >> 8;\n}\n\nfunction indicPosition(glyph) {\n  return 1 << (trie.get(glyph.codePoints[0]) & 0xff);\n}\n\nclass IndicInfo {\n  constructor(category, position, syllableType, syllable) {\n    this.category = category;\n    this.position = position;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\n\nfunction setupSyllables(font, glyphs) {\n  let syllable = 0;\n  let last = 0;\n  for (let [start, end, tags] of stateMachine.match(glyphs.map(indicCategory))) {\n    if (start > last) {\n      ++syllable;\n      for (let i = last; i < start; i++) {\n        glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n      }\n    }\n\n    ++syllable;\n\n    // Create shaper info\n    for (let i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(\n        1 << indicCategory(glyphs[i]),\n        indicPosition(glyphs[i]),\n        tags[0],\n        syllable\n      );\n    }\n\n    last = end + 1;\n  }\n\n  if (last < glyphs.length) {\n    ++syllable;\n    for (let i = last; i < glyphs.length; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n    }\n  }\n}\n\nfunction isConsonant(glyph) {\n  return glyph.shaperInfo.category & CONSONANT_FLAGS;\n}\n\nfunction isJoiner(glyph) {\n  return glyph.shaperInfo.category & JOINER_FLAGS;\n}\n\nfunction isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;\n}\n\nfunction wouldSubstitute(glyphs, feature) {\n  for (let glyph of glyphs) {\n    glyph.features = {[feature]: true};\n  }\n\n  let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n\n  return glyphs.length === 1;\n}\n\nfunction consonantPosition(font, consonant, virama) {\n  let glyphs = [virama, consonant, virama];\n  if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {\n    return POSITIONS.Below_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {\n    return POSITIONS.Post_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {\n    return POSITIONS.Post_C;\n  }\n\n  return POSITIONS.Base_C;\n}\n\nfunction initialReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  let virama = font.glyphForCodePoint(indicConfig.virama).id;\n  if (virama) {\n    let info = new GlyphInfo(font, virama, [indicConfig.virama]);\n    for (let i = 0; i < glyphs.length; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);\n      }\n    }\n  }\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    let {category, syllableType} = glyphs[start].shaperInfo;\n\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {\n      continue;\n    }\n\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      let g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new IndicInfo(\n        1 << indicCategory(g),\n        indicPosition(g),\n        glyphs[start].shaperInfo.syllableType,\n        glyphs[start].shaperInfo.syllable\n      );\n\n      // Insert after possible Repha.\n      let i = start;\n      while (i < end && glyphs[i].shaperInfo.category === CATEGORIES.Repha) {\n        i++;\n      }\n\n      glyphs.splice(i++, 0, g);\n      end++;\n    }\n\n    // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n\n    let base = end;\n    let limit = start;\n    let hasReph = false;\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph &&\n      features.rphf &&\n      start + 3 <= end && (\n        (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2])) ||\n        (indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)\n      )\n    ) {\n      // See if it matches the 'rphf' feature.\n      let g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n      if (wouldSubstitute(g.slice(0, 2), 'rphf') || (indicConfig.rephMode === 'Explicit' && wouldSubstitute(g, 'rphf'))) {\n        limit += 2;\n        while (limit < end && isJoiner(glyphs[limit])) {\n          limit++;\n        }\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {\n      limit++;\n      while (limit < end && isJoiner(glyphs[limit])) {\n        limit++;\n      }\n      base = start;\n      hasReph = true;\n    }\n\n    switch (indicConfig.basePos) {\n      case 'Last': {\n        // starting from the end of the syllable, move backwards\n        let i = end;\n        let seenBelow = false;\n\n        do {\n          let info = glyphs[--i].shaperInfo;\n\n          // until a consonant is found\n          if (isConsonant(glyphs[i])) {\n            // that does not have a below-base or post-base form\n            // (post-base forms have to follow below-base forms),\n            if (info.position !== POSITIONS.Below_C && (info.position !== POSITIONS.Post_C || seenBelow)) {\n              base = i;\n              break;\n            }\n\n            // or that is not a pre-base reordering Ra,\n            //\n            // IMPLEMENTATION NOTES:\n            //\n            // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n            // by the logic above already.\n            //\n\n            // or arrive at the first consonant. The consonant stopped at will\n            // be the base.\n            if (info.position === POSITIONS.Below_C) {\n              seenBelow = true;\n            }\n\n            base = i;\n          } else if (start < i && info.category === CATEGORIES.ZWJ && glyphs[i - 1].shaperInfo.category === CATEGORIES.H) {\n            // A ZWJ after a Halant stops the base search, and requests an explicit\n            // half form.\n            // A ZWJ before a Halant, requests a subjoined form instead, and hence\n            // search continues.  This is particularly important for Bengali\n            // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.\n            break;\n          }\n        } while (i > limit);\n        break;\n      }\n\n      case 'First': {\n        // The first consonant is always the base.\n        base = start;\n\n        // Mark all subsequent consonants as below.\n        for (let i = base + 1; i < end; i++) {\n          if (isConsonant(glyphs[i])) {\n            glyphs[i].shaperInfo.position = POSITIONS.Below_C;\n          }\n        }\n      }\n    }\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n    if (hasReph && base === start && limit - base <= 2) {\n      hasReph = false;\n    }\n\n    // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n\n    // Reorder characters\n\n    for (let i = start; i < base; i++) {\n      let info = glyphs[i].shaperInfo;\n      info.position = Math.min(POSITIONS.Pre_C, info.position);\n    }\n\n    if (base < end) {\n      glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n    }\n\n    // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n    for (let i = base + 1; i < end; i++) {\n      if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n        for (let j = i + 1; j < end; j++) {\n          if (isConsonant(glyphs[j])) {\n            glyphs[j].shaperInfo.position = POSITIONS.Final_C;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    // Handle beginning Ra\n    if (hasReph) {\n      glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;\n    }\n\n    // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n    if (plan.isOldSpec) {\n      let disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n      for (let i = base + 1; i < end; i++) {\n        if (glyphs[i].shaperInfo.category === CATEGORIES.H) {\n          let j;\n          for (j = end - 1; j > i; j--) {\n            if (isConsonant(glyphs[j]) || (disallowDoubleHalants && glyphs[j].shaperInfo.category === CATEGORIES.H)) {\n              break;\n            }\n          }\n\n          if (glyphs[j].shaperInfo.category !== CATEGORIES.H && j > i) {\n            // Move Halant to after last consonant.\n            let t = glyphs[i];\n            glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n            glyphs[j] = t;\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Attach misc marks to previous char to move with them.\n    let lastPos = POSITIONS.Start;\n    for (let i = start; i < end; i++) {\n      let info = glyphs[i].shaperInfo;\n      if (info.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & info.category)) {\n        info.position = lastPos;\n        if (info.category === CATEGORIES.H && info.position === POSITIONS.Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (let j = i; j > start; j--) {\n            if (glyphs[j - 1].shaperInfo.position !== POSITIONS.Pre_M) {\n              info.position = glyphs[j - 1].shaperInfo.position;\n              break;\n            }\n          }\n        }\n      } else if (info.position !== POSITIONS.SMVD) {\n        lastPos = info.position;\n      }\n    }\n\n    // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n    let last = base;\n    for (let i = base + 1; i < end; i++) {\n      if (isConsonant(glyphs[i])) {\n        for (let j = last + 1; j < i; j++) {\n          if (glyphs[j].shaperInfo.position < POSITIONS.SMVD) {\n            glyphs[j].shaperInfo.position = glyphs[i].shaperInfo.position;\n          }\n        }\n        last = i;\n      } else if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n        last = i;\n      }\n    }\n\n    let arr = glyphs.slice(start, end);\n    arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);\n    glyphs.splice(start, arr.length, ...arr);\n\n    // Find base again\n    for (let i = start; i < end; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        base = i;\n        break;\n      }\n    }\n\n    // Setup features now\n\n    // Reph\n    for (let i = start; i < end && glyphs[i].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; i++) {\n      glyphs[i].features.rphf = true;\n    }\n\n    // Pre-base\n    let blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n    for (let i = start; i < base; i++) {\n      glyphs[i].features.half = true;\n      if (blwf) {\n        glyphs[i].features.blwf = true;\n      }\n    }\n\n    // Post-base\n    for (let i = base + 1; i < end; i++) {\n      glyphs[i].features.abvf = true;\n      glyphs[i].features.pstf = true;\n      glyphs[i].features.blwf = true;\n    }\n\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (let i = start; i + 1 < base; i++) {\n        if (glyphs[i].shaperInfo.category === CATEGORIES.Ra &&\n          glyphs[i + 1].shaperInfo.category === CATEGORIES.H &&\n          (i + 1 === base || glyphs[i + 2].shaperInfo.category === CATEGORIES.ZWJ)\n        ) {\n          glyphs[i].features.blwf = true;\n          glyphs[i + 1].features.blwf = true;\n        }\n      }\n    }\n\n    let prefLen = 2;\n    if (features.pref && base + prefLen < end) {\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (let i = base + 1; i + prefLen - 1 < end; i++) {\n        let g = [glyphs[i].copy(), glyphs[i + 1].copy()];\n        if (wouldSubstitute(g, 'pref')) {\n          for (let j = 0; j < prefLen; j++) {\n            glyphs[i++].features.pref = true;\n          }\n\n          // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n          if (features.cfar) {\n            for (; i < end; i++) {\n              glyphs[i].features.cfar = true;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply ZWJ/ZWNJ effects\n    for (let i = start + 1; i < end; i++) {\n      if (isJoiner(glyphs[i])) {\n        let nonJoiner = glyphs[i].shaperInfo.category === CATEGORIES.ZWNJ;\n        let j = i;\n\n        do {\n          j--;\n\n          // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n          // being there, since we don't skip them for the CJCT\n          // feature (ie. F_MANUAL_ZWJ)\n\n          // A ZWNJ disables HALF.\n          if (nonJoiner) {\n            delete glyphs[j].features.half;\n          }\n        } while (j > start && !isConsonant(glyphs[j]));\n      }\n    }\n  }\n}\n\nfunction finalReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n\n    let tryPref = !!features.pref;\n\n    // Find base again\n    let base = start;\n    for (; base < end; base++) {\n      if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {\n        if (tryPref && base + 1 < end) {\n          for (let i = base + 1; i < end; i++) {\n            if (glyphs[i].features.pref) {\n              if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                // Ok, this was a 'pref' candidate but didn't form any.\n                // Base is around here...\n                base = i;\n                while (base < end && isHalantOrCoeng(glyphs[base])) {\n                  base++;\n                }\n                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;\n                tryPref = false;\n              }\n              break;\n            }\n          }\n        }\n\n        // For Malayalam, skip over unformed below- (but NOT post-) forms.\n        if (plan.unicodeScript === 'Malayalam') {\n          for (let i = base + 1; i < end; i++) {\n            while (i < end && isJoiner(glyphs[i])) {\n              i++;\n            }\n\n            if (i === end || !isHalantOrCoeng(glyphs[i])) {\n              break;\n            }\n\n            i++; // Skip halant.\n            while (i < end && isJoiner(glyphs[i])) {\n              i++;\n            }\n\n            if (i < end && isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === POSITIONS.Below_C) {\n              base = i;\n              glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n            }\n          }\n        }\n\n        if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {\n          base--;\n        }\n        break;\n      }\n    }\n\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {\n      base--;\n    }\n\n    if (base < end) {\n      while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {\n        base--;\n      }\n    }\n\n    // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n\n    if (start + 1 < end && start < base) { // Otherwise there can't be any pre-base matra characters.\n      // If we lost track of base, alas, position before last thingy.\n      let newPos = base === end ? base - 2 : base - 1;\n\n      // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n          newPos--;\n        }\n\n        // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n        if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {\n            newPos++;\n          }\n        } else {\n          newPos = start; // No move.\n        }\n      }\n\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n        // Now go see if there's actually any matras...\n        for (let i = newPos; i > start; i--) {\n          if (glyphs[i - 1].shaperInfo.position === POSITIONS.Pre_M) {\n            let oldPos = i - 1;\n            if (oldPos < base && base <= newPos) { // Shouldn't actually happen.\n              base--;\n            }\n\n            let tmp = glyphs[oldPos];\n            glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n            glyphs[newPos] = tmp;\n\n            newPos--;\n          }\n        }\n      }\n    }\n\n    // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n    if (start + 1 < end &&\n      glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph &&\n      (glyphs[start].shaperInfo.category === CATEGORIES.Repha) !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)\n    ) {\n      let newRephPos;\n      let rephPos = indicConfig.rephPos;\n      let found = false;\n\n      // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n      if (rephPos !== POSITIONS.After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n\n        // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n        if (!found && rephPos === POSITIONS.After_Main) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n\n        // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n        if (!found && rephPos === POSITIONS.After_Sub) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n      }\n\n      //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n      }\n\n      // 6. Otherwise, reorder reph to the end of the syllable.\n      if (!found) {\n        newRephPos = end - 1;\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {\n          newRephPos--;\n        }\n\n        // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n        if (isHalantOrCoeng(glyphs[newRephPos])) {\n          for (let i = base + 1; i < newRephPos; i++) {\n            if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n              newRephPos--;\n            }\n          }\n        }\n      }\n\n      let reph = glyphs[start];\n      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n      glyphs[newRephPos] = reph;\n\n      if (start < base && base <= newRephPos) {\n        base--;\n      }\n    }\n\n    // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n    if (tryPref && base + 1 < end) {\n      for (let i = base + 1; i < end; i++) {\n        if (glyphs[i].features.pref) {\n           // 1. Only reorder a glyph produced by substitution during application\n           //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n           //    the feature generally but block it in certain contexts.)\n\n          // Note: We just check that something got substituted.  We don't check that\n          // the <pref> feature actually did it...\n          //\n          // Reorder pref only if it ligated.\n          if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n            // 2. Try to find a target position the same way as for pre-base matra.\n            //    If it is found, reorder pre-base consonant glyph.\n            //\n            // 3. If position is not found, reorder immediately before main\n            //    consonant.\n            let newPos = base;\n\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n              while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n                newPos--;\n              }\n\n              // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n              // split matra, it should be reordered to *before* the left part of such matra.\n              if (newPos > start && glyphs[newPos - 1].shaperInfo.category === CATEGORIES.M) {\n                let oldPos = i;\n                for (let j = base + 1; j < oldPos; j++) {\n                  if (glyphs[j].shaperInfo.category === CATEGORIES.M) {\n                    newPos--;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (newPos > start && isHalantOrCoeng(glyphs[newPos - 1])) {\n              // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n              if (newPos < end && isJoiner(glyphs[newPos])) {\n                newPos++;\n              }\n            }\n\n            let oldPos = i;\n            let tmp = glyphs[oldPos];\n            glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n            glyphs[newPos] = tmp;\n\n            if (newPos <= base && base < oldPos) {\n              base++;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply 'init' to the Left Matra if it's a word start.\n    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(getCategory(glyphs[start - 1].codePoints[0])))) {\n      glyphs[start].features.init = true;\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\n","{\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\"accepting\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"symbol_cluster\"],[],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"standalone_cluster\"]]}","{\"categories\":[\"O\",\"IND\",\"S\",\"GB\",\"B\",\"FM\",\"CGJ\",\"VMAbv\",\"VMPst\",\"VAbv\",\"VPst\",\"CMBlw\",\"VPre\",\"VBlw\",\"H\",\"VMBlw\",\"CMAbv\",\"MBlw\",\"CS\",\"R\",\"SUB\",\"MPst\",\"MPre\",\"FAbv\",\"FPst\",\"FBlw\",\"SMAbv\",\"SMBlw\",\"VMPre\",\"ZWNJ\",\"ZWJ\",\"WJ\",\"VS\",\"N\",\"HN\",\"MAbv\"],\"decompositions\":{\"2507\":[2503,2494],\"2508\":[2503,2519],\"2888\":[2887,2902],\"2891\":[2887,2878],\"2892\":[2887,2903],\"3018\":[3014,3006],\"3019\":[3015,3006],\"3020\":[3014,3031],\"3144\":[3142,3158],\"3264\":[3263,3285],\"3271\":[3270,3285],\"3272\":[3270,3286],\"3274\":[3270,3266],\"3275\":[3270,3266,3285],\"3402\":[3398,3390],\"3403\":[3399,3390],\"3404\":[3398,3415],\"3546\":[3545,3530],\"3548\":[3545,3535],\"3549\":[3545,3535,3530],\"3550\":[3545,3551],\"3635\":[3661,3634],\"3763\":[3789,3762],\"3955\":[3953,3954],\"3957\":[3953,3956],\"3958\":[4018,3968],\"3959\":[4018,3953,3968],\"3960\":[4019,3968],\"3961\":[4019,3953,3968],\"3969\":[3953,3968],\"6971\":[6970,6965],\"6973\":[6972,6965],\"6976\":[6974,6965],\"6977\":[6975,6965],\"6979\":[6978,6965],\"69934\":[69937,69927],\"69935\":[69938,69927],\"70475\":[70471,70462],\"70476\":[70471,70487],\"70843\":[70841,70842],\"70844\":[70841,70832],\"70846\":[70841,70845],\"71098\":[71096,71087],\"71099\":[71097,71087]},\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\"accepting\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"virama_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"number_joiner_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"numeral_cluster\"]]}","// Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\nexport const CATEGORIES = {\n  X: 1 << 0,\n  C: 1 << 1,\n  V: 1 << 2,\n  N: 1 << 3,\n  H: 1 << 4,\n  ZWNJ: 1 << 5,\n  ZWJ: 1 << 6,\n  M: 1 << 7,\n  SM: 1 << 8,\n  VD: 1 << 9,\n  A: 1 << 10,\n  Placeholder: 1 << 11,\n  Dotted_Circle: 1 << 12,\n  RS: 1 << 13,    // Register Shifter, used in Khmer OT spec.\n  Coeng: 1 << 14, // Khmer-style Virama.\n  Repha: 1 << 15, // Atomically-encoded logical or visual repha.\n  Ra: 1 << 16,\n  CM: 1 << 17,    // Consonant-Medial.\n  Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).\n};\n\n// Visual positions in a syllable from left to right.\nexport const POSITIONS = {\n  Start: 1 << 0,\n\n  Ra_To_Become_Reph: 1 << 1,\n  Pre_M: 1 << 2,\n  Pre_C: 1 << 3,\n\n  Base_C: 1 << 4,\n  After_Main: 1 << 5,\n\n  Above_C: 1 << 6,\n\n  Before_Sub: 1 << 7,\n  Below_C: 1 << 8,\n  After_Sub: 1 << 9,\n\n  Before_Post: 1 << 10,\n  Post_C: 1 << 11,\n  After_Post: 1 << 12,\n\n  Final_C: 1 << 13,\n  SMVD: 1 << 14,\n\n  End: 1 << 15\n};\n\nexport const CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;\nexport const JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;\nexport const HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;\n\nexport const INDIC_CONFIGS = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: POSITIONS.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n};\n\n// Additional decompositions that aren't in Unicode\nexport const INDIC_DECOMPOSITIONS = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\n","import DefaultShaper from './DefaultShaper';\nimport StateMachine from 'dfa';\nimport UnicodeTrie from 'unicode-trie';\nimport GlyphInfo from '../GlyphInfo';\nimport useData from './use.json';\nimport { decodeBase64 } from '../../utils';\n\nconst {categories, decompositions} = useData;\nconst trie = new UnicodeTrie(decodeBase64(require('fs').readFileSync(__dirname + '/use.trie', 'base64')));\nconst stateMachine = new StateMachine(useData);\n\n/**\n * This shaper is an implementation of the Universal Shaping Engine, which\n * uses Unicode data to shape a number of scripts without a dedicated shaping engine.\n * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.\n */\nexport default class UniversalShaper extends DefaultShaper {\n  static zeroMarkWidths = 'BEFORE_GPOS';\n  static planFeatures(plan) {\n    plan.addStage(setupSyllables);\n\n    // Default glyph pre-processing group\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);\n\n    // Reordering group\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage(recordRphf);\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage(recordPref);\n\n    // Orthographic unit shaping group\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage(reorder);\n\n    // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n\n    // Standard topographic presentation and positional feature application\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      if (decompositions[codepoint]) {\n        let decomposed = decompositions[codepoint].map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\n\nfunction useCategory(glyph) {\n  return trie.get(glyph.codePoints[0]);\n}\n\nclass USEInfo {\n  constructor(category, syllableType, syllable) {\n    this.category = category;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\n\nfunction setupSyllables(font, glyphs) {\n  let syllable = 0;\n  for (let [start, end, tags] of stateMachine.match(glyphs.map(useCategory))) {\n    ++syllable;\n\n    // Create shaper info\n    for (let i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new USEInfo(categories[useCategory(glyphs[i])], tags[0], syllable);\n    }\n\n    // Assign rphf feature\n    let limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n    for (let i = start; i < start + limit; i++) {\n      glyphs[i].features.rphf = true;\n    }\n  }\n}\n\nfunction clearSubstitutionFlags(font, glyphs) {\n  for (let glyph of glyphs) {\n    glyph.substituted = false;\n  }\n}\n\nfunction recordRphf(font, glyphs) {\n  for (let glyph of glyphs) {\n    if (glyph.substituted && glyph.features.rphf) {\n      // Mark a substituted repha.\n      glyph.shaperInfo.category = 'R';\n    }\n  }\n}\n\nfunction recordPref(font, glyphs) {\n  for (let glyph of glyphs) {\n    if (glyph.substituted) {\n      // Mark a substituted pref as VPre, as they behave the same way.\n      glyph.shaperInfo.category = 'VPre';\n    }\n  }\n}\n\nfunction reorder(font, glyphs) {\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    let i, j;\n    let info = glyphs[start].shaperInfo;\n    let type = info.syllableType;\n\n    // Only a few syllable types need reordering.\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {\n      continue;\n    }\n\n    // Insert a dotted circle glyph in broken clusters.\n    if (type === 'broken_cluster' && dottedCircle) {\n      let g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info;\n\n      // Insert after possible Repha.\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++);\n      glyphs.splice(++i, 0, g);\n      end++;\n    }\n\n    // Move things forward.\n    if (info.category === 'R' && end - start > 1) {\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n        if (isBase(info) || isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if (isHalant(glyphs[i])) {\n            i--;\n          }\n\n          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n          break;\n        }\n      }\n    }\n\n    // Move things back.\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if (isBase(info) || isHalant(glyphs[i])) {\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = isHalant(glyphs[i]) ? i + 1 : i;\n      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {\n        glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n      }\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\n\nfunction isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\n\nfunction isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\n","import OTProcessor from './OTProcessor';\nimport GlyphInfo from './GlyphInfo';\n\nexport default class GSUBProcessor extends OTProcessor {\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1: { // Single Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        let glyph = this.glyphIterator.cur;\n        switch (table.version) {\n          case 1:\n            glyph.id = (glyph.id + table.deltaGlyphID) & 0xffff;\n            break;\n\n          case 2:\n            glyph.id = table.substitute.get(index);\n            break;\n        }\n\n        return true;\n      }\n\n      case 2: { // Multiple Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index !== -1) {\n          let sequence = table.sequences.get(index);\n\n          if (sequence.length === 0) {\n            // If the sequence length is zero, delete the glyph.\n            // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n            this.glyphs.splice(this.glyphIterator.index, 1);\n            return true;\n          }\n\n          this.glyphIterator.cur.id = sequence[0];\n          this.glyphIterator.cur.ligatureComponent = 0;\n\n          let features = this.glyphIterator.cur.features;\n          let curGlyph = this.glyphIterator.cur;\n          let replacement = sequence.slice(1).map((gid, i) => {\n            let glyph = new GlyphInfo(this.font, gid, undefined, features);\n            glyph.shaperInfo = curGlyph.shaperInfo;\n            glyph.isLigated = curGlyph.isLigated;\n            glyph.ligatureComponent = i + 1;\n            glyph.substituted = true;\n            glyph.isMultiplied = true;\n            return glyph;\n          });\n\n          this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n          return true;\n        }\n\n        return false;\n      }\n\n      case 3: { // Alternate Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index !== -1) {\n          let USER_INDEX = 0; // TODO\n          this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n          return true;\n        }\n\n        return false;\n      }\n\n      case 4: { // Ligature Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        for (let ligature of table.ligatureSets.get(index)) {\n          let matched = this.sequenceMatchIndices(1, ligature.components);\n          if (!matched) {\n            continue;\n          }\n\n          let curGlyph = this.glyphIterator.cur;\n\n          // Concatenate all of the characters the new ligature will represent\n          let characters = curGlyph.codePoints.slice();\n          for (let index of matched) {\n            characters.push(...this.glyphs[index].codePoints);\n          }\n\n          // Create the replacement ligature glyph\n          let ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, curGlyph.features);\n          ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n          ligatureGlyph.isLigated = true;\n          ligatureGlyph.substituted = true;\n\n          // From Harfbuzz:\n          // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n          //   the ligature to keep its old ligature id.  This will allow it to attach to\n          //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n          //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n          //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n          //   later, we don't want them to lose their ligature id/component, otherwise\n          //   GPOS will fail to correctly position the mark ligature on top of the\n          //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n          //\n          // - If a ligature is formed of components that some of which are also ligatures\n          //   themselves, and those ligature components had marks attached to *their*\n          //   components, we have to attach the marks to the new ligature component\n          //   positions!  Now *that*'s tricky!  And these marks may be following the\n          //   last component of the whole sequence, so we should loop forward looking\n          //   for them and update them.\n          //\n          //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n          //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n          //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n          //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n          //   the new ligature with a component value of 2.\n          //\n          //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n          let isMarkLigature = curGlyph.isMark;\n          for (let i = 0; i < matched.length && isMarkLigature; i++) {\n            isMarkLigature = this.glyphs[matched[i]].isMark;\n          }\n\n          ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n\n          let lastLigID = curGlyph.ligatureID;\n          let lastNumComps = curGlyph.codePoints.length;\n          let curComps = lastNumComps;\n          let idx = this.glyphIterator.index + 1;\n\n          // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n          // This allows GPOS to attach marks to the correct ligature components.\n          for (let matchIndex of matched) {\n            // Don't assign new ligature components for mark ligatures (see above)\n            if (isMarkLigature) {\n              idx = matchIndex;\n            } else {\n              while (idx < matchIndex) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                idx++;\n              }\n            }\n\n            lastLigID = this.glyphs[idx].ligatureID;\n            lastNumComps = this.glyphs[idx].codePoints.length;\n            curComps += lastNumComps;\n            idx++; // skip base glyph\n          }\n\n          // Adjust ligature components for any marks following\n          if (lastLigID && !isMarkLigature) {\n            for (let i = idx; i < this.glyphs.length; i++) {\n              if (this.glyphs[i].ligatureID === lastLigID) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i].ligatureComponent || 1, lastNumComps);\n                this.glyphs[i].ligatureComponent = ligatureComponent;\n              } else {\n                break;\n              }\n            }\n          }\n\n          // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n          for (let i = matched.length - 1; i >= 0; i--) {\n            this.glyphs.splice(matched[i], 1);\n          }\n\n          this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n          return true;\n        }\n\n        return false;\n      }\n\n      case 5: // Contextual Substitution\n        return this.applyContext(table);\n\n      case 6: // Chaining Contextual Substitution\n        return this.applyChainingContext(table);\n\n      case 7: // Extension Substitution\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n    }\n  }\n}\n","import OTProcessor from './OTProcessor';\n\nexport default class GPOSProcessor extends OTProcessor {\n  applyPositionValue(sequenceIndex, value) {\n    let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) {\n      position.xAdvance += value.xAdvance;\n    }\n\n    if (value.yAdvance != null) {\n      position.yAdvance += value.yAdvance;\n    }\n\n    if (value.xPlacement != null) {\n      position.xOffset += value.xPlacement;\n    }\n\n    if (value.yPlacement != null) {\n      position.yOffset += value.yPlacement;\n    }\n\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) {\n        position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      }\n\n      if (value.yPlaDevice) {\n        position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      }\n\n      if (value.xAdvDevice) {\n        position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      }\n\n      if (value.yAdvDevice) {\n        position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n      }\n    }\n\n    // TODO: device tables\n  }\n\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1: { // Single positioning value\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        switch (table.version) {\n          case 1:\n            this.applyPositionValue(0, table.value);\n            break;\n\n          case 2:\n            this.applyPositionValue(0, table.values.get(index));\n            break;\n        }\n\n        return true;\n      }\n\n      case 2: { // Pair Adjustment Positioning\n        let nextGlyph = this.glyphIterator.peek();\n        if (!nextGlyph) {\n          return false;\n        }\n\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        switch (table.version) {\n          case 1: // Adjustments for glyph pairs\n            let set = table.pairSets.get(index);\n\n            for (let pair of set) {\n              if (pair.secondGlyph === nextGlyph.id) {\n                this.applyPositionValue(0, pair.value1);\n                this.applyPositionValue(1, pair.value2);\n                return true;\n              }\n            }\n\n            return false;\n\n          case 2: // Class pair adjustment\n            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n            let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n            if (class1 === -1 || class2 === -1) {\n              return false;\n            }\n\n            var pair = table.classRecords.get(class1).get(class2);\n            this.applyPositionValue(0, pair.value1);\n            this.applyPositionValue(1, pair.value2);\n            return true;\n        }\n      }\n\n      case 3: { // Cursive Attachment Positioning\n        let nextIndex = this.glyphIterator.peekIndex();\n        let nextGlyph = this.glyphs[nextIndex];\n        if (!nextGlyph) {\n          return false;\n        }\n\n        let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n        if (!curRecord || !curRecord.exitAnchor) {\n          return false;\n        }\n\n        let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n        if (!nextRecord || !nextRecord.entryAnchor) {\n          return false;\n        }\n\n        let entry = this.getAnchor(nextRecord.entryAnchor);\n        let exit = this.getAnchor(curRecord.exitAnchor);\n\n        let cur = this.positions[this.glyphIterator.index];\n        let next = this.positions[nextIndex];\n        let d;\n\n        switch (this.direction) {\n          case 'ltr':\n            cur.xAdvance = exit.x + cur.xOffset;\n\n            d = entry.x + next.xOffset;\n            next.xAdvance -= d;\n            next.xOffset -= d;\n            break;\n\n          case 'rtl':\n            d = exit.x + cur.xOffset;\n            cur.xAdvance -= d;\n            cur.xOffset -= d;\n            next.xAdvance = entry.x + next.xOffset;\n            break;\n        }\n\n        if (this.glyphIterator.flags.rightToLeft) {\n          this.glyphIterator.cur.cursiveAttachment = nextIndex;\n          cur.yOffset = entry.y - exit.y;\n        } else {\n          nextGlyph.cursiveAttachment = this.glyphIterator.index;\n          cur.yOffset = exit.y - entry.y;\n        }\n\n        return true;\n      }\n\n      case 4: { // Mark to base positioning\n        let markIndex = this.coverageIndex(table.markCoverage);\n        if (markIndex === -1) {\n          return false;\n        }\n\n        // search backward for a base glyph\n        let baseGlyphIndex = this.glyphIterator.index;\n        while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n\n        if (baseGlyphIndex < 0) {\n          return false;\n        }\n\n        let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n        if (baseIndex === -1) {\n          return false;\n        }\n\n        let markRecord = table.markArray[markIndex];\n        let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n        return true;\n      }\n\n      case 5: { // Mark to ligature positioning\n        let markIndex = this.coverageIndex(table.markCoverage);\n        if (markIndex === -1) {\n          return false;\n        }\n\n        // search backward for a base glyph\n        let baseGlyphIndex = this.glyphIterator.index;\n        while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n\n        if (baseGlyphIndex < 0) {\n          return false;\n        }\n\n        let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n        if (ligIndex === -1) {\n          return false;\n        }\n\n        let ligAttach = table.ligatureArray[ligIndex];\n        let markGlyph = this.glyphIterator.cur;\n        let ligGlyph = this.glyphs[baseGlyphIndex];\n        let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && (markGlyph.ligatureComponent > 0)\n          ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1\n          : ligGlyph.codePoints.length - 1;\n\n        let markRecord = table.markArray[markIndex];\n        let baseAnchor = ligAttach[compIndex][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n        return true;\n      }\n\n      case 6: { // Mark to mark positioning\n        let mark1Index = this.coverageIndex(table.mark1Coverage);\n        if (mark1Index === -1) {\n          return false;\n        }\n\n        // get the previous mark to attach to\n        let prevIndex = this.glyphIterator.peekIndex(-1);\n        let prev = this.glyphs[prevIndex];\n        if (!prev || !prev.isMark) {\n          return false;\n        }\n\n        let cur = this.glyphIterator.cur;\n\n        // The following logic was borrowed from Harfbuzz\n        let good = false;\n        if (cur.ligatureID === prev.ligatureID) {\n          if (!cur.ligatureID) { // Marks belonging to the same base\n            good = true;\n          } else if (cur.ligatureComponent === prev.ligatureComponent) { // Marks belonging to the same ligature component\n            good = true;\n          }\n        } else {\n          // If ligature ids don't match, it may be the case that one of the marks\n          // itself is a ligature, in which case match.\n          if ((cur.ligatureID && !cur.ligatureComponent) || (prev.ligatureID && !prev.ligatureComponent)) {\n            good = true;\n          }\n        }\n\n        if (!good) {\n          return false;\n        }\n\n        let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n        if (mark2Index === -1) {\n          return false;\n        }\n\n        let markRecord = table.mark1Array[mark1Index];\n        let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, prevIndex);\n        return true;\n      }\n\n      case 7: // Contextual positioning\n        return this.applyContext(table);\n\n      case 8: // Chaining contextual positioning\n        return this.applyChainingContext(table);\n\n      case 9: // Extension positioning\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(`Unsupported GPOS table: ${lookupType}`);\n    }\n  }\n\n  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    let baseCoords = this.getAnchor(baseAnchor);\n    let markCoords = this.getAnchor(markRecord.markAnchor);\n\n    let basePos = this.positions[baseGlyphIndex];\n    let markPos = this.positions[this.glyphIterator.index];\n\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  }\n\n  getAnchor(anchor) {\n    // TODO: contour point, device tables\n    let x = anchor.xCoordinate;\n    let y = anchor.yCoordinate;\n\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) {\n        x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      }\n\n      if (anchor.yDeviceTable) {\n        y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n      }\n    }\n\n    return { x, y };\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    super.applyFeatures(userFeatures, glyphs, advances);\n\n    for (var i = 0; i < this.glyphs.length; i++) {\n      this.fixCursiveAttachment(i);\n    }\n\n    this.fixMarkAttachment();\n  }\n\n  fixCursiveAttachment(i) {\n    let glyph = this.glyphs[i];\n    if (glyph.cursiveAttachment != null) {\n      let j = glyph.cursiveAttachment;\n\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  }\n\n  fixMarkAttachment() {\n    for (let i = 0; i < this.glyphs.length; i++) {\n      let glyph = this.glyphs[i];\n      if (glyph.markAttachment != null) {\n        let j = glyph.markAttachment;\n\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n\n        if (this.direction === 'ltr') {\n          for (let k = j; k < i; k++) {\n            this.positions[i].xOffset -= this.positions[k].xAdvance;\n            this.positions[i].yOffset -= this.positions[k].yAdvance;\n          }\n        } else {\n          for (let k = j + 1; k < i + 1; k++) {\n            this.positions[i].xOffset += this.positions[k].xAdvance;\n            this.positions[i].yOffset += this.positions[k].yAdvance;\n          }\n        }\n      }\n    }\n  }\n}\n","import Glyph from './Glyph';\nimport Path from './Path';\nimport BBox from './BBox';\nimport * as r from 'restructure';\n\n// The header for both simple and composite glyphs\nlet GlyfHeader = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin:             r.int16,\n  yMin:             r.int16,\n  xMax:             r.int16,\n  yMax:             r.int16\n});\n\n// Flags for simple glyphs\nconst ON_CURVE        = 1 << 0;\nconst X_SHORT_VECTOR  = 1 << 1;\nconst Y_SHORT_VECTOR  = 1 << 2;\nconst REPEAT          = 1 << 3;\nconst SAME_X          = 1 << 4;\nconst SAME_Y          = 1 << 5;\n\n// Flags for composite glyphs\nconst ARG_1_AND_2_ARE_WORDS     = 1 << 0;\nconst ARGS_ARE_XY_VALUES        = 1 << 1;\nconst ROUND_XY_TO_GRID          = 1 << 2;\nconst WE_HAVE_A_SCALE           = 1 << 3;\nconst MORE_COMPONENTS           = 1 << 5;\nconst WE_HAVE_AN_X_AND_Y_SCALE  = 1 << 6;\nconst WE_HAVE_A_TWO_BY_TWO      = 1 << 7;\nconst WE_HAVE_INSTRUCTIONS      = 1 << 8;\nconst USE_MY_METRICS            = 1 << 9;\nconst OVERLAP_COMPOUND          = 1 << 10;\nconst SCALED_COMPONENT_OFFSET   = 1 << 11;\nconst UNSCALED_COMPONENT_OFFSET = 1 << 12;\n\n// Represents a point in a simple glyph\nexport class Point {\n  constructor(onCurve, endContour, x = 0, y = 0) {\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n\n  copy() {\n    return new Point(this.onCurve, this.endContour, this.x, this.y);\n  }\n}\n\n// Represents a component in a composite glyph\nclass Component {\n  constructor(glyphID, dx, dy) {\n    this.glyphID = glyphID;\n    this.dx = dx;\n    this.dy = dy;\n    this.pos = 0;\n    this.scaleX = this.scaleY = 1;\n    this.scale01 = this.scale10 = 0;\n  }\n}\n\n/**\n * Represents a TrueType glyph.\n */\nexport default class TTFGlyph extends Glyph {\n  type = 'TTF';\n\n  // Parses just the glyph header and returns the bounding box\n  _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) {\n      return this.path.cbox;\n    }\n\n    let stream = this._font._getTableStream('glyf');\n    stream.pos += this._font.loca.offsets[this.id];\n    let glyph = GlyfHeader.decode(stream);\n\n    let cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  }\n\n  // Parses a single glyph coordinate\n  _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) {\n        val = -val;\n      }\n\n      val += prev;\n    } else {\n      if (same) {\n        var val = prev;\n      } else {\n        var val = prev + stream.readInt16BE();\n      }\n    }\n\n    return val;\n  }\n\n  // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n  _decode() {\n    let glyfPos = this._font.loca.offsets[this.id];\n    let nextPos = this._font.loca.offsets[this.id + 1];\n\n    // Nothing to do if there is no data for this glyph\n    if (glyfPos === nextPos) { return null; }\n\n    let stream = this._font._getTableStream('glyf');\n    stream.pos += glyfPos;\n    let startPos = stream.pos;\n\n    let glyph = GlyfHeader.decode(stream);\n\n    if (glyph.numberOfContours > 0) {\n      this._decodeSimple(glyph, stream);\n\n    } else if (glyph.numberOfContours < 0) {\n      this._decodeComposite(glyph, stream, startPos);\n    }\n\n    return glyph;\n  }\n\n  _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n\n    let endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);\n\n    let flags = [];\n    let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag);\n\n      // check for repeat flag\n      if (flag & REPEAT) {\n        let count = stream.readUInt8();\n        for (let j = 0; j < count; j++) {\n          flags.push(flag);\n        }\n      }\n    }\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      let point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n\n    let px = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);\n    }\n\n    let py = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);\n    }\n\n    if (this._font._variationProcessor) {\n      let points = glyph.points.slice();\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.slice(-4);\n    }\n\n    return;\n  }\n\n  _decodeComposite(glyph, stream, offset = 0) {\n    // this is a composite glyph\n    glyph.components = [];\n    let haveInstructions = false;\n    let flags = MORE_COMPONENTS;\n\n    while (flags & MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      let gPos = stream.pos - offset;\n      let glyphID = stream.readUInt16BE();\n      if (!haveInstructions) {\n        haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;\n      }\n\n      if (flags & ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n\n      var component = new Component(glyphID, dx, dy);\n      component.pos = gPos;\n\n      if (flags & WE_HAVE_A_SCALE) {\n        // fixed number with 14 bits of fraction\n        component.scaleX =\n        component.scaleY = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n\n      } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scaleY = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n\n      } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX  = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scale01 = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scale10 = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scaleY  = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n      }\n\n      glyph.components.push(component);\n    }\n\n    if (this._font._variationProcessor) {\n      let points = [];\n      for (let j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new Point(true, true, component.dx, component.dy));\n      }\n\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.splice(-4, 4);\n\n      for (let i = 0; i < points.length; i++) {\n        let point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n\n    return haveInstructions;\n  }\n\n  _getPhantomPoints(glyph) {\n    let cbox = this._getCBox(true);\n    if (this._metrics == null) {\n      this._metrics = Glyph.prototype._getMetrics.call(this, cbox);\n    }\n\n    let { advanceWidth, advanceHeight, leftBearing, topBearing } = this._metrics;\n\n    return [\n      new Point(false, true, glyph.xMin - leftBearing, 0),\n      new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0),\n      new Point(false, true, 0, glyph.yMax + topBearing),\n      new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)\n    ];\n  }\n\n  // Decodes font data, resolves composite glyphs, and returns an array of contours\n  _getContours() {\n    let glyph = this._decode();\n    if (!glyph) {\n      return [];\n    }\n\n    let points = [];\n\n    if (glyph.numberOfContours < 0) {\n      // resolve composite glyphs\n      for (let component of glyph.components) {\n        let contours = this._font.getGlyph(component.glyphID)._getContours();\n        for (let i = 0; i < contours.length; i++) {\n          let contour = contours[i];\n          for (let j = 0; j < contour.length; j++) {\n            let point = contour[j];\n            let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n            let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n            points.push(new Point(point.onCurve, point.endContour, x, y));\n          }\n        }\n      }\n    } else {\n      points = glyph.points || [];\n    }\n\n    // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth  = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing   = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing    = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n\n    let contours = [];\n    let cur = [];\n    for (let k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n\n    return contours;\n  }\n\n  _getMetrics() {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    let cbox = this._getCBox(true);\n    super._getMetrics(cbox);\n\n    if (this._font._variationProcessor && !this._font.HVAR) {\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    }\n\n    return this._metrics;\n  }\n\n  // Converts contours to a Path object that can be rendered\n  _getPath() {\n    let contours = this._getContours();\n    let path = new Path;\n\n    for (let i = 0; i < contours.length; i++) {\n      let contour = contours[i];\n      let firstPt = contour[0];\n      let lastPt = contour[contour.length - 1];\n      let start = 0;\n\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve) {\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;\n        } else {\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        }\n\n        var curvePt = firstPt;\n      }\n\n      path.moveTo(firstPt.x, firstPt.y);\n\n      for (let j = start; j < contour.length; j++) {\n        let pt = contour[j];\n        let prevPt = j === 0 ? firstPt : contour[j - 1];\n\n        if (prevPt.onCurve && pt.onCurve) {\n          path.lineTo(pt.x, pt.y);\n\n        } else if (prevPt.onCurve && !pt.onCurve) {\n          var curvePt = pt;\n\n        } else if (!prevPt.onCurve && !pt.onCurve) {\n          let midX = (prevPt.x + pt.x) / 2;\n          let midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n\n        } else {\n          throw new Error(\"Unknown TTF path state\");\n        }\n      }\n\n      // Connect the first and last points\n      if (curvePt) {\n        path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      }\n\n      path.closePath();\n    }\n\n    return path;\n  }\n}\n","import { cache } from '../decorators';\nimport Path from './Path';\nimport {isMark} from 'unicode-properties';\nimport StandardNames from './StandardNames';\n\n/**\n * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and\n * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.\n *\n * You do not create glyph objects directly. They are created by various methods on the font object.\n * There are several subclasses of the base Glyph class internally that may be returned depending\n * on the font format, but they all inherit from this class.\n */\nexport default class Glyph {\n  constructor(id, codePoints, font) {\n    /**\n     * The glyph id in the font\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */\n    this.codePoints = codePoints;\n    this._font = font;\n\n    // TODO: get this info from GDEF if available\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every(isMark);\n    this.isLigature = this.codePoints.length > 1;\n  }\n\n  _getPath() {\n    return new Path();\n  }\n\n  _getCBox() {\n    return this.path.cbox;\n  }\n\n  _getBBox() {\n    return this.path.bbox;\n  }\n\n  _getTableMetrics(table) {\n    if (this.id < table.metrics.length) {\n      return table.metrics.get(this.id);\n    }\n\n    let metric = table.metrics.get(table.metrics.length - 1);\n    let res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n\n    return res;\n  }\n\n  _getMetrics(cbox) {\n    if (this._metrics) { return this._metrics; }\n\n    let {advance:advanceWidth, bearing:leftBearing} = this._getTableMetrics(this._font.hmtx);\n\n    // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n    if (this._font.vmtx) {\n      var {advance:advanceHeight, bearing:topBearing} = this._getTableMetrics(this._font.vmtx);\n\n    } else {\n      let os2;\n      if (typeof cbox === 'undefined' || cbox === null) { ({ cbox } = this); }\n\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n\n      } else {\n        let { hhea } = this._font;\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n\n    if (this._font._variationProcessor && this._font.HVAR) {\n      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    }\n\n    return this._metrics = { advanceWidth, advanceHeight, leftBearing, topBearing };\n  }\n\n  /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */\n  @cache\n  get cbox() {\n    return this._getCBox();\n  }\n\n  /**\n   * The glyph’s bounding box, i.e. the rectangle that encloses the\n   * glyph outline as tightly as possible.\n   * @type {BBox}\n   */\n  @cache\n  get bbox() {\n    return this._getBBox();\n  }\n\n  /**\n   * A vector Path object representing the glyph outline.\n   * @type {Path}\n   */\n  @cache\n  get path() {\n    // Cache the path so we only decode it once\n    // Decoding is actually performed by subclasses\n    return this._getPath();\n  }\n\n  /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */\n  getScaledPath(size) {\n    let scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  }\n\n  /**\n   * The glyph's advance width.\n   * @type {number}\n   */\n  @cache\n  get advanceWidth() {\n    return this._getMetrics().advanceWidth;\n  }\n\n  /**\n   * The glyph's advance height.\n   * @type {number}\n   */\n  @cache\n  get advanceHeight() {\n    return this._getMetrics().advanceHeight;\n  }\n\n  get ligatureCaretPositions() {}\n\n  _getName() {\n    let { post } = this._font;\n    if (!post) {\n      return null;\n    }\n\n    switch (post.version) {\n      case 1:\n        return StandardNames[this.id];\n\n      case 2:\n        let id = post.glyphNameIndex[this.id];\n        if (id < StandardNames.length) {\n          return StandardNames[id];\n        }\n\n        return post.names[id - StandardNames.length];\n\n      case 2.5:\n        return StandardNames[this.id + post.offsets[this.id]];\n\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  }\n\n  /**\n   * The glyph's name\n   * @type {string}\n   */\n  @cache\n  get name() {\n    return this._getName();\n  }\n\n  /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */\n  render(ctx, size) {\n    ctx.save();\n\n    let scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n\n    let fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n\n    ctx.restore();\n  }\n}\n","import BBox from './BBox';\n\nconst SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\n\n/**\n * Path objects are returned by glyphs and represent the actual\n * vector outlines for each glyph in the font. Paths can be converted\n * to SVG path data strings, or to functions that can be applied to\n * render the path to a graphics context.\n */\nexport default class Path {\n  constructor() {\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n\n  /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */\n  toFunction() {\n    return ctx => {\n      this.commands.forEach(c => {\n        return ctx[c.command].apply(ctx, c.args)\n      })\n    };\n  }\n\n  /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */\n  toSVG() {\n    let cmds = this.commands.map(c => {\n      let args = c.args.map(arg => Math.round(arg * 100) / 100);\n      return `${SVG_COMMANDS[c.command]}${args.join(' ')}`;\n    });\n\n    return cmds.join('');\n  }\n\n  /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */\n  get cbox() {\n    if (!this._cbox) {\n      let cbox = new BBox;\n      for (let command of this.commands) {\n        for (let i = 0; i < command.args.length; i += 2) {\n          cbox.addPoint(command.args[i], command.args[i + 1]);\n        }\n      }\n\n      this._cbox = Object.freeze(cbox);\n    }\n\n    return this._cbox;\n  }\n\n  /**\n   * Gets the exact bounding box of the path by evaluating curve segments.\n   * Slower to compute than the control box, but more accurate.\n   * @type {BBox}\n   */\n  get bbox() {\n    if (this._bbox) {\n      return this._bbox;\n    }\n\n    let bbox = new BBox;\n    let cx = 0, cy = 0;\n\n    let f = t => (\n      Math.pow(1 - t, 3) * p0[i]\n        + 3 * Math.pow(1 - t, 2) * t * p1[i]\n        + 3 * (1 - t) * Math.pow(t, 2) * p2[i]\n        + Math.pow(t, 3) * p3[i]\n    );\n\n    for (let c of this.commands) {\n      switch (c.command) {\n        case 'moveTo':\n        case 'lineTo':\n          let [x, y] = c.args;\n          bbox.addPoint(x, y);\n          cx = x;\n          cy = y;\n          break;\n\n        case 'quadraticCurveTo':\n        case 'bezierCurveTo':\n          if (c.command === 'quadraticCurveTo') {\n            // http://fontforge.org/bezier.html\n            var [qp1x, qp1y, p3x, p3y] = c.args;\n            var cp1x = cx + 2 / 3 * (qp1x - cx);    // CP1 = QP0 + 2/3 * (QP1-QP0)\n            var cp1y = cy + 2 / 3 * (qp1y - cy);\n            var cp2x = p3x + 2 / 3 * (qp1x - p3x);  // CP2 = QP2 + 2/3 * (QP1-QP2)\n            var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n          } else {\n            var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n          }\n\n          // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n          bbox.addPoint(p3x, p3y);\n\n          var p0 = [cx, cy];\n          var p1 = [cp1x, cp1y];\n          var p2 = [cp2x, cp2y];\n          var p3 = [p3x, p3y];\n\n          for (var i = 0; i <= 1; i++) {\n            let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            c = 3 * p1[i] - 3 * p0[i];\n\n            if (a === 0) {\n              if (b === 0) {\n                continue;\n              }\n\n              let t = -c / b;\n              if (0 < t && t < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t));\n                }\n              }\n\n              continue;\n            }\n\n            let b2ac = Math.pow(b, 2) - 4 * c * a;\n            if (b2ac < 0) {\n              continue;\n            }\n\n            let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n              if (i === 0) {\n                bbox.addPoint(f(t1), bbox.maxY);\n              } else if (i === 1) {\n                bbox.addPoint(bbox.maxX, f(t1));\n              }\n            }\n\n            let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n              if (i === 0) {\n                bbox.addPoint(f(t2), bbox.maxY);\n              } else if (i === 1) {\n                bbox.addPoint(bbox.maxX, f(t2));\n              }\n            }\n          }\n\n          cx = p3x;\n          cy = p3y;\n          break;\n      }\n    }\n\n    return this._bbox = Object.freeze(bbox);\n  }\n\n  /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */\n  mapPoints(fn) {\n    let path = new Path;\n\n    for (let c of this.commands) {\n      let args = [];\n      for (let i = 0; i < c.args.length; i += 2) {\n        let [x, y] = fn(c.args[i], c.args[i + 1]);\n        args.push(x, y);\n      }\n\n      path[c.command](...args);\n    }\n\n    return path;\n  }\n\n  /**\n   * Transforms the path by the given matrix.\n   */\n  transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints((x, y) => {\n      const tx = m0 * x + m2 * y + m4;\n      const ty = m1 * x + m3 * y + m5;\n      return [tx, ty];\n    });\n  }\n\n  /**\n   * Translates the path by the given offset.\n   */\n  translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  }\n\n  /**\n   * Rotates the path by the given angle (in radians).\n   */\n  rotate(angle) {\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  }\n\n  /**\n   * Scales the path.\n   */\n  scale(scaleX, scaleY = scaleX) {\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  }\n}\n\nfor (let command of ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath']) {\n  Path.prototype[command] = function(...args) {\n    this._bbox = this._cbox = null;\n    this.commands.push({\n      command,\n      args\n    });\n\n    return this;\n  };\n}\n","export default [\n  '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n  'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n  'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n  'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n  'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n  'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n  'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n  'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n  'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n  'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n  'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n  'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n  'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n  'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n  'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n  'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n  'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n  'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n  'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n  'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n  'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n  'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n  'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'\n];\n","import Glyph from './Glyph';\nimport Path from './Path';\n\n/**\n * Represents an OpenType PostScript glyph, in the Compact Font Format.\n */\nexport default class CFFGlyph extends Glyph {\n  type = 'CFF';\n\n  _getName() {\n    if (this._font.CFF2) {\n      return super._getName();\n    }\n\n    return this._font['CFF '].getGlyphName(this.id);\n  }\n\n  bias(s) {\n    if (s.length < 1240) {\n      return 107;\n    } else if (s.length < 33900) {\n      return 1131;\n    } else {\n      return 32768;\n    }\n  }\n\n  _getPath() {\n    let cff = this._font.CFF2 || this._font['CFF '];\n    let { stream } = cff;\n    let str = cff.topDict.CharStrings[this.id];\n    let end = str.offset + str.length;\n    stream.pos = str.offset;\n\n    let path = new Path;\n    let stack = [];\n    let trans = [];\n\n    let width = null;\n    let nStems = 0;\n    let x = 0, y = 0;\n    let usedGsubrs;\n    let usedSubrs;\n    let open = false;\n\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n\n    let gsubrs = cff.globalSubrIndex || [];\n    let gsubrsBias = this.bias(gsubrs);\n\n    let privateDict = cff.privateDictForGlyph(this.id) || {};\n    let subrs = privateDict.Subrs || [];\n    let subrsBias = this.bias(subrs);\n\n    let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    let vsindex = privateDict.vsindex;\n    let variationProcessor = this._font._variationProcessor;\n\n    function checkWidth() {\n      if (width == null) {\n        width = stack.shift() + privateDict.nominalWidthX;\n      }\n    }\n\n    function parseStems() {\n      if (stack.length % 2 !== 0) {\n        checkWidth();\n      }\n\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n\n    function moveTo(x, y) {\n      if (open) {\n        path.closePath();\n      }\n\n      path.moveTo(x, y);\n      open = true;\n    }\n\n    let parse = function () {\n      while (stream.pos < end) {\n        let op = stream.readUInt8();\n        if (op < 32) {\n          let index, subr, phase;\n          switch (op) {\n            case 1:  // hstem\n            case 3:  // vstem\n            case 18: // hstemhm\n            case 23: // vstemhm\n              parseStems();\n              break;\n\n            case 4: // vmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 5: // rlineto\n              while (stack.length >= 2) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n              break;\n\n            case 6: // hlineto\n            case 7: // vlineto\n              phase = op === 6;\n              while (stack.length >= 1) {\n                if (phase) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                path.lineTo(x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 8: // rrcurveto\n              while (stack.length > 0) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 10: // callsubr\n              index = stack.pop() + subrsBias;\n              subr = subrs[index];\n              if (subr) {\n                usedSubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 11: // return\n              if (cff.version >= 2) {\n                break;\n              }\n              return;\n\n            case 14: // endchar\n              if (cff.version >= 2) {\n                break;\n              }\n\n              if (stack.length > 0) {\n                checkWidth();\n              }\n\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n              break;\n\n            case 15: { // vsindex\n              if (cff.version < 2) {\n                throw new Error('vsindex operator not supported in CFF v1');\n              }\n\n              vsindex = stack.pop();\n              break;\n            }\n\n            case 16: { // blend\n              if (cff.version < 2) {\n                throw new Error('blend operator not supported in CFF v1');\n              }\n\n              if (!variationProcessor) {\n                throw new Error('blend operator in non-variation font');\n              }\n\n              let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n              let numBlends = stack.pop();\n              let numOperands = numBlends * blendVector.length;\n              let delta = stack.length - numOperands;\n              let base = delta - numBlends;\n\n              for (let i = 0; i < numBlends; i++) {\n                let sum = stack[base + i];\n                for (let j = 0; j < blendVector.length; j++) {\n                  sum += blendVector[j] * stack[delta++];\n                }\n\n                stack[base + i] = sum;\n              }\n\n              while (numOperands--) {\n                stack.pop();\n              }\n\n              break;\n            }\n\n            case 19: // hintmask\n            case 20: // cntrmask\n              parseStems();\n              stream.pos += (nStems + 7) >> 3;\n              break;\n\n            case 21: // rmoveto\n              if (stack.length > 2) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 22: // hmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 24: // rcurveline\n              while (stack.length >= 8) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              path.lineTo(x, y);\n              break;\n\n            case 25: // rlinecurve\n              while (stack.length >= 8) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              var c1x = x + stack.shift();\n              var c1y = y + stack.shift();\n              var c2x = c1x + stack.shift();\n              var c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              y = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              break;\n\n            case 26: // vvcurveto\n              if (stack.length % 2) {\n                x += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x;\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x;\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 27: // hhcurveto\n              if (stack.length % 2) {\n                y += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x + stack.shift();\n                c1y = y;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 28: // shortint\n              stack.push(stream.readInt16BE());\n              break;\n\n            case 29: // callgsubr\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n              if (subr) {\n                usedGsubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 30: // vhcurveto\n            case 31: // hvcurveto\n              phase = op === 31;\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y = c2y + stack.shift();\n                  x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x;\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x = c2x + stack.shift();\n                  y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 12:\n              op = stream.readUInt8();\n              switch (op) {\n                case 3: // and\n                  let a = stack.pop();\n                  let b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n\n                case 4: // or\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n\n                case 5: // not\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n\n                case 9: // abs\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n\n                case 10: // add\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n\n                case 11: // sub\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n\n                case 12: // div\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n\n                case 14: // neg\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n\n                case 15: // eq\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n\n                case 18: // drop\n                  stack.pop();\n                  break;\n\n                case 20: // put\n                  let val = stack.pop();\n                  let idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n\n                case 21: // get\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n\n                case 22: // ifelse\n                  let s1 = stack.pop();\n                  let s2 = stack.pop();\n                  let v1 = stack.pop();\n                  let v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n\n                case 23: // random\n                  stack.push(Math.random());\n                  break;\n\n                case 24: // mul\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n\n                case 26: // sqrt\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n\n                case 27: // dup\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n\n                case 28: // exch\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n\n                case 29: // index\n                  idx = stack.pop();\n                  if (idx < 0) {\n                    idx = 0;\n                  } else if (idx > stack.length - 1) {\n                    idx = stack.length - 1;\n                  }\n\n                  stack.push(stack[idx]);\n                  break;\n\n                case 30: // roll\n                  let n = stack.pop();\n                  let j = stack.pop();\n\n                  if (j >= 0) {\n                    while (j > 0) {\n                      var t = stack[n - 1];\n                      for (let i = n - 2; i >= 0; i--) {\n                        stack[i + 1] = stack[i];\n                      }\n\n                      stack[0] = t;\n                      j--;\n                    }\n                  } else {\n                    while (j < 0) {\n                      var t = stack[0];\n                      for (let i = 0; i <= n; i++) {\n                        stack[i] = stack[i + 1];\n                      }\n\n                      stack[n - 1] = t;\n                      j++;\n                    }\n                  }\n                  break;\n\n                case 34: // hflex\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  let c3x = c2x + stack.shift();\n                  let c3y = c2y;\n                  let c4x = c3x + stack.shift();\n                  let c4y = c3y;\n                  let c5x = c4x + stack.shift();\n                  let c5y = c4y;\n                  let c6x = c5x + stack.shift();\n                  let c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 35: // flex\n                  let pts = [];\n\n                  for (let i = 0; i <= 5; i++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  stack.shift(); // fd\n                  break;\n\n                case 36: // hflex1\n                  c1x = x + stack.shift();\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 37: // flex1\n                  let startx = x;\n                  let starty = y;\n\n                  pts = [];\n                  for (let i = 0; i <= 4; i++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  if (Math.abs(x - startx) > Math.abs(y - starty)) { // horizontal\n                    x += stack.shift();\n                    y = starty;\n                  } else {\n                    x = startx;\n                    y += stack.shift();\n                  }\n\n                  pts.push(x, y);\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  break;\n\n                default:\n                  throw new Error(`Unknown op: 12 ${op}`);\n              }\n              break;\n\n            default:\n              throw new Error(`Unknown op: ${op}`);\n          }\n\n        } else if (op < 247) {\n          stack.push(op - 139);\n        } else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else {\n          stack.push(stream.readInt32BE() / 65536);\n        }\n      }\n    };\n\n    parse();\n\n    if (open) {\n      path.closePath();\n    }\n\n    return path;\n  }\n}\n","import TTFGlyph from './TTFGlyph';\nimport * as r from 'restructure';\n\nlet SBIXImage = new r.Struct({\n  originX: r.uint16,\n  originY: r.uint16,\n  type: new r.String(4),\n  data: new r.Buffer(t => t.parent.buflen - t._currentOffset)\n});\n\n/**\n * Represents a color (e.g. emoji) glyph in Apple's SBIX format.\n */\nexport default class SBIXGlyph extends TTFGlyph {\n  type = 'SBIX';\n\n  /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */\n  getImageForSize(size) {\n    for (let i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) { break; }\n    }\n\n    let offsets = table.imageOffsets;\n    let start = offsets[this.id];\n    let end = offsets[this.id + 1];\n\n    if (start === end) {\n      return null;\n    }\n\n    this._font.stream.pos = start;\n    return SBIXImage.decode(this._font.stream, {buflen: end - start});\n  }\n\n  render(ctx, size) {\n    let img = this.getImageForSize(size);\n    if (img != null) {\n      let scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, {height: size, x: img.originX, y: (this.bbox.minY - img.originY) * scale});\n    }\n\n    if (this._font.sbix.flags.renderOutlines) {\n      super.render(ctx, size);\n    }\n  }\n}\n","import Glyph from './Glyph';\nimport BBox from './BBox';\n\nclass COLRLayer {\n  constructor(glyph, color) {\n    this.glyph = glyph;\n    this.color = color;\n  }\n}\n\n/**\n * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.\n * Each glyph in this format contain a list of colored layers, each\n * of which  is another vector glyph.\n */\nexport default class COLRGlyph extends Glyph {\n  type = 'COLR';\n\n  _getBBox() {\n    let bbox = new BBox;\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      let b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n\n    return bbox;\n  }\n\n  /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */\n  get layers() {\n    let cpal = this._font.CPAL;\n    let colr = this._font.COLR;\n    let low = 0;\n    let high = colr.baseGlyphRecord.length - 1;\n\n    while (low <= high) {\n      let mid = (low + high) >> 1;\n      var rec = colr.baseGlyphRecord[mid];\n\n      if (this.id < rec.gid) {\n        high = mid - 1;\n      } else if (this.id > rec.gid) {\n        low = mid + 1;\n      } else {\n        var baseLayer = rec;\n        break;\n      }\n    }\n\n    // if base glyph not found in COLR table,\n    // default to normal glyph from glyf or CFF\n    if (baseLayer == null) {\n      var g = this._font._getBaseGlyph(this.id);\n      var color = {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 255\n      };\n\n      return [new COLRLayer(g, color)];\n    }\n\n    // otherwise, return an array of all the layers\n    let layers = [];\n    for (let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n      var rec = colr.layerRecords[i];\n      var color = cpal.colorRecords[rec.paletteIndex];\n      var g = this._font._getBaseGlyph(rec.gid);\n      layers.push(new COLRLayer(g, color));\n    }\n\n    return layers;\n  }\n\n  render(ctx, size) {\n    for (let {glyph, color} of this.layers) {\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n\n    return;\n  }\n}\n","const TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst TUPLE_COUNT_MASK           = 0x0fff;\nconst EMBEDDED_TUPLE_COORD       = 0x8000;\nconst INTERMEDIATE_TUPLE         = 0x4000;\nconst PRIVATE_POINT_NUMBERS      = 0x2000;\nconst TUPLE_INDEX_MASK           = 0x0fff;\nconst POINTS_ARE_WORDS           = 0x80;\nconst POINT_RUN_COUNT_MASK       = 0x7f;\nconst DELTAS_ARE_ZERO            = 0x80;\nconst DELTAS_ARE_WORDS           = 0x40;\nconst DELTA_RUN_COUNT_MASK       = 0x3f;\n\n/**\n * This class is transforms TrueType glyphs according to the data from\n * the Apple Advanced Typography variation tables (fvar, gvar, and avar).\n * These tables allow infinite adjustments to glyph weight, width, slant,\n * and optical size without the designer needing to specify every exact style.\n *\n * Apple's documentation for these tables is not great, so thanks to the\n * Freetype project for figuring much of this out.\n *\n * @private\n */\nexport default class GlyphVariationProcessor {\n  constructor(font, coords) {\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map;\n  }\n\n  normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    let normalized = [];\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      let axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n      } else {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n      }\n    }\n\n    // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n    if (this.font.avar) {\n      for (var i = 0; i < this.font.avar.segment.length; i++) {\n        let segment = this.font.avar.segment[i];\n        for (let j = 0; j < segment.correspondence.length; j++) {\n          let pair = segment.correspondence[j];\n          if (j >= 1 && normalized[i] < pair.fromCoord) {\n            let prev = segment.correspondence[j - 1];\n            normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) /\n              (pair.fromCoord - prev.fromCoord + Number.EPSILON) +\n              prev.toCoord;\n\n            break;\n          }\n        }\n      }\n    }\n\n    return normalized;\n  }\n\n  transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) { return; }\n\n    let { gvar } = this.font;\n    if (gid >= gvar.glyphCount) { return; }\n\n    let offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) { return; }\n\n    // Read the gvar data for this glyph\n    let { stream } = this.font;\n    stream.pos = offset;\n    if (stream.pos >= stream.length) {\n      return;\n    }\n\n    let tupleCount = stream.readUInt16BE();\n    let offsetToData = offset + stream.readUInt16BE();\n\n    if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n\n    let origPoints = glyphPoints.map(pt => pt.copy());\n\n    tupleCount &= TUPLE_COUNT_MASK;\n    for (let i = 0; i < tupleCount; i++) {\n      let tupleDataSize = stream.readUInt16BE();\n      let tupleIndex = stream.readUInt16BE();\n\n      if (tupleIndex & EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          tupleCoords.push(stream.readInt16BE() / 16384);\n        }\n\n      } else {\n        if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {\n          throw new Error('Invalid gvar table');\n        }\n\n        var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];\n      }\n\n      if (tupleIndex & INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          startCoords.push(stream.readInt16BE() / 16384);\n        }\n\n        var endCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          endCoords.push(stream.readInt16BE() / 16384);\n        }\n      }\n\n      // Get the factor at which to apply this tuple\n      let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n\n      var here = stream.pos;\n      stream.pos = offsetToData;\n\n      if (tupleIndex & PRIVATE_POINT_NUMBERS) {\n        var points = this.decodePoints();\n      } else {\n        var points = sharedPoints;\n      }\n\n      // points.length = 0 means there are deltas for all points\n      let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      let xDeltas = this.decodeDeltas(nPoints);\n      let yDeltas = this.decodeDeltas(nPoints);\n\n      if (points.length === 0) { // all points\n        for (let i = 0; i < glyphPoints.length; i++) {\n          var point = glyphPoints[i];\n          point.x += Math.round(xDeltas[i] * factor);\n          point.y += Math.round(yDeltas[i] * factor);\n        }\n      } else {\n        let outPoints = origPoints.map(pt => pt.copy());\n        let hasDelta = glyphPoints.map(() => false);\n\n        for (let i = 0; i < points.length; i++) {\n          let idx = points[i];\n          if (idx < glyphPoints.length) {\n            let point = outPoints[idx];\n            hasDelta[idx] = true;\n\n            point.x += Math.round(xDeltas[i] * factor);\n            point.y += Math.round(yDeltas[i] * factor);\n          }\n        }\n\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n\n        for (let i = 0; i < glyphPoints.length; i++) {\n          let deltaX = outPoints[i].x - origPoints[i].x;\n          let deltaY = outPoints[i].y - origPoints[i].y;\n\n          glyphPoints[i].x += deltaX;\n          glyphPoints[i].y += deltaY;\n        }\n      }\n\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  }\n\n  decodePoints() {\n    let stream = this.font.stream;\n    let count = stream.readUInt8();\n\n    if (count & POINTS_ARE_WORDS) {\n      count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    }\n\n    let points = new Uint16Array(count);\n    let i = 0;\n    let point = 0;\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & POINT_RUN_COUNT_MASK) + 1;\n      let fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n\n      for (let j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n\n    return points;\n  }\n\n  decodeDeltas(count) {\n    let stream = this.font.stream;\n    let i = 0;\n    let deltas = new Int16Array(count);\n\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & DELTA_RUN_COUNT_MASK) + 1;\n\n      if (run & DELTAS_ARE_ZERO) {\n        i += runCount;\n\n      } else {\n        let fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n        for (let j = 0; j < runCount && i < count; j++) {\n          deltas[i++] = fn.call(stream);\n        }\n      }\n    }\n\n    return deltas;\n  }\n\n  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    let normalized = this.normalizedCoords;\n    let { gvar } = this.font;\n    let factor = 1;\n\n    for (let i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) {\n        continue;\n      }\n\n      if (normalized[i] === 0) {\n        return 0;\n      }\n\n      if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {\n        if ((normalized[i] < Math.min(0, tupleCoords[i])) ||\n            (normalized[i] > Math.max(0, tupleCoords[i]))) {\n          return 0;\n        }\n\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if ((normalized[i] < startCoords[i]) ||\n            (normalized[i] > endCoords[i])) {\n          return 0;\n\n        } else if (normalized[i] < tupleCoords[i]) {\n          factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n\n        } else {\n          factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n        }\n      }\n    }\n\n    return factor;\n  }\n\n  // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n  interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) {\n      return;\n    }\n\n    let point = 0;\n    while (point < points.length) {\n      let firstPoint = point;\n\n      // find the end point of the contour\n      let endPoint = point;\n      let pt = points[endPoint];\n      while (!pt.endContour) {\n        pt = points[++endPoint];\n      }\n\n      // find the first point that has a delta\n      while (point <= endPoint && !hasDelta[point]) {\n        point++;\n      }\n\n      if (point > endPoint) {\n        continue;\n      }\n\n      let firstDelta = point;\n      let curDelta = point;\n      point++;\n\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n\n        point++;\n      }\n\n      // shift contour if we only have a single delta\n      if (curDelta === firstDelta) {\n        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n      } else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n\n        if (firstDelta > 0) {\n          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n        }\n      }\n\n      point = endPoint + 1;\n    }\n  }\n\n  deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) {\n      return;\n    }\n\n    let iterable = ['x', 'y'];\n    for (let i = 0; i < iterable.length; i++) {\n      let k = iterable[i];\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n\n      let in1 = inPoints[ref1][k];\n      let in2 = inPoints[ref2][k];\n      let out1 = outPoints[ref1][k];\n      let out2 = outPoints[ref2][k];\n\n      // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n      if (in1 !== in2 || out1 === out2) {\n        let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n\n        for (let p = p1; p <= p2; p++) {\n          let out = inPoints[p][k];\n\n          if (out <= in1) {\n            out += out1 - in1;\n          } else if (out >= in2) {\n            out += out2 - in2;\n          } else {\n            out = out1 + (out - in1) * scale;\n          }\n\n          outPoints[p][k] = out;\n        }\n      }\n    }\n  }\n\n  deltaShift(p1, p2, ref, inPoints, outPoints) {\n    let deltaX = outPoints[ref].x - inPoints[ref].x;\n    let deltaY = outPoints[ref].y - inPoints[ref].y;\n\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    for (let p = p1; p <= p2; p++) {\n      if (p !== ref) {\n        outPoints[p].x += deltaX;\n        outPoints[p].y += deltaY;\n      }\n    }\n  }\n\n  getAdvanceAdjustment(gid, table) {\n    let outerIndex, innerIndex;\n\n    if (table.advanceWidthMapping) {\n      let idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) {\n        idx = table.advanceWidthMapping.mapCount - 1;\n      }\n\n      let entryFormat = table.advanceWidthMapping.entryFormat;\n      ({outerIndex, innerIndex} = table.advanceWidthMapping.mapData[idx]);\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  }\n\n  // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n  getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) {\n      return 0;\n    }\n\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) {\n      return 0;\n    }\n\n    let deltaSet = varData.deltaSets[innerIndex];\n    let blendVector = this.getBlendVector(itemStore, outerIndex);\n    let netAdjustment = 0;\n\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    }\n\n    return netAdjustment;\n  }\n\n  getBlendVector(itemStore, outerIndex) {\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) {\n      return this.blendVectors.get(varData);\n    }\n\n    let normalizedCoords = this.normalizedCoords;\n    let blendVector = [];\n\n    // outer loop steps through master designs to be blended\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      let scalar = 1;\n      let regionIndex = varData.regionIndexes[master];\n      let axes = itemStore.variationRegionList.variationRegions[regionIndex];\n\n      // inner loop steps through axes in this region\n      for (let j = 0; j < axes.length; j++) {\n        let axis = axes[j];\n        let axisScalar;\n\n        // compute the scalar contribution of this axis\n        // ignore invalid ranges\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {\n          axisScalar = 1;\n\n        } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {\n          axisScalar = 1;\n\n        // peak of 0 means ignore this axis\n        } else if (axis.peakCoord === 0) {\n          axisScalar = 1;\n\n        // ignore this region if coords are out of range\n        } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {\n          axisScalar = 0;\n\n        // calculate a proportional factor\n        } else {\n          if (normalizedCoords[j] === axis.peakCoord) {\n            axisScalar = 1;\n          } else if (normalizedCoords[j] < axis.peakCoord) {\n            axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) /\n              (axis.peakCoord - axis.startCoord + Number.EPSILON);\n          } else {\n            axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) /\n              (axis.endCoord - axis.peakCoord + Number.EPSILON);\n          }\n        }\n\n        // take product of all the axis scalars\n        scalar *= axisScalar;\n      }\n\n      blendVector[master] = scalar;\n    }\n\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  }\n}\n","import cloneDeep from 'clone';\nimport Subset from './Subset';\nimport Directory from '../tables/directory';\nimport Tables from '../tables';\nimport TTFGlyphEncoder from '../glyph/TTFGlyphEncoder';\n\nexport default class TTFSubset extends Subset {\n  constructor(font) {\n    super(font);\n    this.glyphEncoder = new TTFGlyphEncoder;\n  }\n\n  _addGlyph(gid) {\n    let glyph = this.font.getGlyph(gid);\n    let glyf = glyph._decode();\n\n    // get the offset to the glyph from the loca table\n    let curOffset = this.font.loca.offsets[gid];\n    let nextOffset = this.font.loca.offsets[gid + 1];\n\n    let stream = this.font._getTableStream('glyf');\n    stream.pos += curOffset;\n\n    let buffer = stream.readBuffer(nextOffset - curOffset);\n\n    // if it is a compound glyph, include its components\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = new Uint8Array(buffer);\n      let view = new DataView(buffer.buffer);\n      for (let component of glyf.components) {\n        gid = this.includeGlyph(component.glyphID);\n        view.setUint16(component.pos, gid);\n      }\n    } else if (glyf && this.font._variationProcessor) {\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    }\n\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  }\n\n  encode() {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: [],\n      version: this.font.loca.version\n    };\n\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    };\n\n    // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n    let i = 0;\n    while (i < this.glyphs.length) {\n      this._addGlyph(this.glyphs[i++]);\n    }\n\n    let maxp = cloneDeep(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n\n    this.loca.offsets.push(this.offset);\n\n    let head = cloneDeep(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n\n    let hhea = cloneDeep(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length;\n\n    // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n\n    // TODO: subset prep, cvt, fpgm?\n    return Directory.toBuffer({\n      tables: {\n        head,\n        hhea,\n        loca: this.loca,\n        maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n\n        // name: clone @font.name\n        // 'OS/2': clone @font['OS/2']\n        // post: clone @font.post\n        // cmap: cmap\n      }\n    });\n  }\n}\n","import * as r from 'restructure';\n\nconst resolved = Promise.resolve();\n\nexport default class Subset {\n  constructor(font) {\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {};\n\n    // always include the missing glyph\n    this.includeGlyph(0);\n  }\n\n  includeGlyph(glyph) {\n    if (typeof glyph === 'object') {\n      glyph = glyph.id;\n    }\n\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n\n    return this.mapping[glyph];\n  }\n}\n","import * as r from 'restructure';\n\n// Flags for simple glyphs\nconst ON_CURVE        = 1 << 0;\nconst X_SHORT_VECTOR  = 1 << 1;\nconst Y_SHORT_VECTOR  = 1 << 2;\nconst REPEAT          = 1 << 3;\nconst SAME_X          = 1 << 4;\nconst SAME_Y          = 1 << 5;\n\nclass Point {\n  static size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  }\n  \n  static encode(stream, value) {\n    if (value >= 0 && value <= 255) {\n      stream.writeUInt8(value);\n    } else {\n      stream.writeInt16BE(value);\n    }\n  }\n}\n\nlet Glyf = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16,\n  endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),\n  instructions: new r.Array(r.uint8, r.uint16),\n  flags: new r.Array(r.uint8, 0),\n  xPoints: new r.Array(Point, 0),\n  yPoints: new r.Array(Point, 0)\n});\n\n/**\n * Encodes TrueType glyph outlines\n */\nexport default class TTFGlyphEncoder {\n  encodeSimple(path, instructions = []) {\n    let endPtsOfContours = [];\n    let xPoints = [];\n    let yPoints = [];\n    let flags = [];\n    let same = 0;\n    let lastX = 0, lastY = 0, lastFlag = 0;\n    let pointCount = 0;\n    \n    for (let i = 0; i < path.commands.length; i++) {\n      let c = path.commands[i];\n      \n      for (let j = 0; j < c.args.length; j += 2) {\n        let x = c.args[j];\n        let y = c.args[j + 1];\n        let flag = 0;\n        \n        // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          let next = path.commands[i + 1];\n          if (next && next.command === 'quadraticCurveTo') {\n            let midX = (lastX + next.args[0]) / 2;\n            let midY = (lastY + next.args[1]) / 2;\n            \n            if (x === midX && y === midY) {\n              continue;\n            }\n          }\n        }\n        \n        // All points except control points are on curve.\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) {\n          flag |= ON_CURVE;\n        }\n        \n        flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR, SAME_X);\n        flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR, SAME_Y);\n        \n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= REPEAT;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n      \n          flags.push(flag);\n          lastFlag = flag;\n        }\n        \n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n  \n      if (c.command === 'closePath') {\n        endPtsOfContours.push(pointCount - 1);\n      }\n    }\n\n    // Close the path if the last command didn't already\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {\n      endPtsOfContours.push(pointCount - 1);\n    }\n    \n    let bbox = path.bbox;\n    let glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n    \n    let size = Glyf.size(glyf);\n    let tail = 4 - (size % 4);\n    \n    let stream = new r.EncodeStream(size + tail);\n    Glyf.encode(stream, glyf);\n    \n    // Align to 4-byte length\n    if (tail !== 0) {\n      stream.fill(0, tail);\n    }\n    \n    return stream.buffer;\n  }\n  \n  _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    let diff = value - last;\n    \n    if (value === last) {\n      flag |= sameFlag;\n    } else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) {\n          diff = -diff;\n        } else {\n          flag |= sameFlag;\n        }\n      }\n      \n      points.push(diff);\n    }\n    \n    return flag;\n  }\n}\n","import Subset from './Subset';\nimport CFFTop from '../cff/CFFTop';\nimport CFFPrivateDict from '../cff/CFFPrivateDict';\nimport standardStrings from '../cff/CFFStandardStrings';\n\nexport default class CFFSubset extends Subset {\n  constructor(font) {\n    super(font);\n\n    this.cff = this.font['CFF '];\n    if (!this.cff) {\n      throw new Error('Not a CFF Font');\n    }\n  }\n\n  subsetCharstrings() {\n    this.charstrings = [];\n    let gsubrs = {};\n\n    for (let gid of this.glyphs) {\n      this.charstrings.push(this.cff.getCharString(gid));\n\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedGsubrs) {\n        gsubrs[subr] = true;\n      }\n    }\n\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  }\n\n  subsetSubrs(subrs, used) {\n    let res = [];\n    for (let i = 0; i < subrs.length; i++) {\n      let subr = subrs[i];\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else {\n        res.push(new Uint8Array([11])); // return\n      }\n    }\n\n    return res;\n  }\n\n  subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n\n    let used_fds = {};\n    let used_subrs = [];\n    let fd_select = {};\n    for (let gid of this.glyphs) {\n      let fd = this.cff.fdForGlyph(gid);\n      if (fd == null) {\n        continue;\n      }\n\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n        fd_select[fd] = topDict.FDArray.length - 1;\n      }\n\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(fd_select[fd]);\n\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedSubrs) {\n        used_subrs[fd_select[fd]][subr] = true;\n      }\n    }\n\n    for (let i = 0; i < topDict.FDArray.length; i++) {\n      let dict = topDict.FDArray[i];\n      delete dict.FontName;\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n\n    return;\n  }\n\n  createCIDFontdict(topDict) {\n    let used_subrs = {};\n    for (let gid of this.glyphs) {\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedSubrs) {\n        used_subrs[subr] = true;\n      }\n    }\n\n    let privateDict = Object.assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {\n      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    }\n\n    topDict.FDArray = [{ Private: privateDict }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{ first: 0, fd: 0 }],\n      sentinel: this.charstrings.length\n    };\n  }\n\n  addString(string) {\n    if (!string) {\n      return null;\n    }\n\n    if (!this.strings) {\n      this.strings = [];\n    }\n\n    this.strings.push(string);\n    return standardStrings.length + this.strings.length - 1;\n  }\n\n  encode() {\n    this.subsetCharstrings();\n\n    let charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{ first: 1, nLeft: this.charstrings.length - 2 }]\n    };\n\n    let topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n\n    for (let key of ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName']) {\n      topDict[key] = this.addString(this.cff.string(topDict[key]));\n    }\n\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n\n    if (this.cff.isCIDFont) {\n      this.subsetFontdict(topDict);\n    } else {\n      this.createCIDFontdict(topDict);\n    }\n\n    let top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: 4,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n\n    return CFFTop.toBuffer(top);\n  }\n}\n","import TTFFont from './TTFFont';\nimport WOFFDirectory from './tables/WOFFDirectory';\nimport tables from './tables';\nimport inflate from 'tiny-inflate';\nimport * as r from 'restructure';\nimport { asciiDecoder } from './utils';\n\nexport default class WOFFFont extends TTFFont {\n  type = 'WOFF';\n\n  static probe(buffer) {\n    return asciiDecoder.decode(buffer.slice(0, 4)) === 'wOFF';\n  }\n\n  _decodeDirectory() {\n    this.directory = WOFFDirectory.decode(this.stream, { _startOffset: 0 });\n  }\n\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n        let outBuffer = new Uint8Array(table.length);\n        let buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new r.DecodeStream(buf);\n      } else {\n        return this.stream;\n      }\n    }\n\n    return null;\n  }\n}\n","import * as r from 'restructure';\nimport tables from './';\n\nlet WOFFDirectoryEntry = new r.Struct({\n  tag:          new r.String(4),\n  offset:       new r.Pointer(r.uint32, 'void', {type: 'global'}),\n  compLength:   r.uint32,\n  length:       r.uint32,\n  origChecksum: r.uint32\n});\n\nlet WOFFDirectory = new r.Struct({\n  tag:            new r.String(4), // should be 'wOFF'\n  flavor:         r.uint32,\n  length:         r.uint32,\n  numTables:      r.uint16,\n  reserved:       new r.Reserved(r.uint16),\n  totalSfntSize:  r.uint32,\n  majorVersion:   r.uint16,\n  minorVersion:   r.uint16,\n  metaOffset:     r.uint32,\n  metaLength:     r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset:     r.uint32,\n  privLength:     r.uint32,\n  tables:         new r.Array(WOFFDirectoryEntry, 'numTables')\n});\n\nWOFFDirectory.process = function() {\n  let tables = {};\n  for (let table of this.tables) {\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nexport default WOFFDirectory;\n","import * as r from 'restructure';\nimport brotli from 'brotli/decompress.js';\nimport TTFFont from './TTFFont';\nimport TTFGlyph, { Point } from './glyph/TTFGlyph';\nimport WOFF2Glyph from './glyph/WOFF2Glyph';\nimport WOFF2Directory from './tables/WOFF2Directory';\nimport { asciiDecoder } from './utils';\n\n/**\n * Subclass of TTFFont that represents a TTF/OTF font compressed by WOFF2\n * See spec here: http://www.w3.org/TR/WOFF2/\n */\nexport default class WOFF2Font extends TTFFont {\n  type = 'WOFF2';\n\n  static probe(buffer) {\n    return asciiDecoder.decode(buffer.slice(0, 4)) === 'wOF2';\n  }\n\n  _decodeDirectory() {\n    this.directory = WOFF2Directory.decode(this.stream);\n    this._dataPos = this.stream.pos;\n  }\n\n  _decompress() {\n    // decompress data and setup table offsets if we haven't already\n    if (!this._decompressed) {\n      this.stream.pos = this._dataPos;\n      let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n\n      let decompressedSize = 0;\n      for (let tag in this.directory.tables) {\n        let entry = this.directory.tables[tag];\n        entry.offset = decompressedSize;\n        decompressedSize += (entry.transformLength != null) ? entry.transformLength : entry.length;\n      }\n\n      let decompressed = brotli(buffer, decompressedSize);\n      if (!decompressed) {\n        throw new Error('Error decoding compressed data in WOFF2');\n      }\n\n      this.stream = new r.DecodeStream(decompressed);\n      this._decompressed = true;\n    }\n  }\n\n  _decodeTable(table) {\n    this._decompress();\n    return super._decodeTable(table);\n  }\n\n  // Override this method to get a glyph and return our\n  // custom subclass if there is a glyf table.\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n        if (!this._transformedGlyphs) { this._transformGlyfTable(); }\n        return this._glyphs[glyph] = new WOFF2Glyph(glyph, characters, this);\n\n      } else {\n        return super._getBaseGlyph(glyph, characters);\n      }\n    }\n  }\n\n  _transformGlyfTable() {\n    this._decompress();\n    this.stream.pos = this.directory.tables.glyf.offset;\n    let table = GlyfTable.decode(this.stream);\n    let glyphs = [];\n\n    for (let index = 0; index < table.numGlyphs; index++) {\n      let glyph = {};\n      let nContours = table.nContours.readInt16BE();\n      glyph.numberOfContours = nContours;\n\n      if (nContours > 0) { // simple glyph\n        let nPoints = [];\n        let totalPoints = 0;\n\n        for (let i = 0; i < nContours; i++) {\n          let r = read255UInt16(table.nPoints);\n          totalPoints += r;\n          nPoints.push(totalPoints);\n        }\n\n        glyph.points = decodeTriplet(table.flags, table.glyphs, totalPoints);\n        for (let i = 0; i < nContours; i++) {\n          glyph.points[nPoints[i] - 1].endContour = true;\n        }\n\n        var instructionSize = read255UInt16(table.glyphs);\n\n      } else if (nContours < 0) { // composite glyph\n        let haveInstructions = TTFGlyph.prototype._decodeComposite.call({ _font: this }, glyph, table.composites);\n        if (haveInstructions) {\n          var instructionSize = read255UInt16(table.glyphs);\n        }\n      }\n\n      glyphs.push(glyph);\n    }\n\n    this._transformedGlyphs = glyphs;\n  }\n}\n\n// Special class that accepts a length and returns a sub-stream for that data\nclass Substream {\n  constructor(length) {\n    this.length = length;\n    this._buf = new r.Buffer(length);\n  }\n\n  decode(stream, parent) {\n    return new r.DecodeStream(this._buf.decode(stream, parent));\n  }\n}\n\n// This struct represents the entire glyf table\nlet GlyfTable = new r.Struct({\n  version: r.uint32,\n  numGlyphs: r.uint16,\n  indexFormat: r.uint16,\n  nContourStreamSize: r.uint32,\n  nPointsStreamSize: r.uint32,\n  flagStreamSize: r.uint32,\n  glyphStreamSize: r.uint32,\n  compositeStreamSize: r.uint32,\n  bboxStreamSize: r.uint32,\n  instructionStreamSize: r.uint32,\n  nContours: new Substream('nContourStreamSize'),\n  nPoints: new Substream('nPointsStreamSize'),\n  flags: new Substream('flagStreamSize'),\n  glyphs: new Substream('glyphStreamSize'),\n  composites: new Substream('compositeStreamSize'),\n  bboxes: new Substream('bboxStreamSize'),\n  instructions: new Substream('instructionStreamSize')\n});\n\nconst WORD_CODE = 253;\nconst ONE_MORE_BYTE_CODE2 = 254;\nconst ONE_MORE_BYTE_CODE1 = 255;\nconst LOWEST_U_CODE = 253;\n\nfunction read255UInt16(stream) {\n  let code = stream.readUInt8();\n\n  if (code === WORD_CODE) {\n    return stream.readUInt16BE();\n  }\n\n  if (code === ONE_MORE_BYTE_CODE1) {\n    return stream.readUInt8() + LOWEST_U_CODE;\n  }\n\n  if (code === ONE_MORE_BYTE_CODE2) {\n    return stream.readUInt8() + LOWEST_U_CODE * 2;\n  }\n\n  return code;\n}\n\nfunction withSign(flag, baseval) {\n  return flag & 1 ? baseval : -baseval;\n}\n\nfunction decodeTriplet(flags, glyphs, nPoints) {\n  let y;\n  let x = y = 0;\n  let res = [];\n\n  for (let i = 0; i < nPoints; i++) {\n    let dx = 0, dy = 0;\n    let flag = flags.readUInt8();\n    let onCurve = !(flag >> 7);\n    flag &= 0x7f;\n\n    if (flag < 10) {\n      dx = 0;\n      dy = withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n\n    } else if (flag < 20) {\n      dx = withSign(flag, (((flag - 10) & 14) << 7) + glyphs.readUInt8());\n      dy = 0;\n\n    } else if (flag < 84) {\n      var b0 = flag - 20;\n      var b1 = glyphs.readUInt8();\n      dx = withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n      dy = withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n\n    } else if (flag < 120) {\n      var b0 = flag - 84;\n      dx = withSign(flag, 1 + ((b0 / 12) << 8) + glyphs.readUInt8());\n      dy = withSign(flag >> 1, 1 + (((b0 % 12) >> 2) << 8) + glyphs.readUInt8());\n\n    } else if (flag < 124) {\n      var b1 = glyphs.readUInt8();\n      let b2 = glyphs.readUInt8();\n      dx = withSign(flag, (b1 << 4) + (b2 >> 4));\n      dy = withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n\n    } else {\n      dx = withSign(flag, glyphs.readUInt16BE());\n      dy = withSign(flag >> 1, glyphs.readUInt16BE());\n    }\n\n    x += dx;\n    y += dy;\n    res.push(new Point(onCurve, false, x, y));\n  }\n\n  return res;\n}\n","import TTFGlyph from './TTFGlyph';\n\n/**\n * Represents a TrueType glyph in the WOFF2 format, which compresses glyphs differently.\n */\nexport default class WOFF2Glyph extends TTFGlyph {\n  type = 'WOFF2';\n\n  _decode() {\n    // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n    return this._font._transformedGlyphs[this.id];\n  }\n\n  _getCBox() {\n    return this.path.bbox;\n  }\n}\n","import * as r from 'restructure';\n\nconst Base128 = {\n  decode(stream) {\n    let result = 0;\n    let iterable = [0, 1, 2, 3, 4];\n    for (let j = 0; j < iterable.length; j++) {\n      let i = iterable[j];\n      let code = stream.readUInt8();\n\n      // If any of the top seven bits are set then we're about to overflow.\n      if (result & 0xe0000000) {\n        throw new Error('Overflow');\n      }\n\n      result = (result << 7) | (code & 0x7f);\n      if ((code & 0x80) === 0) {\n        return result;\n      }\n    }\n\n    throw new Error('Bad base 128 number');\n  }\n};\n\nlet knownTags = [\n  'cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ',\n  'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp',\n  'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF',\n  'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL',\n  'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc',\n  'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx',\n  'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'\n];\n\nlet WOFF2DirectoryEntry = new r.Struct({\n  flags: r.uint8,\n  customTag: new r.Optional(new r.String(4), t => (t.flags & 0x3f) === 0x3f),\n  tag: t => t.customTag || knownTags[t.flags & 0x3f],// || (() => { throw new Error(`Bad tag: ${flags & 0x3f}`); })(); },\n  length: Base128,\n  transformVersion: t => (t.flags >>> 6) & 0x03,\n  transformed: t => (t.tag === 'glyf' || t.tag === 'loca') ? t.transformVersion === 0 : t.transformVersion !== 0,\n  transformLength: new r.Optional(Base128, t => t.transformed)\n});\n\nlet WOFF2Directory = new r.Struct({\n  tag: new r.String(4), // should be 'wOF2'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  totalCompressedSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFF2DirectoryEntry, 'numTables')\n});\n\nWOFF2Directory.process = function() {\n  let tables = {};\n  for (let i = 0; i < this.tables.length; i++) {\n    let table = this.tables[i];\n    tables[table.tag] = table;\n  }\n\n  return this.tables = tables;\n};\n\nexport default WOFF2Directory;\n","import * as r from 'restructure';\nimport TTFFont from './TTFFont';\nimport Directory from './tables/directory';\nimport tables from './tables';\nimport { asciiDecoder } from './utils';\n\nlet TTCHeader = new r.VersionedStruct(r.uint32, {\n  0x00010000: {\n    numFonts:   r.uint32,\n    offsets:    new r.Array(r.uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts:   r.uint32,\n    offsets:    new r.Array(r.uint32, 'numFonts'),\n    dsigTag:    r.uint32,\n    dsigLength: r.uint32,\n    dsigOffset: r.uint32\n  }\n});\n\nexport default class TrueTypeCollection {\n  type = 'TTC';\n\n  static probe(buffer) {\n    return asciiDecoder.decode(buffer.slice(0, 4)) === 'ttcf';\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n    if (stream.readString(4) !== 'ttcf') {\n      throw new Error('Not a TrueType collection');\n    }\n\n    this.header = TTCHeader.decode(stream);\n  }\n\n  getFont(name) {\n    for (let offset of this.header.offsets) {\n      let stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      let font = new TTFFont(stream);\n      if (\n        font.postscriptName === name ||\n        (\n          font.postscriptName instanceof Uint8Array && \n          name instanceof Uint8Array && \n          font.postscriptName.every((v, i) => name[i] === v)\n        )\n      ) {\n        return font;\n      }\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    let fonts = [];\n    for (let offset of this.header.offsets) {\n      let stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      fonts.push(new TTFFont(stream));\n    }\n\n    return fonts;\n  }\n}\n","import * as r from 'restructure';\nimport TTFFont from './TTFFont';\n\nlet DFontName = new r.String(r.uint8);\nlet DFontData = new r.Struct({\n  len: r.uint32,\n  buf: new r.Buffer('len')\n});\n\nlet Ref = new r.Struct({\n  id: r.uint16,\n  nameOffset: r.int16,\n  attr: r.uint8,\n  dataOffset: r.uint24,\n  handle: r.uint32\n});\n\nlet Type = new r.Struct({\n  name: new r.String(4),\n  maxTypeIndex: r.uint16,\n  refList: new r.Pointer(r.uint16, new r.Array(Ref, t => t.maxTypeIndex + 1), { type: 'parent' })\n});\n\nlet TypeList = new r.Struct({\n  length: r.uint16,\n  types: new r.Array(Type, t => t.length + 1)\n});\n\nlet DFontMap = new r.Struct({\n  reserved: new r.Reserved(r.uint8, 24),\n  typeList: new r.Pointer(r.uint16, TypeList),\n  nameListOffset: new r.Pointer(r.uint16, 'void')\n});\n\nlet DFontHeader = new r.Struct({\n  dataOffset: r.uint32,\n  map: new r.Pointer(r.uint32, DFontMap),\n  dataLength: r.uint32,\n  mapLength: r.uint32\n});\n\nexport default class DFont {\n  type = 'DFont';\n\n  static probe(buffer) {\n    let stream = new r.DecodeStream(buffer);\n\n    try {\n      var header = DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n\n    for (let type of header.map.typeList.types) {\n      if (type.name === 'sfnt') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n    this.header = DFontHeader.decode(this.stream);\n\n    for (let type of this.header.map.typeList.types) {\n      for (let ref of type.refList) {\n        if (ref.nameOffset >= 0) {\n          this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n          ref.name = DFontName.decode(this.stream);\n        } else {\n          ref.name = null;\n        }\n      }\n\n      if (type.name === 'sfnt') {\n        this.sfnt = type;\n      }\n    }\n  }\n\n  getFont(name) {\n    if (!this.sfnt) {\n      return null;\n    }\n\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      let font = new TTFFont(stream);\n      if (\n        font.postscriptName === name ||\n        (\n          font.postscriptName instanceof Uint8Array && \n          name instanceof Uint8Array && \n          font.postscriptName.every((v, i) => name[i] === v)\n        )\n      ) {\n        return font;\n      }\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    let fonts = [];\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      fonts.push(new TTFFont(stream));\n    }\n\n    return fonts;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}